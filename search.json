[
  {
    "objectID": "pushups/2_Optimization_pushups.html",
    "href": "pushups/2_Optimization_pushups.html",
    "title": "Optimization Pushups",
    "section": "",
    "text": "The spirit of this simple tutorial consists in learning how to write simple solution algorithms. For each algorithm, test that it works, using simple test functions whose solution is known.\nWrite a function fixed_point(f::Function, x0::Float64) which computes the fixed point of f starting from initial point x0.\nWrite a function bisection(f::Function, a::Float64, b::Float64) which computes a zero of function f within (a,b) using a bisection method.\nWrite a function golden(f::Function, a::Float64, b::Float64) which computes a zero of function f within (a,b) using a golden ratio method.\nWrite a function zero_newton(f::Function, x0::Float64) which computes the zero of function f starting from initial point x0.\nAdd an option zero_newton(f::Function, x0::Float64, backtracking=true) which computes the zero of function f starting from initial point x0 using backtracking in each iteration.\nWrite a function min_gd(f::Function, x0::Float64) which computes the minimum of function f using gradient descent. Assume f returns a scalar and a gradient.\nWrite a function min_nr(f::Function, x0::Float64) which computes the minimum of function f using Newton-Raphson method. Assume f returns a scalar, a gradient, and a hessian.\nWrite a method zero_newton(f::Function, x0::Vector{Float64}) which computes the zero of a vector valued function f starting from initial point x0.\n\nf(z) = let \n    x,y = z\n    [x^3 + y, x-y] \nend\nx0 = [0.1, 0.3]\n\n2-element Vector{Float64}:\n 0.1\n 0.3\n\n\n\nf(x0)\n\n2-element Vector{Float64}:\n  0.301\n -0.19999999999999998\n\n\n\nusing ForwardDiff\nForwardDiff.jacobian(f, x0)\n\n2×2 Matrix{Float64}:\n 0.03   1.0\n 1.0   -1.0\n\n\n\nfunction zero_newton(f, x0; maxit=10, verbose=false, τ_η=1e-10, τ_ϵ=1e-10)\n\n    # local x1\n    x1 = x0\n    \n    for it ∈ 1:maxit\n\n        f0 = f(x0)\n        ϵ = maximum(abs.(f0))\n        if ϵ &lt; τ_ϵ\n            verbose ? println(\"Iteration $(it): ϵ=$(ϵ) \") : nothing\n            return x0\n        end\n\n\n        J0 = ForwardDiff.jacobian(f, x0)\n\n        x1 = x0 - J0 \\ f0\n\n        η = maximum(abs.(x1-x0))\n        if η&lt;τ_η\n            return x1\n        end\n\n        # cond ? do : otherwise\n\n        verbose ? println(\"Iteration $(it): ϵ=$(ϵ) : η=$(η)\") : nothing\n\n\n        x0 = x1\n\n    end\n\n    return x1\n\nend\n\nzero_newton (generic function with 1 method)\n\n\n\nzero_newton(f, x0; verbose=true)\n\nIteration 1: ϵ=0.301 : η=0.2980582524271845\nIteration 2: ϵ=0.0019417548939487858 : η=0.00194173293071458\nIteration 3: ϵ=1.4642100930805857e-8 : η=1.4642100930805848e-8\nIteration 4: ϵ=6.617444900424222e-24 \n\n\n2-element Vector{Float64}:\n 6.617444900424222e-24\n 6.617444900424222e-24\n\n\nAdd an method zero_newton(f::Function, x0::Vector{Float64}, backtracking=true) which computes the zero of function f starting from initial point x0 using backtracking in each iteration.\n\nfunction zero_newton(f, x0; maxit=10, verbose=false, τ_η=1e-10, τ_ϵ=1e-10, backtrack=true)\n\n    # local x1\n    x1 = x0\n    \n    for it ∈ 1:maxit\n\n        f0 = f(x0)\n        ϵ = maximum(abs.(f0))\n        if ϵ &lt; τ_ϵ\n            verbose ? println(\"Iteration $(it): ϵ=$(ϵ) \") : nothing\n            return x0\n        end\n\n\n        J0 = ForwardDiff.jacobian(f, x0)\n        \n        # Newton steap\n        Δ = - J0 \\ f0\n        \n        if !backtrack\n        \n            x1 = x0 + Δ\n\n        else\n            for i = 0:10\n                x1 = x0 + 2.0^(-i)*Δ\n\n                # test function for new guess\n                f1 = f(x1)\n                ϵ1 = maximum(abs.(f1))\n                \n                if ϵ1&lt;ϵ\n                    # new guess is good\n                    break\n                end\n\n            end\n        end\n\n        η = maximum(abs.(x1-x0))\n        if η&lt;τ_η\n            return x1\n        end\n\n        # cond ? do : otherwise\n\n        verbose ? println(\"Iteration $(it): ϵ=$(ϵ) : η=$(η)\") : nothing\n\n\n        x0 = x1\n\n    end\n\n    return x1\n\nend\n\nzero_newton (generic function with 1 method)\n\n\n\nzero_newton(f, x0, verbose=true, backtrack=true)\n\nIteration 1: ϵ=0.301 : η=0.2980582524271845\nIteration 2: ϵ=0.0019417548939487858 : η=0.00194173293071458\nIteration 3: ϵ=1.4642100930805857e-8 : η=1.4642100930805848e-8\nIteration 4: ϵ=6.617444900424222e-24 \n\n\n2-element Vector{Float64}:\n 6.617444900424222e-24\n 6.617444900424222e-24\n\n\nAdd a method zero_newton(f::Function, x0::Vector{Float64}, backtracking=true, lb=Vector{Float64}) which computes the zero of function f starting from initial point x0 taking complementarity constraint into account x&gt;=lb using the Fischer-Burmeister method.\n\ng(z) = let\n    x,y=z\n    [ y-x, x^2+y^2-1 ]\nend\n\n\nlb = [0.0, -10000]\n\n2-element Vector{Float64}:\n      0.0\n -10000.0\n\n\n\nφ_FB(a,b) = a+b-sqrt(a^2+b^2)  # min\n\nφ_FB (generic function with 1 method)\n\n\n\nfunction ncp(f, x0, lb; args...)\n    \n    # the dot calls φ_FB component-wise on its vector arguments\n    fun(u) = φ_FB.(f(u), u - lb)\n\n    zero_newton(fun, x0; args...)\n\nend\n\nncp (generic function with 2 methods)\n\n\n\nx0\n\n2-element Vector{Float64}:\n 0.1\n 0.3\n\n\n\nncp(g, x0, lb; maxit=100, verbose=true)\n\nIteration 1: ϵ=0.900040498785529 : η=0.8449227125187968\nIteration 2: ϵ=0.34501875850946817 : η=0.17623432346721998\nIteration 3: ϵ=0.04599075111946149 : η=0.022412443670669857\nIteration 4: ϵ=0.0005761770207755035 : η=0.0002880043594630788\nIteration 5: ϵ=8.413735486101359e-8 : η=4.2068675654149956e-8\nIteration 6: ϵ=0.0 \n\n\n2-element Vector{Float64}:\n -5.460886251568741e-17\n  1.0000000000002816\n\n\n\nncp(g, [0.6, 0.6], lb; maxit=100, verbose=true)\n\nIteration 1: ϵ=0.2800039197663864 : η=0.11666503345865797\nIteration 2: ϵ=0.027217503327847226 : η=0.009494525381928298\nIteration 3: ϵ=0.0001802549850253854 : η=6.37240192483679e-5\nIteration 4: ϵ=8.119968697428703e-9 : η=2.8708424526513454e-9\nIteration 5: ϵ=0.0 \n\n\n2-element Vector{Float64}:\n 0.7071067811866388\n 0.7071067811866388"
  },
  {
    "objectID": "tutorials/1_Julia_Basics.html",
    "href": "tutorials/1_Julia_Basics.html",
    "title": "Julia Basics",
    "section": "",
    "text": "developped at MIT on top of opensource technologies\n\nlinux / git / llvm\n\nsyntax inspired by Matlab but:\n\nmore consistent\nlots of features from high level languages\n\neverything is JIT-compiled\n\ninterpreted vs compiled treadeoff\n-&gt; very fast\nmost of the base library is written in Julia\n\nopensource/free + vibrant community\n\nSome useful links from QuantEcon:\n\nJulia cheatsheet\nJulia-Matlab comparison\nJulia essentials\nVectors, arrays and matrices\n\nExcellent resources at: julialang - checkout JuliaAcademy, it’s free - ongoing MOOC at MIT",
    "crumbs": [
      "Tutorials",
      "Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/1_Julia_Basics.html#additional-exercises",
    "href": "tutorials/1_Julia_Basics.html#additional-exercises",
    "title": "Julia Basics",
    "section": "Additional Exercises",
    "text": "Additional Exercises\nTaken from QuantEcon’s Julia Essentials and Vectors, Arrays, and Matrices lectures.\n\nConsider the polynomial \\[p(x) = \\sum_{i=0}^n a_0 x^0\\] Using enumerate, write a function p such that p(x, coeff) computes the value of the polynomial with coefficients coeff evaluated at x.\n\n\n\n\nppp (generic function with 1 method)\n\n\n\nWrite a function solve_discrete_lyapunov that solves the discrete Lyapunov equation \\[S = ASA' + \\Sigma \\Sigma'\\] using the iterative procedure \\[S_0 = \\Sigma \\Sigma'\\] \\[S_{t+1} = A S_t A' + \\Sigma \\Sigma'\\] taking in as arguments the \\(n \\times n\\) matrix \\(A\\), the \\(n \\times k\\) matrix \\(\\Sigma\\), and a number of iterations.",
    "crumbs": [
      "Tutorials",
      "Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/4_Optimization.html",
    "href": "tutorials/4_Optimization.html",
    "title": "Optimization",
    "section": "",
    "text": "In this tutorial you will learn to code and use common optimization algorithms for static models."
  },
  {
    "objectID": "tutorials/4_Optimization.html#computational-economics-mie37",
    "href": "tutorials/4_Optimization.html#computational-economics-mie37",
    "title": "Optimization",
    "section": "",
    "text": "In this tutorial you will learn to code and use common optimization algorithms for static models."
  },
  {
    "objectID": "tutorials/4_Optimization.html#profit-optimization-by-a-monopolist",
    "href": "tutorials/4_Optimization.html#profit-optimization-by-a-monopolist",
    "title": "Optimization",
    "section": "Profit optimization by a monopolist",
    "text": "Profit optimization by a monopolist\nA monopolist produces quantity \\(q\\) of goods X at price \\(p\\). Its cost function is \\(c(q) = 0.5 + q (1-qe^{-q})\\)\nThe consumer’s demand for price \\(p\\) is \\(x(p)=2 e^{-0.5 p}\\) (constant elasticity of demand to price).\nWrite down the profit function of the monopolist and find the optimal production (if any). Don’t use any library except for plotting."
  },
  {
    "objectID": "tutorials/4_Optimization.html#constrained-optimization",
    "href": "tutorials/4_Optimization.html#constrained-optimization",
    "title": "Optimization",
    "section": "Constrained optimization",
    "text": "Constrained optimization\nConsider the function \\(f(x,y) = 1-(x-0.5)^2 -(y-0.3)^2\\).\nUse Optim.jl to minimize \\(f\\) without constraint. Check you understand diagnostic information returned by the optimizer.\nNow, consider the constraint \\(x&lt;0.3\\) and maximize \\(f\\) under this new constraint.\nReformulate the problem as a root finding problem with lagrangians. Write the complementarity conditions.\nSolve using NLSolve.jl"
  },
  {
    "objectID": "tutorials/4_Optimization.html#consumption-optimization",
    "href": "tutorials/4_Optimization.html#consumption-optimization",
    "title": "Optimization",
    "section": "Consumption optimization",
    "text": "Consumption optimization\nA consumer has preferences \\(U(c_1, c_2)\\) over two consumption goods \\(c_1\\) and \\(c_2\\).\nGiven a budget \\(I\\), consumer wants to maximize utility subject to the budget constraint \\(p_1 c_1 + p_2 c_2 \\leq I\\).\nWe choose a Stone-Geary specification where\n\\(U(c_1, c_2)=\\beta_1 \\log(c_1-\\gamma_1) + \\beta_2 \\log(c_2-\\gamma_2)\\)\nWrite the Karush-Kuhn-Tucker necessary conditions for the problem.\nVerify the KKT conditions are sufficient for optimality.\nDerive analytically the demand functions, and the shadow price.\nInterpret this problem as a complementarity problem and solve it using NLSolve.\nProduce some nice graphs with isoutility curves, the budget constraint and the optimal choice."
  },
  {
    "objectID": "tutorials/2_solow.html",
    "href": "tutorials/2_solow.html",
    "title": "Convergence of Sequences",
    "section": "",
    "text": "Tutorial: Convergence\n\nSolow Model\nA representative agent uses capital \\(k_t\\) to produce \\(y_t\\) using the following production function:\n\\[y_t = k_t^{\\alpha}\\]\nHe chooses to consume an amount \\(c_t \\in ]0, y_t]\\) and invests what remains:\n\\[i_t = y_t - c_t\\]\nHe accumulates capital \\(k_t\\) according to:\n\\[k_{t+1} = \\left( 1-\\delta \\right) k_{t} + i_{t}\\]\nwhere \\(\\delta\\) is the depreciation rate and \\(i_t\\) is the amount invested.\nThe goal of the representative agent is to maximize:\n\\[\\sum_{t\\geq 0} \\beta^t U(c_t)\\]\nwhere \\(U(x)=\\frac{x^{1-\\gamma}}{1-\\gamma}\\) and \\(\\beta&lt;1\\) is the discount factor.\nFor now, we ignore the objective and assume that the saving rate \\(s=\\frac{c_t}{y_t}\\) is constant over time.\nCreate a NamedTuple to hold parameter values \\(\\beta=0.96\\), \\(\\delta=0.1\\), \\(\\alpha=0.3\\), \\(\\gamma=4\\).\nWrite down the formula of function \\(f\\) such that \\(k_{t+1}\\): \\(k_{t+1} = f(k_t)\\).\nDefine a function f(k::Float64, p::NamedTuple)::Float64 to represent \\(f\\) for a given calibration\nWrite a function simulate(k0::Float64, T::Int, p::NamedTuple)::Vector{Float64} to compute the simulation over T periods starting from initial capital level k0.\nMake a nice plot to illustrate the convergence. Do we get convergence from any initial level of capital?\nSuppose you were interested in using f to compute the steady-state. What would you propose to measure convergence speed? To speed-up convergence? Implement these ideas.",
    "crumbs": [
      "Tutorials",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computational Economics - ECO309",
    "section": "",
    "text": "Homework"
  },
  {
    "objectID": "index.html#indicative-schedule",
    "href": "index.html#indicative-schedule",
    "title": "Computational Economics - ECO309",
    "section": "Indicative Schedule",
    "text": "Indicative Schedule\n\n\n\n\n\nDate\n\n\nTitle\n\n\n\n\n\n\nMar 28, 2024\n\n\nIntroduction\n\n\n\n\nApr 4, 2024\n\n\nConvergence of Sequences\n\n\n\n\nApr 11, 2024\n\n\nPerturbation Analysis\n\n\n\n\nApr 25, 2024\n\n\nOptimization\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#communication",
    "href": "index.html#communication",
    "title": "Computational Economics - ECO309",
    "section": "Communication",
    "text": "Communication\n\nZulip (best)\nEmail to pablo.winant@polytechniqe.edu or pwinant@escp.eu\n\nsubject starting with [eco309]\n\nGithub issues (PR also welcome)"
  },
  {
    "objectID": "index.html#assessments",
    "href": "index.html#assessments",
    "title": "Computational Economics - ECO309",
    "section": "Assessments",
    "text": "Assessments\n\ntutorials (optional) + projects (mandatory) (50%)\nfinal exam (50%)"
  },
  {
    "objectID": "slides/time_iteration.html#whats-new-today",
    "href": "slides/time_iteration.html#whats-new-today",
    "title": "Time Iteration",
    "section": "What’s new today?",
    "text": "What’s new today?\n\nA few weeks ago, we did discrete dynamic programming\n\ntoday, we have continuous decision rules\nwe will need to interpolate\n\nWe were using Bellman representation\n\nwe’ll use first order representation (Euler and co.)\n\nWe will see the main time-iteration algorithms\n\nand mention some of its variants"
  },
  {
    "objectID": "slides/time_iteration.html#generic-value-function-representation",
    "href": "slides/time_iteration.html#generic-value-function-representation",
    "title": "Time Iteration",
    "section": "Generic Value Function Representation",
    "text": "Generic Value Function Representation\n\nAll variables of the model are vectors:\n\nstates \\(s \\in \\mathcal{S} \\subset R^{n_s}\\)\ncontrols \\(x \\in \\mathcal{F}(\\mathcal{S}, R^{n_x})\\)\n\nwe assume bounds \\(a(s)\\leq x \\leq b(s)\\)\n\nshocks: \\(\\epsilon \\sim \\text{i.i.d. distrib}\\)\n\nTransition: \\[s_{t+1} = g(s_t, x_t, \\epsilon_{t+1})\\]\nValue function: \\[V(s) = E_0 \\sum_{t\\geq 0} \\beta^t \\left[ U(s_t, x_t)\\right]\\]\nSolution is a function \\(V()\\) (value) which is a fixed point of the Bellman-operator: \\[\\forall s, V(s) = \\max_{a(s)\\leq x \\leq b(s)} U(s,x) + \\beta E \\left[ V(g(s,x,\\epsilon)) \\right]\\]\nThe argmax, defines a decision rule function: \\(x = \\varphi(s)\\)"
  },
  {
    "objectID": "slides/time_iteration.html#first-order-representation",
    "href": "slides/time_iteration.html#first-order-representation",
    "title": "Time Iteration",
    "section": "First order representation",
    "text": "First order representation\n\n\n\nAll variables of the model are vectors:\n\nstates \\(s_t\\)\ncontrols \\(x_t\\)\n\nwe assume bounds \\(a(s)\\leq x \\leq b(s)\\)\n\nshocks: \\(\\epsilon_t\\) (i.i.d. random law)\n\nTransition: \\[s_{t+1} = g(s_t, x_t, \\epsilon_{t+1})\\]\nDecision rule: \\[x_t = \\varphi(s_t)\\]\nArbitrage: \\[ E_t\\left[ f(s_t, x_t, s_{t+1}, x_{t+1}) \\right] = 0 \\perp a(s_t) \\leq x_t \\leq b(s_t) \\]\n\n\n\nThese equations must be true for any \\(s_t\\).\nRemark: time subscript are conventional. They are used to precise:\n\nwhen expectation is taken (w.r.t \\(\\epsilon_{t+1}\\))\nto avoid repeating \\(x_t=\\varphi(s_t)\\) and \\(x_{t+1} = \\varphi(s_t)\\)\n\nSometimes there are bounds on the controls\n\nwe encode them with complementarity constraints\nmore on it later"
  },
  {
    "objectID": "slides/time_iteration.html#example-1-neoclassical-growth-model",
    "href": "slides/time_iteration.html#example-1-neoclassical-growth-model",
    "title": "Time Iteration",
    "section": "Example 1: neoclassical growth model",
    "text": "Example 1: neoclassical growth model\n\n\n\ncapital accumulation: \\[k_t = (1-\\delta)k_{t-1} + i_{t-1}\\]\nproduction: \\[y_t = k_t^\\alpha\\]\nconsumption: \\[c_t = (1-s_t) y_t\\] \\[i_t = s_t y_t\\]\noptimality: \\[\\beta E_t \\left[ \\frac{U^{\\prime}(c_{t+1})}{U^{\\prime}(c_{t})} (1-\\delta + \\alpha k_{t+1}^{\\alpha-1}\\alpha) \\right]= 1\\]\n\n\n\nstates: \\(k_t\\), with one transition equation\ncontrols: \\(y_t, c_t, i_t, s_t\\), with four “arbitrage” equations\n\nit is possible but not mandatory to reduce the number of variables/equations by simple susbtitutions"
  },
  {
    "objectID": "slides/time_iteration.html#example-2-consumption-savings-model",
    "href": "slides/time_iteration.html#example-2-consumption-savings-model",
    "title": "Time Iteration",
    "section": "Example 2: consumption-savings model",
    "text": "Example 2: consumption-savings model\n\n\nSimplest consumption/savings model:\n\nTransition: \\[w_t = \\exp(\\epsilon_t) + (w_{t-1} - c_{t-1}) \\overline{r}\\]\nObjective: \\[\\max_{0\\leq c_t \\leq w_t} E_0 \\left[ \\sum \\beta^t U(c_t) \\right]\\]\nFirst order conditions: \\[\\beta E_t \\left[  \\frac{U^{\\prime}(c_{t+1})}{U^{\\prime}(c_t)} \\overline{r} \\right] - 1 \\perp 0 \\leq c_t \\leq w_t\\]\n\n\n\nF.O.C. reads as: \\[\\beta E_t \\left[  \\frac{U^{\\prime}(c_{t+1})}{U^{\\prime}(c_t)} \\overline{r} \\right] - 1 \\leq 0 \\perp c_t \\leq w_t\\] and \\[0 \\leq \\beta E_t \\left[  \\frac{U^{\\prime}(c_{t+1})}{U^{\\prime}(c_t)} \\overline{r} \\right] - 1  \\perp 0 \\leq c_t \\]\nFirst one reads: if my marginal utility of consumption today is higher than expected mg. utility of cons. tomorrow, I’d like to consume more, but I can’t because, consumption is bounded by income (and no-borrowing constraint).\nSecond one reads: only way I could tolerate higher utility in the present, than in the future, would be if I want dissave more than I can, or equivalently, consume less than zero. This is never happening."
  },
  {
    "objectID": "slides/time_iteration.html#example-3-new-keynesian-with-without-zlb",
    "href": "slides/time_iteration.html#example-3-new-keynesian-with-without-zlb",
    "title": "Time Iteration",
    "section": "Example 3: new-keynesian with / without ZLB",
    "text": "Example 3: new-keynesian with / without ZLB\n\n\nConsider the new keynesian model we have seen in the introduction:\n\nAssume \\(z_t\\) is an autocorrelated shock: \\[z_t = \\rho z_{t-1} + \\epsilon_t\\]\nNew philips curve (PC):\\[\\pi_t = \\beta \\mathbb{E}_t \\pi_{t+1} + \\kappa y_t\\]\ndynamic investment-saving equation (IS):\\[y_t = \\beta \\mathbb{E}_t y_{t+1} - \\frac{1}{\\sigma}(i_t - \\mathbb{E}_t(\\pi_{t+1}) ) - {\\color{green} z_t}\\]\nInterest Rate Setting (taylor rule): \\[i_t = \\alpha_{\\pi} \\pi_t + \\alpha_{y} y_t\\]\n\n\n\nThe model satisfies the same specification with:\n\none state \\(z_t\\) and one transition equation\nthree controls: \\(\\pi_t\\), \\(y_t\\) and \\(i_t\\) with three “arbitrage” equation\n\nThese are not real first order conditions as they are not derived from a maximization program\n\nunless one tries to microfound them…\n\nIt is possible to add a zero-lower bound constraint by replacing IRS with: \\[ \\alpha_{\\pi} \\pi_t + \\alpha_{y} y_t \\leq i_t \\perp 0 \\leq i_t\\]"
  },
  {
    "objectID": "slides/time_iteration.html#time-iteration-1",
    "href": "slides/time_iteration.html#time-iteration-1",
    "title": "Time Iteration",
    "section": "Time iteration",
    "text": "Time iteration\n\nSo we have the equation, \\(\\forall s_t\\)\n\n\\[ E_t\\left[ f(s_t, x_t, s_{t+1}, x_{t+1}) \\right] = 0 \\perp a(s_t) \\leq x_t \\leq b(s_t)\\]\\[ E_t\\left[ f(s_t, x_t, s_{t+1}, x_{t+1}) \\right] = 0\\]\n\nwhere \\[s_{t+1} = g(s_t, x_t, \\epsilon_{t+1})\\] \\[x_t = \\varphi(s_t)\\] \\[x_{t+1} = \\tilde{\\varphi}(s_{t+1})\\]\nLet’s leave the complementarity conditions aside for now\nIn equilibrium \\(\\tilde{\\varphi} = {\\varphi}\\)"
  },
  {
    "objectID": "slides/time_iteration.html#time-iteration-2",
    "href": "slides/time_iteration.html#time-iteration-2",
    "title": "Time Iteration",
    "section": "Time iteration",
    "text": "Time iteration\n\nWe can rewrite everything as one big functional equation: \\[\\forall s, \\Phi(\\varphi, \\tilde{\\varphi})(s) = E\\left[ f(s, \\varphi(s), g(s,\\varphi(s), \\epsilon), \\tilde{\\varphi}(g(s,\\varphi(s), \\epsilon)) \\right]\\]\nA solution is \\(\\varphi\\) such that \\(\\Phi(\\varphi, \\varphi) = 0\\)\nThe Coleman operator \\(\\mathcal{T}\\) is defined implicitly by: \\[\\Phi(\\mathcal{T}(\\varphi), \\varphi)=0\\]\nThe core of the time iteration algorithm, consists in the recursion: \\[\\varphi_{n+1} = \\mathcal{T}(\\varphi_n)\\]\nIt maps future decision rules to current decision rules\n\nsame as “linear time iterations”, remember?\n\nSounds fun but how do we implement it concretely?"
  },
  {
    "objectID": "slides/time_iteration.html#practical-implementation",
    "href": "slides/time_iteration.html#practical-implementation",
    "title": "Time Iteration",
    "section": "Practical implementation",
    "text": "Practical implementation\n\nWe need to find a way to:\n\ncompute expectations\nrepresent decision rules \\(\\varphi\\) and \\(\\varphi\\) with a finite number of parameters"
  },
  {
    "objectID": "slides/time_iteration.html#practical-implementation-2",
    "href": "slides/time_iteration.html#practical-implementation-2",
    "title": "Time Iteration",
    "section": "Practical implementation (2)",
    "text": "Practical implementation (2)\n\nComputing expectations:\n\ndiscretize shock \\(\\epsilon\\) with finite quantization \\((w_i, e_i)_{i=1:K}\\)\nreplace optimality condition with: \\[\\forall s, \\Phi(\\varphi, \\tilde{\\varphi})(s) = \\sum_i w_i f(s, \\varphi(s), g(s,\\varphi(s), e_i), \\tilde{\\varphi}(g(s,\\varphi(s), e_i)) \\]\n\n… but we still can’t compute all the \\(\\varphi\\)"
  },
  {
    "objectID": "slides/time_iteration.html#approximating-decision-rules",
    "href": "slides/time_iteration.html#approximating-decision-rules",
    "title": "Time Iteration",
    "section": "Approximating decision rules",
    "text": "Approximating decision rules\n\nWe’ll limit ourselves to interpolating functional spaces\n\nWe define a finite grid \\(\\mathbf{s}=(s_1, ... s_N)\\) to approximate the state space (\\(\\mathbf{s}\\) is a finite vector of points)\nIf we know the vector of values \\(\\mathbf{x}=(x_1, ..., x_N)\\) a function \\(\\varphi\\) takes on \\(\\mathbf{s}\\), we approximate \\(\\varphi\\) at any \\(s\\) using an interpolation scheme \\(\\mathcal{I}\\): \\[\\varphi(s) \\approx \\mathcal{I}(s, \\mathbf{s}, \\mathbf{x})\\]\n\nNow if we replace \\(\\varphi\\) by \\(\\mathcal{I}(s, \\mathbf{s}, \\mathbf{x})\\) and \\(\\tilde{\\varphi}\\) by \\(\\mathcal{I}(s, \\mathbf{s}, \\mathbf{\\tilde{x}})\\) the functional equation becomes: \\[\\forall s,  \\Phi(\\varphi, \\tilde{\\varphi})(s) \\approx F( \\mathbf{x}, \\mathbf{\\tilde{x}} )(s) = \\sum_i w_i f(s, x, \\tilde{s}, \\tilde{x})\\] where \\[x = \\mathcal{I}(s, \\mathbf{s}, \\mathbf{x})\\] \\[\\tilde{s} = g(s, x, e_i)\\] \\[\\tilde{x} = \\mathcal{I}(s, \\mathbf{s}, \\mathbf{\\tilde{x}})\\]"
  },
  {
    "objectID": "slides/time_iteration.html#pinning-down-decision-rules",
    "href": "slides/time_iteration.html#pinning-down-decision-rules",
    "title": "Time Iteration",
    "section": "Pinning down decision rules",
    "text": "Pinning down decision rules\n\nNote that this equation must be statisfied \\(\\forall s\\).\nIn order to pin-down the \\(N\\) coefficients \\(\\mathbf{x}\\), it is enough to satisfy the equations at \\(N\\) different points.\nHence we solve the square system: \\[\\forall i\\in [1,N], F( \\mathbf{x}, \\mathbf{\\tilde{x}} )(s_i) = 0\\]\nIn vectorized form, this is just: \\[F( \\mathbf{x}, \\mathbf{\\tilde{x}} )(\\mathbf{s}) = 0\\]\nOr, since grid \\(\\mathbf{s}\\) is fixed: \\[F( \\mathbf{x}, \\mathbf{\\tilde{x}} ) = 0\\]\nNow the vector of decisions today, at each point of the grid, is determined as a function of the vector of decisions tomorrow, on the same grid."
  },
  {
    "objectID": "slides/time_iteration.html#recap",
    "href": "slides/time_iteration.html#recap",
    "title": "Time Iteration",
    "section": "Recap",
    "text": "Recap\n\nChoose a finite grid for states \\(\\mathbf{s} = (s_1, ..., s_N)\\)\nFor a given vector of controls tomorrow \\(\\mathbf{\\tilde{x}}\\), one can compute theoptimality of a vector of controls today by computing the value of :\\[F( \\mathbf{x}, \\mathbf{\\tilde{x}} ) = \\sum_i w_i f(\\mathbf{s}, \\mathbf{x}, \\tilde{\\mathbf{s}}, \\tilde{\\mathbf{x}})\\] \\[\\mathbf{\\tilde{s}} = g(\\mathbf{s}, \\mathbf{x}, e_i)\\] \\[\\mathbf{\\tilde{x}} = \\mathcal{I}(\\mathbf{\\tilde{s}}; \\mathbf{s}, \\mathbf{{x}})\\]\nNote that because we use interpolating approximation: \\(\\forall i, x_i = \\mathcal{I}(s, \\mathbf{s}, \\mathbf{x})\\)\nWe have enough to define an approximated time-iteration operator: implicitly defined by \\[F(T(\\mathbf{x}), \\mathbf{x}))\\]\nWe can then implement time-iteration, but…\n\nhow do we compute \\(T(x)\\)?"
  },
  {
    "objectID": "slides/time_iteration.html#computing-tmathbfx",
    "href": "slides/time_iteration.html#computing-tmathbfx",
    "title": "Time Iteration",
    "section": "Computing \\(T(\\mathbf{x})\\)",
    "text": "Computing \\(T(\\mathbf{x})\\)\n\nIn each step, we have a guess, for decision rule tomorrow \\(\\mathbf{\\tilde{x}}\\)\nWe can then find the decision rule today, by solving numerically for: \\(\\mathbf{x} \\mapsto  F(\\mathbf{x}, \\mathbf{\\tilde{x}})\\)\n\nusually with some variant of a Newton method\n\nIt is possible to solve for the values at each grid point separately…\n\nfor each \\(i\\), find optimal controls \\(x_i\\) in state \\(s_i\\) that satisfy \\(F(x_i, \\mathbf{\\tilde{x}}) = 0\\)\nall the problems are independent from each other\n\n…or to solve everything as a big system\n\nthe jacobian is block-diagonal: finding optimal value in state \\(i\\) or in state \\(j\\) today are two independent problems"
  },
  {
    "objectID": "slides/time_iteration.html#time-iteration-algorithm",
    "href": "slides/time_iteration.html#time-iteration-algorithm",
    "title": "Time Iteration",
    "section": "Time iteration algorithm",
    "text": "Time iteration algorithm\n\nDiscretize state-space with grid \\(\\mathbf{s}=(s_1, ..., s_N)\\)\nChoose initial values, for the vector of controls on the grid \\(\\mathbf{x}=(x_1, ..., x_N)\\)\nSpecify tolerance levels \\(\\eta&gt;0\\) and \\(\\epsilon&gt;0\\)\nGiven an intial guess \\(\\mathbf{x_n}\\)\n\nfind the zero \\(\\mathbf{x_{n+1}}\\) of function \\(\\mathbf{u}\\mapsto F(u,\\mathbf{x_n})\\)\n\nthat is, such that controls on the grid are optimal given controls tomorrow\nnonlinear solver can use \\(\\mathbf{x_n}\\) as initial guess\n\ncompute norm \\(\\mathbf{\\eta_n} = |\\mathbf{x_n} - \\mathbf{x_{n+1}}|\\)\nif \\(\\eta_n&lt;\\eta\\), stop and return \\(\\mathbf{x_{n+1}}\\)\n\nelse, set \\(\\mathbf{x_n} \\leftarrow \\mathbf{x_{n+1}}\\) and continue\n\n\nLike usual, during the iterations, it is useful to look at \\(\\mathbf{\\epsilon_n}=|F(\\mathbf{x_n},\\mathbf{x_n})|\\) and \\(\\lambda_n = \\frac{\\eta_n}{\\eta_{n-1}}\\)"
  },
  {
    "objectID": "slides/time_iteration.html#what-about-the-complementarities",
    "href": "slides/time_iteration.html#what-about-the-complementarities",
    "title": "Time Iteration",
    "section": "What about the complementarities ?",
    "text": "What about the complementarities ?\n\nWhen there aren’t any occasionally binding constraint, we look for the of zero \\(\\mathbf{x_{n+1}}\\) of function \\(\\mathbf{u}\\mapsto F(u,\\mathbf{x_n})\\).\nIf we define the vector of constraints on all grid points as \\(\\mathbf{a}=(a(s_1), ..., a(s_N))\\) and \\(\\mathbf{b}=(b(s_1), ..., b(s_N))\\), we can rewrite the system to solve as: \\[F(u) \\perp \\mathbf{a} \\leq u \\leq \\mathbf{b}\\]\nThen we can:\n\nfeed \\(F\\), \\(a\\) and \\(b\\) to an NCP solver (like nlsolve.jl)\nor transform this relation using Fisher-Burmeister function into a smooth nonlinear system"
  },
  {
    "objectID": "slides/time_iteration.html#time-iteration-variants",
    "href": "slides/time_iteration.html#time-iteration-variants",
    "title": "Time Iteration",
    "section": "Time iteration variants",
    "text": "Time iteration variants\n\nYou can check out:\n\nendogenous grid points:\n\nmathematically equivalent to TI,\nmuch faster for models that have a particular structure (consumption saving models)\nno need for a nonlinear solver\n\nimproved time iterations:\n\nsame as policy iterations for value function iterations\nconvergence is equivalent to that of TI\nmuch faster but requires correct initial guess\n\nparameterized expectations\n\nrequires that all controls are determined as a function of expectations"
  },
  {
    "objectID": "slides/optimization copy.html",
    "href": "slides/optimization copy.html",
    "title": "Math topic: Optimization",
    "section": "",
    "text": "Optimization is everywhere in economics:\n\nto model agent’s behaviour: what would a rational agent do?\n\nconsumer maximizes utility from consumption\nfirm maximizes profit\n\nan economist tries to solve a model:\n\nfind prices that clear the market\n\n\n\n\n\n\n\nroot finding: \\(\\text{find  $x$ in $X$ such that $f(x)=0$}\\)\nminimization/maximization \\(\\min_{x\\in X} f(x)\\) or \\(\\max_{x\\in X} f(x)\\)\noften a minimization problem can be reformulated as a root-finding problem\n\\[x_0 = {argmin}_{x\\in X} f(x) \\overbrace{\\iff}^{??} f^{\\prime} (x_0) = 0\\]\n\n\n\n\n\n\ngeneral consideration about optimization problems\none-dimensional root-finding\none-dimensional optimization\nlocal root-finding\nlocal optimization\nconstrained optimization\nconstrained root-finding\n\n\n\n\n\n\n\n\n\n\ncontinuous versus discrete optimization\nconstrained and unconstrained optimization\nglobal and local\nstochastic and deterministic optimization\nconvexity\n\n\n\n\n\n\nChoice is picked from a given set (\\(x\\in X\\)) which can be:\n\ncontinuous: choose amount of debt \\(b_t \\in [0,\\overline{b}]\\), of capital \\(k_t \\in R^{+}\\)\ndiscrete: choose whether to repay or default \\(\\delta\\in{0,1}\\), how many machines to buy (\\(\\in N\\)), at which age to retire…\na combination of both: mixed integer programming\n\n\n\n\n\n\n\nDiscrete optimization requires a lot of combinatorial thinking. We don’t cover it.\nSometimes a discrete choice can be approximated by a mixed strategy (i.e. a random strategy).\n\nInstead of \\(\\delta\\in{0,1}\\) we choose \\(x\\) in \\(prob(\\delta=1)=\\sigma(x)\\)\nwith \\(\\sigma(x)=\\frac{2}{1+\\exp(-x)}\\)\n\n\n\n\n\n\n\nUnconstrained optimization: \\(x\\in R\\)\nConstrained optimization: \\(x\\in X\\)\n\nbudget set: \\(p_1 c_1 + p_2 c_2 \\leq I\\)\npositivity of consumption: \\(c \\geq 0\\).\n\nIn good cases, the optimization set is convex…\n\npretty much always in this course\n\n\n\n\n\n\n\nCommon case, especially in machine learning \\[f(x) = E_{\\epsilon}[ \\xi (\\epsilon, x)]\\]\nOne wants to maximize (resp solve) w.r.t. \\(x\\) but it is costly to compute expectation precisely using Monte-Carlo draws (there are other methods).\nA stochastic optimization method allows to use noisy estimates of the expectation, and will still converge in expectation.\nFor now we focus on deterministic methods. Maybe later…\n\n\n\n\n\n\nIn principle, there can be many roots (resp maxima) within the optimization set.\nAlorithma that find them all are called “global”. For instance:\n\ngrid search\nsimulated annealing\n\nWe will deal only with local algorithms, and consider local convergence properties.\n\n-&gt;then it might work or not\nto perform global optimization just restart from different points.\n\n\n\n\n\n\n\nThe full mathematical treatment will typically assume that \\(f\\) is smooth (\\(\\mathcal{C}_1\\) or \\(\\mathcal{C}_2\\) depending on the algorithm).\nIn practice we often don’t know about these properties\n\nwe still try and check we have a local optimal\n\nSo: fingers crossed\n\n\n\n\n\nHere is the surface representing the objective that a deep neural network training algorithm tries to minimize.\n\nAnd yet, neural networks do great things!\n\n\n\n\n\nbe able to handcode simple algos (Newton, Gradient Descent)\nunderstand the general principle of the various algorithms to compare them in terms of\n\nrobustness\nefficiency\naccuracy\n\nthen you can just switch the various options, when you use a library…\n\n\n\n\n\n\n\n\n\n\nFind \\(x \\in [a,b]\\) such that \\(f(x) = 0\\). Assume \\(f(a)f(b) &lt;0\\).\nAlgorithm\n\nStart with \\(a_n, b_n\\). Set \\(c_n=(a_n+b_n)/2\\)\nCompute \\(f(c_n)\\)\n\n\nif \\(f(c_n)f(a_n)&gt;0\\) then set \\((a_{n+1},b_{n+1})=(a_n,c_n)\\)\nelse set \\((a_{n+1},b_{n+1})=(c_n,b_n)\\)\n\n\nIf \\(f(c_n)&lt;\\epsilon\\) and/or \\(\\frac{b-a}/2^n&lt;\\delta\\) stop. Otherwise go back to 1.\n\n\n\n\n\n\n\nNo need for initial guess: globally convergent algorithm\n\nnot a global algorithm…\n… in the sense that it doesn’t find all solutions\n\n\\(\\delta\\) is a guaranteed accuracy on \\(x\\)\n\\(\\epsilon\\) is a measure of how good the solution is\nthink about your tradeoff: (\\(\\delta\\) or \\(\\epsilon\\) ?)\n\n\n\n\n\n\n\nFind \\(x\\) such that \\(f(x) = 0\\). Use \\(x_0\\) as initial guess.\n\\(f\\) must be \\(\\mathcal{C_1}\\) and we assume we can compute its derivative \\(f^{\\prime}\\)\nGeneral idea:\n\nobserve that the zero \\(x^{\\star}\\) must satisfy \\[f(x^{\\star})=0=f(x_0)+f^{\\prime}(x_0)(x^{\\star}-x_0) + o(x-x_0)\\]\nHence a good approximation should be \\[x^{\\star}\\approx = x_0- f(x_0)/f^{\\prime}(x_0)\\]\n\n\n\n\n\n\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n- \\frac{f(x_n}{f^{\\prime}(x_n)}=f^{\\text{newton}}(x_n)\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic\n\n\n\n\n\n\n\nWhat if we can’t compute \\(f^{\\prime}\\) or it is expensive to do so?\n\nIdea: try to approximate \\(f^{\\prime}(x_n)\\) from the last iterates\n\nsecant method: \\(f^{\\prime}(x_n)\\approx \\frac{f(x_n)-f(x_{n-1})}{x_n-x_{n-1}}\\) \\(x_{n+1} = x_n- f(x_n)\\frac{x_n-x_{n-1}}{f(x_n)-f(x_{n-1})}\\)\n\nrequires two initial guesses: \\(x_1\\) and \\(x_0\\)\nsuperlinear convergence: \\(\\lim \\frac{x_t-x^{\\star}}{x_{t-1}-x^{\\star}}\\rightarrow 0\\)\n\n\n\n\n\n\n\nHow could Newton method fail?\n\nbad guess\n\n-&gt; start with a better guess\n\novershoot\n\n-&gt; dampen the update (problem: much slower)\n-&gt; backtrack\n\nstationary point\n\n-&gt; if root of multiplicity \\(m\\) try \\(x_{n+1} = x_n- m f(x_n)/f^{\\prime}(x_n)\\) (FIX)\n\n\n\n\n\n\n\n\nSimple idea:\n\nat stage \\(n\\) given \\(f(x_n)\\) compute Newton step \\(\\Delta_n=-\\frac{f(x_n)}{f^{\\prime}(x_n)}\\)\nfind the smallest \\(k\\) such that \\(|f(x_n-\\Delta/2^k)|&lt;|f(x_n)|\\)\nset \\(x_{n+1}=x_n-\\Delta/2^k\\)\n\n\n\n\n\n\n\n\n\n\n\nMinimize \\(f(x)\\) for \\(x \\in [a,b]\\)\nChoose \\(\\Phi \\in [0,0.5]\\)\nAlgorithm:\n\nstart with \\(a_n &lt; b_n\\) (initially equal to \\(a\\) and \\(b\\))\ndefine \\(c_n = a_n+\\Phi(b_n-a_n)\\) and \\(d_n = a_n+(1-\\Phi)(b_n-a_n)\\)\n\nif \\(f(c_n)&lt;f(d_n)\\) set \\(a_{n+1},b_{n+1}=a_n, d_n\\)\nelse set \\(a_{n+1}, b_{n+1}= c_n, b_n\\)\n\n\n\n\n\n\n\n\nThis is guaranteed to converge to a local minimum\nIn each step, the size of the interval is reduced by a factor \\(\\Phi\\)\nBy choosing \\(\\Phi=\\frac{\\sqrt{5}-1}{2}\\) one can save one evaluation by iteration.\nRemark that bisection is not enough\n\n\n\n\n\n\n\nMinimize \\(f(x)\\) for \\(x \\in R\\) given initial guess \\(x_0\\)\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n (1-\\lambda)- \\lambda f^{\\prime}(x_n)\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f^{\\prime}(x_n)| &lt; \\epsilon\\)\n\n\n\n\n\n\n\nUses local information\n\none needs to compute the gradient\nnote that gradient at \\(x_n\\) does not provide a better guess for the minimum than \\(x_n\\) itself\nlearning speed is crucial\n\nConvergence speed: linear\n\nrate depend on the learning speed\noptimal learning speed? the fastest for which there is convergence\n\n\n\n\n\n\n\nMinimize \\(f(x)\\) for \\(x \\in R\\) given initial guess \\(x_0\\)\nBuild a local model of \\(f\\) around \\(x_0\\) \\[f(x) = f(x_0) + f^{\\prime}(x_0)(x-x_0) + f^{\\prime\\prime}(x_0)\\frac{(x-x_0)^2}{2} + o(x-x_0)^2\\]\nAccording to this model, \\[ f(x{\\star}) = min_x f(x)\\iff \\frac{d}{d x} \\left[ f(x_0) + f^{\\prime}(x_0)(x-x_0) + f^{\\prime\\prime}(x_0)\\frac{(x-x_0)^2}{2} \\right] = 0\\] which yields: \\(x^{\\star} = x_0 - \\frac{f^{\\prime}(x_0)}{f^{\\prime\\prime}(x_0)}\\)\nthis is Newton applied to \\(f^{\\prime}(x)=0\\)\n\n\n\n\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n-\\frac{f^{\\prime}(x_0)}{f^{\\prime\\prime}(x_0)}\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f^{\\prime}(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic\n\n\n\n\n\n\n\n\n\n\n\nMinimize \\(f(x)\\) for \\(x \\in R^n\\) given initial guess \\(x_0 \\in R^n\\)\nMany intuitions from the 1d case, still apply\n\nreplace derivatives by gradient, jacobian and hessian\nrecall that matrix multiplication is not commutative\n\nSome specific problems:\n\nupdate speed can be specific to each dimension\nsaddle-point issues (for minimization)\n\n\n\n\n\n\nFunction \\(f: R^p \\rightarrow R^q\\)\n\nJacobian: \\(J(x)\\) or \\(f^{\\prime}\\_x(x)\\), \\(p\\times q\\) matrix such that: \\[J(x)\\_{ij} = \\frac{\\partial f(x)\\_i}{\\partial x_j}\\]\nGradient: \\(\\nabla J(x)\\), gradient when \\(q=1\\)\nHessian: denoted by \\(H(x)\\) or \\(f^{\\prime\\prime}\\_{xx}(x)\\) when \\(q=1\\): \\[H(x)\\_{jk} = \\frac{\\partial f(x)}{\\partial x_j\\partial x_k}\\]\nIn the following explanations, \\(|x|\\) denotes the supremum norm, but most of the following explanations also work with other norms.\n\n\n\n\n\n\n\n\n\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n- J(x_{n})^{-1}f(x_n)=f^{\\text{newton}}(x_n)\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic\n\n\n\n\n\n\nwhat matters is the computation of the step \\(\\Delta_n = {\\color{\\red}{J(x_{n})^{-1}}} f(x_n)\\)\ndon’t compute \\(J(x_n)^{-1}\\)\n\nit takes less operations to compute \\(X\\) in \\(AX=Y\\) than \\(A^{-1}\\) then \\(A^{-1}Y\\)\n\nstrategies to improve convergence:\n\ndampening: \\(x_n = (1-\\lambda)x^{n-1} - \\lambda \\Delta_n\\)\nbacktracking: choose \\(k\\) such that \\(|f(x_n-2^{-k}\\Delta_n)|\\)&lt;\\(|f(x_{n-1})|\\)\nlinesearch: choose \\(\\lambda\\in[0,1]\\) so that \\(|f(x_n-\\lambda\\Delta_n)|\\) is minimal\n\n\n\n\n\n\n\n\n\n\n\nMinimize \\(f(x) \\in R\\) for \\(x \\in R^n\\) given \\(x_0 \\in R^n\\)\nAlgorithm\n\nstart with \\(x_n\\) \\[x_{n+1} = (1-\\lambda) x_n - \\lambda \\nabla f(x_n)\\]\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nComments:\n\nlots of variants\nautomatic differentiation software makes gradient easy to compute\nconvergence is typically linear\n\n\n\n\n\n\n\n\n\n\n\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n-{\\color{\\red}{H(x_{n})^{-1}}}\\color{\\green}{ J(x_n)'}\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic\nProblem:\n\n\\(H(x_{n})\\) hard to compute efficiently\nrather unstable\n\n\n\n\n\n\n\nRecall the secant method:\n\n\\(f(x_{n-1})\\) and \\(f(x_{n-2})\\) are used to approximate \\(f^{\\prime}(x_{n-2})\\).\nIntuitively, \\(n\\) iterates would be needed to approximate a hessian of size \\(n\\)….\n\nBroyden method: takes \\(2 n\\) steps to solve a linear problem of size \\(n\\)\n\nuses past information incrementally\n\n\n\n\n\n\n\nConsider the approximation: \\[f(x_n)-f(x_{n-1}) \\approx J(x_n) (x_n - x_{n-1})\\]\n\n\\(J(x_n)\\) is unknown and cannot be determined directly as in the secant method.\nidea: \\(J(x_n)\\) as close as possible to \\(J(x_{n-1})\\) while solving the secant equation\nformula: \\[J_n = J_{n-1} + \\frac{(f(x_n)-f(x_{n-1})) - J_{n-1}(x_n-x_{n-1})}{||x_n-x_{n-1}||^2}(x_n-x_{n-1})^{\\prime}\\]\n\n\n\n\n\n\n\nRestrict to least-square minimization: $min_x _i f(x)_i^2 R $\nThen up to first order, \\(H(x_n)\\approx J(x_n)^{\\prime}J(x_n)\\)\nUse the step: \\(({J(x_n)^{\\prime}J(x_n)})^{-1}\\color{\\green}{ J(x_n)}\\)\nConvergence:\n\ncan be quadratic at best\nlinear in general\n\n\n\n\n\n\n\nLeast-square minimization: $min_x _i f(x)_i^2 R $\nreplace \\({J(x_n)^{\\prime}J(x_n)}^{-1}\\) by \\({J(x_n)^{\\prime}J(x_n)}^{-1} +\\mu I\\)\n\nadjust \\(\\lambda\\) depending on progress\n\nuses only gradient information like Gauss-Newton\nequivalent to Gauss-Newton close to the solution (\\(\\mu\\) small)\nequivalent to Gradient far from solution (\\(\\mu\\) high)\n\n\n\n\n\n\n\n\n\nConsider the optimization problem: \\[\\max U(x_1, x_2)\\]\nunder the constraint \\(p_1 x_1 + p_2 x_2 \\leq B\\)\nwhere \\(U(.)\\), \\(p_1\\), \\(p_2\\) and \\(B\\) are given.\nHow do you find a solution by hand?\n\n\n\n\n\nCompute by hand\nEasy:\n\nsince the budget constraint must be binding, get rid of it by stating \\(x_2 = B - p_1 x_1\\)\nthen maximize in \\(x_1\\), \\(U(x_1, B - p_1 x_1)\\) using the first order conditions.\n\nIt works but:\n\nbreaks symmetry between the two goods\nwhat if there are other constraints: \\(x_1\\geq \\underline{x}\\)?\nwhat if constraints are not binding?\nis there a better way to solve this problem?\n\n\n\n\n\n\n\nAnother method, which keeps the symmetry. Constraint is binding, trying to minimize along the budget line yields an implicit relation between \\(d x_1\\) and \\(d x_2\\) \\[p_1 d {x_1} + p_2 d {x_2} = 0\\]\nAt the optimal: \\(U^{\\prime}\\_{x_1}(x_1, x_2)d {x_1} + U^{\\prime}\\_{x_2}(x_1, x_2)d {x_2} = 0\\)\nEliminate \\(d {x_1}\\) and \\(d {x_2}\\) to get one condition which characterizes optimal choices for all possible budgets. Combine with the budget constraint to get a second condition.\n\n\n\n\n\n\nTake a penalty function \\(p(x)\\) such that \\(p(x)=K&gt;0\\) if \\(x&gt;0\\) and \\(p(x)=0\\) if \\(x \\leq 0\\). Maximize: \\(V(x_1, x_2) = U(x_1, x_2) - p( p_1 x_1 + p_2 x_2 - B)\\)\nClearly, \\(\\min U \\iff \\min V\\)\nProblem: \\(\\nabla V\\) is always equal to \\(\\nabla U\\).\nSolution: use a smooth solution function like \\(p(x) = x^2\\)\nProblem: distorts optimization\n\nSolution: adjust weight of barrier and minimize \\(U(x_1, x_2) - \\kappa p(x)\\)\n\nPossible but hard to choose the weights/constraints.\n\n\n\n\n\n\nAnother idea: is there a canonical way to choose \\(\\lambda\\) such that at the minimum it is equivalent to minimize the original problem under constraint or to minimize \\[V(x_1, x_2) = U(x_1, x_2) - \\lambda (p_1 x_1 + p_2 x_2 - B)\\]\nClearly, when the constraint is not binding we must have \\(\\lambda=0\\). What should be the value of \\(\\lambda\\) when the constraint is binding ?\n\n\n\n\n\n\nIf \\((x^{\\star},y^{\\star})\\) is optimal there exists \\(\\lambda\\) such that:\n\n\\((x^{\\star},y^{\\star})\\) maximizes \\(U(x_1, x_2) + \\lambda (B- p_1 x_1 - p_2 x_2)\\)\n\\(\\lambda \\geq 0\\)\n\\(B- p_1 x_1 - p_2 x_2 \\geq 0\\)\n\\(\\lambda  (B - p_1 x_1 - p_2 x_2 ) = 0\\)\n\nThe three latest conditions are called “complementarity” or “slackness” conditions\n\nthey are equivalent to \\(\\min(\\lambda, B - p_1 x_1 - p_2 x_2)=0\\)\nwe denote \\(\\lambda \\geq 0 \\perp B- p_1 x_1 + p_2 x_2  \\geq 0\\)\n\n\\(\\lambda\\) can be interpreted as the welfare gain of relaxing the constraint.\n\n\n\n\n\n\nWe can get first order conditions that factor in the constraints:\n\n\\(U^{\\prime}_x - \\lambda p_1 = 0\\)\n\\(U^{\\prime}_y - \\lambda p_2 = 0\\)\n\\(\\lambda \\geq 0 \\perp B-p_1 x_1 -p_2 x_2 \\geq 0\\)\n\nIt is now a nonlinear system of equations with complementarities (NCP)\n\nthere are specific solution methods to deal with it\n\n\n\n\n\n\n\nGeneral formulation for vector-valued functions \\[f(x)\\geq 0 \\perp g(x)\\geq 0\\] means \\[\\forall i, f_i(x)\\geq 0 \\perp g_i(x)\\geq 0\\]\n\nNCP do not necessarily arise from a single optimization problem\n\nThere are robust (commercial) solvers for NCP problems (PATH, Knitro) for that\nHow do we solve it numerically?\n\nassume constraint is binding then non-binding then check which one is good\n\nOK if not too many constraints\n\nreformulate it as a smooth problem\napproximate the system by a series of linear complementarities problems (LCP)\n\n\n\n\n\n\n\n\nConsider the Fisher-Burmeister function \\[\\phi(a,b) = a+b-\\sqrt{a^2+b^2}\\]\nIt is infinitely differentiable, except at \\((0,0)\\)\nShow that \\(\\phi(a,b) = 0 \\iff \\min(a,b)=0 \\iff a\\geq 0 \\perp b \\geq 0\\)\nAfter substitution in the original system one can use regular non-linear solver\n\nfun fact: the formulation with a \\(\\min\\) is nonsmooth but also works quite often\n\n\n\n\n\n\n\n\n\n\nRobust optimization code is contained in the following libraries:\n\nRoots.jl: one-dimensional root finding\nNLSolve.jl: multidimensional root finding (+complementarities)\nOptim.jl: minimization\n\nThe two latter libraries have a somewhat peculiar API, but it’s worth absorbing it.\n\nin particular they provide non-alocating algorithms for functions that modify arguments in place\nthey are compatible with automatic differentiation\n\n\njulia&gt; f(x) = [x[1] - x[2] - 1, x[1] + x[2]]\nf (generic function with 1 method)\n\njulia&gt; NLsolve.nlsolve(f, [0., 0.0])\nResults of Nonlinear Solver Algorithm\n * Algorithm: Trust-region with dogleg and autoscaling\n * Starting Point: [0.0, 0.0]\n * Zero: [0.5000000000009869, -0.5000000000009869]\n * Inf-norm of residuals: 0.000000       \n * Iterations: 1                       \n * Convergence: true\n   * |x - x'| &lt; 0.0e+00: false\n   * |f(x)| &lt; 1.0e-08: true                           \n * Function Calls (f): 2\n * Jacobian Calls (df/dx): 2"
  },
  {
    "objectID": "slides/optimization copy.html#introduction",
    "href": "slides/optimization copy.html#introduction",
    "title": "Math topic: Optimization",
    "section": "",
    "text": "Optimization is everywhere in economics:\n\nto model agent’s behaviour: what would a rational agent do?\n\nconsumer maximizes utility from consumption\nfirm maximizes profit\n\nan economist tries to solve a model:\n\nfind prices that clear the market\n\n\n\n\n\n\n\nroot finding: \\(\\text{find  $x$ in $X$ such that $f(x)=0$}\\)\nminimization/maximization \\(\\min_{x\\in X} f(x)\\) or \\(\\max_{x\\in X} f(x)\\)\noften a minimization problem can be reformulated as a root-finding problem\n\\[x_0 = {argmin}_{x\\in X} f(x) \\overbrace{\\iff}^{??} f^{\\prime} (x_0) = 0\\]\n\n\n\n\n\n\ngeneral consideration about optimization problems\none-dimensional root-finding\none-dimensional optimization\nlocal root-finding\nlocal optimization\nconstrained optimization\nconstrained root-finding"
  },
  {
    "objectID": "slides/optimization copy.html#general-considerations",
    "href": "slides/optimization copy.html#general-considerations",
    "title": "Math topic: Optimization",
    "section": "",
    "text": "continuous versus discrete optimization\nconstrained and unconstrained optimization\nglobal and local\nstochastic and deterministic optimization\nconvexity\n\n\n\n\n\n\nChoice is picked from a given set (\\(x\\in X\\)) which can be:\n\ncontinuous: choose amount of debt \\(b_t \\in [0,\\overline{b}]\\), of capital \\(k_t \\in R^{+}\\)\ndiscrete: choose whether to repay or default \\(\\delta\\in{0,1}\\), how many machines to buy (\\(\\in N\\)), at which age to retire…\na combination of both: mixed integer programming\n\n\n\n\n\n\n\nDiscrete optimization requires a lot of combinatorial thinking. We don’t cover it.\nSometimes a discrete choice can be approximated by a mixed strategy (i.e. a random strategy).\n\nInstead of \\(\\delta\\in{0,1}\\) we choose \\(x\\) in \\(prob(\\delta=1)=\\sigma(x)\\)\nwith \\(\\sigma(x)=\\frac{2}{1+\\exp(-x)}\\)\n\n\n\n\n\n\n\nUnconstrained optimization: \\(x\\in R\\)\nConstrained optimization: \\(x\\in X\\)\n\nbudget set: \\(p_1 c_1 + p_2 c_2 \\leq I\\)\npositivity of consumption: \\(c \\geq 0\\).\n\nIn good cases, the optimization set is convex…\n\npretty much always in this course\n\n\n\n\n\n\n\nCommon case, especially in machine learning \\[f(x) = E_{\\epsilon}[ \\xi (\\epsilon, x)]\\]\nOne wants to maximize (resp solve) w.r.t. \\(x\\) but it is costly to compute expectation precisely using Monte-Carlo draws (there are other methods).\nA stochastic optimization method allows to use noisy estimates of the expectation, and will still converge in expectation.\nFor now we focus on deterministic methods. Maybe later…\n\n\n\n\n\n\nIn principle, there can be many roots (resp maxima) within the optimization set.\nAlorithma that find them all are called “global”. For instance:\n\ngrid search\nsimulated annealing\n\nWe will deal only with local algorithms, and consider local convergence properties.\n\n-&gt;then it might work or not\nto perform global optimization just restart from different points.\n\n\n\n\n\n\n\nThe full mathematical treatment will typically assume that \\(f\\) is smooth (\\(\\mathcal{C}_1\\) or \\(\\mathcal{C}_2\\) depending on the algorithm).\nIn practice we often don’t know about these properties\n\nwe still try and check we have a local optimal\n\nSo: fingers crossed\n\n\n\n\n\nHere is the surface representing the objective that a deep neural network training algorithm tries to minimize.\n\nAnd yet, neural networks do great things!\n\n\n\n\n\nbe able to handcode simple algos (Newton, Gradient Descent)\nunderstand the general principle of the various algorithms to compare them in terms of\n\nrobustness\nefficiency\naccuracy\n\nthen you can just switch the various options, when you use a library…"
  },
  {
    "objectID": "slides/optimization copy.html#one-dimensional-root-finding",
    "href": "slides/optimization copy.html#one-dimensional-root-finding",
    "title": "Math topic: Optimization",
    "section": "",
    "text": "Find \\(x \\in [a,b]\\) such that \\(f(x) = 0\\). Assume \\(f(a)f(b) &lt;0\\).\nAlgorithm\n\nStart with \\(a_n, b_n\\). Set \\(c_n=(a_n+b_n)/2\\)\nCompute \\(f(c_n)\\)\n\n\nif \\(f(c_n)f(a_n)&gt;0\\) then set \\((a_{n+1},b_{n+1})=(a_n,c_n)\\)\nelse set \\((a_{n+1},b_{n+1})=(c_n,b_n)\\)\n\n\nIf \\(f(c_n)&lt;\\epsilon\\) and/or \\(\\frac{b-a}/2^n&lt;\\delta\\) stop. Otherwise go back to 1.\n\n\n\n\n\n\n\nNo need for initial guess: globally convergent algorithm\n\nnot a global algorithm…\n… in the sense that it doesn’t find all solutions\n\n\\(\\delta\\) is a guaranteed accuracy on \\(x\\)\n\\(\\epsilon\\) is a measure of how good the solution is\nthink about your tradeoff: (\\(\\delta\\) or \\(\\epsilon\\) ?)\n\n\n\n\n\n\n\nFind \\(x\\) such that \\(f(x) = 0\\). Use \\(x_0\\) as initial guess.\n\\(f\\) must be \\(\\mathcal{C_1}\\) and we assume we can compute its derivative \\(f^{\\prime}\\)\nGeneral idea:\n\nobserve that the zero \\(x^{\\star}\\) must satisfy \\[f(x^{\\star})=0=f(x_0)+f^{\\prime}(x_0)(x^{\\star}-x_0) + o(x-x_0)\\]\nHence a good approximation should be \\[x^{\\star}\\approx = x_0- f(x_0)/f^{\\prime}(x_0)\\]\n\n\n\n\n\n\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n- \\frac{f(x_n}{f^{\\prime}(x_n)}=f^{\\text{newton}}(x_n)\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic\n\n\n\n\n\n\n\nWhat if we can’t compute \\(f^{\\prime}\\) or it is expensive to do so?\n\nIdea: try to approximate \\(f^{\\prime}(x_n)\\) from the last iterates\n\nsecant method: \\(f^{\\prime}(x_n)\\approx \\frac{f(x_n)-f(x_{n-1})}{x_n-x_{n-1}}\\) \\(x_{n+1} = x_n- f(x_n)\\frac{x_n-x_{n-1}}{f(x_n)-f(x_{n-1})}\\)\n\nrequires two initial guesses: \\(x_1\\) and \\(x_0\\)\nsuperlinear convergence: \\(\\lim \\frac{x_t-x^{\\star}}{x_{t-1}-x^{\\star}}\\rightarrow 0\\)\n\n\n\n\n\n\n\nHow could Newton method fail?\n\nbad guess\n\n-&gt; start with a better guess\n\novershoot\n\n-&gt; dampen the update (problem: much slower)\n-&gt; backtrack\n\nstationary point\n\n-&gt; if root of multiplicity \\(m\\) try \\(x_{n+1} = x_n- m f(x_n)/f^{\\prime}(x_n)\\) (FIX)\n\n\n\n\n\n\n\n\nSimple idea:\n\nat stage \\(n\\) given \\(f(x_n)\\) compute Newton step \\(\\Delta_n=-\\frac{f(x_n)}{f^{\\prime}(x_n)}\\)\nfind the smallest \\(k\\) such that \\(|f(x_n-\\Delta/2^k)|&lt;|f(x_n)|\\)\nset \\(x_{n+1}=x_n-\\Delta/2^k\\)"
  },
  {
    "objectID": "slides/optimization copy.html#one-dimensional-minimization",
    "href": "slides/optimization copy.html#one-dimensional-minimization",
    "title": "Math topic: Optimization",
    "section": "",
    "text": "Minimize \\(f(x)\\) for \\(x \\in [a,b]\\)\nChoose \\(\\Phi \\in [0,0.5]\\)\nAlgorithm:\n\nstart with \\(a_n &lt; b_n\\) (initially equal to \\(a\\) and \\(b\\))\ndefine \\(c_n = a_n+\\Phi(b_n-a_n)\\) and \\(d_n = a_n+(1-\\Phi)(b_n-a_n)\\)\n\nif \\(f(c_n)&lt;f(d_n)\\) set \\(a_{n+1},b_{n+1}=a_n, d_n\\)\nelse set \\(a_{n+1}, b_{n+1}= c_n, b_n\\)\n\n\n\n\n\n\n\n\nThis is guaranteed to converge to a local minimum\nIn each step, the size of the interval is reduced by a factor \\(\\Phi\\)\nBy choosing \\(\\Phi=\\frac{\\sqrt{5}-1}{2}\\) one can save one evaluation by iteration.\nRemark that bisection is not enough"
  },
  {
    "objectID": "slides/optimization copy.html#gradient-descent",
    "href": "slides/optimization copy.html#gradient-descent",
    "title": "Math topic: Optimization",
    "section": "",
    "text": "Minimize \\(f(x)\\) for \\(x \\in R\\) given initial guess \\(x_0\\)\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n (1-\\lambda)- \\lambda f^{\\prime}(x_n)\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f^{\\prime}(x_n)| &lt; \\epsilon\\)"
  },
  {
    "objectID": "slides/optimization copy.html#gradient-descent-2",
    "href": "slides/optimization copy.html#gradient-descent-2",
    "title": "Math topic: Optimization",
    "section": "",
    "text": "Uses local information\n\none needs to compute the gradient\nnote that gradient at \\(x_n\\) does not provide a better guess for the minimum than \\(x_n\\) itself\nlearning speed is crucial\n\nConvergence speed: linear\n\nrate depend on the learning speed\noptimal learning speed? the fastest for which there is convergence"
  },
  {
    "objectID": "slides/optimization copy.html#newton-raphson-method",
    "href": "slides/optimization copy.html#newton-raphson-method",
    "title": "Math topic: Optimization",
    "section": "",
    "text": "Minimize \\(f(x)\\) for \\(x \\in R\\) given initial guess \\(x_0\\)\nBuild a local model of \\(f\\) around \\(x_0\\) \\[f(x) = f(x_0) + f^{\\prime}(x_0)(x-x_0) + f^{\\prime\\prime}(x_0)\\frac{(x-x_0)^2}{2} + o(x-x_0)^2\\]\nAccording to this model, \\[ f(x{\\star}) = min_x f(x)\\iff \\frac{d}{d x} \\left[ f(x_0) + f^{\\prime}(x_0)(x-x_0) + f^{\\prime\\prime}(x_0)\\frac{(x-x_0)^2}{2} \\right] = 0\\] which yields: \\(x^{\\star} = x_0 - \\frac{f^{\\prime}(x_0)}{f^{\\prime\\prime}(x_0)}\\)\nthis is Newton applied to \\(f^{\\prime}(x)=0\\)\n\n\n\n\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n-\\frac{f^{\\prime}(x_0)}{f^{\\prime\\prime}(x_0)}\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f^{\\prime}(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic"
  },
  {
    "objectID": "slides/optimization copy.html#unconstrained-multidimensional-optimization",
    "href": "slides/optimization copy.html#unconstrained-multidimensional-optimization",
    "title": "Math topic: Optimization",
    "section": "",
    "text": "Minimize \\(f(x)\\) for \\(x \\in R^n\\) given initial guess \\(x_0 \\in R^n\\)\nMany intuitions from the 1d case, still apply\n\nreplace derivatives by gradient, jacobian and hessian\nrecall that matrix multiplication is not commutative\n\nSome specific problems:\n\nupdate speed can be specific to each dimension\nsaddle-point issues (for minimization)\n\n\n\n\n\n\nFunction \\(f: R^p \\rightarrow R^q\\)\n\nJacobian: \\(J(x)\\) or \\(f^{\\prime}\\_x(x)\\), \\(p\\times q\\) matrix such that: \\[J(x)\\_{ij} = \\frac{\\partial f(x)\\_i}{\\partial x_j}\\]\nGradient: \\(\\nabla J(x)\\), gradient when \\(q=1\\)\nHessian: denoted by \\(H(x)\\) or \\(f^{\\prime\\prime}\\_{xx}(x)\\) when \\(q=1\\): \\[H(x)\\_{jk} = \\frac{\\partial f(x)}{\\partial x_j\\partial x_k}\\]\nIn the following explanations, \\(|x|\\) denotes the supremum norm, but most of the following explanations also work with other norms."
  },
  {
    "objectID": "slides/optimization copy.html#unconstrained-multidimensional-root-finding",
    "href": "slides/optimization copy.html#unconstrained-multidimensional-root-finding",
    "title": "Math topic: Optimization",
    "section": "",
    "text": "Algorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n- J(x_{n})^{-1}f(x_n)=f^{\\text{newton}}(x_n)\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic\n\n\n\n\n\n\nwhat matters is the computation of the step \\(\\Delta_n = {\\color{\\red}{J(x_{n})^{-1}}} f(x_n)\\)\ndon’t compute \\(J(x_n)^{-1}\\)\n\nit takes less operations to compute \\(X\\) in \\(AX=Y\\) than \\(A^{-1}\\) then \\(A^{-1}Y\\)\n\nstrategies to improve convergence:\n\ndampening: \\(x_n = (1-\\lambda)x^{n-1} - \\lambda \\Delta_n\\)\nbacktracking: choose \\(k\\) such that \\(|f(x_n-2^{-k}\\Delta_n)|\\)&lt;\\(|f(x_{n-1})|\\)\nlinesearch: choose \\(\\lambda\\in[0,1]\\) so that \\(|f(x_n-\\lambda\\Delta_n)|\\) is minimal"
  },
  {
    "objectID": "slides/optimization copy.html#unconstrained-multidimensional-minimization",
    "href": "slides/optimization copy.html#unconstrained-multidimensional-minimization",
    "title": "Math topic: Optimization",
    "section": "",
    "text": "Minimize \\(f(x) \\in R\\) for \\(x \\in R^n\\) given \\(x_0 \\in R^n\\)\nAlgorithm\n\nstart with \\(x_n\\) \\[x_{n+1} = (1-\\lambda) x_n - \\lambda \\nabla f(x_n)\\]\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nComments:\n\nlots of variants\nautomatic differentiation software makes gradient easy to compute\nconvergence is typically linear\n\n\n\n\n\n\n\n\n\n\n\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n-{\\color{\\red}{H(x_{n})^{-1}}}\\color{\\green}{ J(x_n)'}\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic\nProblem:\n\n\\(H(x_{n})\\) hard to compute efficiently\nrather unstable\n\n\n\n\n\n\n\nRecall the secant method:\n\n\\(f(x_{n-1})\\) and \\(f(x_{n-2})\\) are used to approximate \\(f^{\\prime}(x_{n-2})\\).\nIntuitively, \\(n\\) iterates would be needed to approximate a hessian of size \\(n\\)….\n\nBroyden method: takes \\(2 n\\) steps to solve a linear problem of size \\(n\\)\n\nuses past information incrementally\n\n\n\n\n\n\n\nConsider the approximation: \\[f(x_n)-f(x_{n-1}) \\approx J(x_n) (x_n - x_{n-1})\\]\n\n\\(J(x_n)\\) is unknown and cannot be determined directly as in the secant method.\nidea: \\(J(x_n)\\) as close as possible to \\(J(x_{n-1})\\) while solving the secant equation\nformula: \\[J_n = J_{n-1} + \\frac{(f(x_n)-f(x_{n-1})) - J_{n-1}(x_n-x_{n-1})}{||x_n-x_{n-1}||^2}(x_n-x_{n-1})^{\\prime}\\]\n\n\n\n\n\n\n\nRestrict to least-square minimization: $min_x _i f(x)_i^2 R $\nThen up to first order, \\(H(x_n)\\approx J(x_n)^{\\prime}J(x_n)\\)\nUse the step: \\(({J(x_n)^{\\prime}J(x_n)})^{-1}\\color{\\green}{ J(x_n)}\\)\nConvergence:\n\ncan be quadratic at best\nlinear in general\n\n\n\n\n\n\n\nLeast-square minimization: $min_x _i f(x)_i^2 R $\nreplace \\({J(x_n)^{\\prime}J(x_n)}^{-1}\\) by \\({J(x_n)^{\\prime}J(x_n)}^{-1} +\\mu I\\)\n\nadjust \\(\\lambda\\) depending on progress\n\nuses only gradient information like Gauss-Newton\nequivalent to Gauss-Newton close to the solution (\\(\\mu\\) small)\nequivalent to Gradient far from solution (\\(\\mu\\) high)"
  },
  {
    "objectID": "slides/optimization copy.html#constrained-optimization-and-complementarity-conditions",
    "href": "slides/optimization copy.html#constrained-optimization-and-complementarity-conditions",
    "title": "Math topic: Optimization",
    "section": "",
    "text": "Consider the optimization problem: \\[\\max U(x_1, x_2)\\]\nunder the constraint \\(p_1 x_1 + p_2 x_2 \\leq B\\)\nwhere \\(U(.)\\), \\(p_1\\), \\(p_2\\) and \\(B\\) are given.\nHow do you find a solution by hand?\n\n\n\n\n\nCompute by hand\nEasy:\n\nsince the budget constraint must be binding, get rid of it by stating \\(x_2 = B - p_1 x_1\\)\nthen maximize in \\(x_1\\), \\(U(x_1, B - p_1 x_1)\\) using the first order conditions.\n\nIt works but:\n\nbreaks symmetry between the two goods\nwhat if there are other constraints: \\(x_1\\geq \\underline{x}\\)?\nwhat if constraints are not binding?\nis there a better way to solve this problem?\n\n\n\n\n\n\n\nAnother method, which keeps the symmetry. Constraint is binding, trying to minimize along the budget line yields an implicit relation between \\(d x_1\\) and \\(d x_2\\) \\[p_1 d {x_1} + p_2 d {x_2} = 0\\]\nAt the optimal: \\(U^{\\prime}\\_{x_1}(x_1, x_2)d {x_1} + U^{\\prime}\\_{x_2}(x_1, x_2)d {x_2} = 0\\)\nEliminate \\(d {x_1}\\) and \\(d {x_2}\\) to get one condition which characterizes optimal choices for all possible budgets. Combine with the budget constraint to get a second condition.\n\n\n\n\n\n\nTake a penalty function \\(p(x)\\) such that \\(p(x)=K&gt;0\\) if \\(x&gt;0\\) and \\(p(x)=0\\) if \\(x \\leq 0\\). Maximize: \\(V(x_1, x_2) = U(x_1, x_2) - p( p_1 x_1 + p_2 x_2 - B)\\)\nClearly, \\(\\min U \\iff \\min V\\)\nProblem: \\(\\nabla V\\) is always equal to \\(\\nabla U\\).\nSolution: use a smooth solution function like \\(p(x) = x^2\\)\nProblem: distorts optimization\n\nSolution: adjust weight of barrier and minimize \\(U(x_1, x_2) - \\kappa p(x)\\)\n\nPossible but hard to choose the weights/constraints.\n\n\n\n\n\n\nAnother idea: is there a canonical way to choose \\(\\lambda\\) such that at the minimum it is equivalent to minimize the original problem under constraint or to minimize \\[V(x_1, x_2) = U(x_1, x_2) - \\lambda (p_1 x_1 + p_2 x_2 - B)\\]\nClearly, when the constraint is not binding we must have \\(\\lambda=0\\). What should be the value of \\(\\lambda\\) when the constraint is binding ?\n\n\n\n\n\n\nIf \\((x^{\\star},y^{\\star})\\) is optimal there exists \\(\\lambda\\) such that:\n\n\\((x^{\\star},y^{\\star})\\) maximizes \\(U(x_1, x_2) + \\lambda (B- p_1 x_1 - p_2 x_2)\\)\n\\(\\lambda \\geq 0\\)\n\\(B- p_1 x_1 - p_2 x_2 \\geq 0\\)\n\\(\\lambda  (B - p_1 x_1 - p_2 x_2 ) = 0\\)\n\nThe three latest conditions are called “complementarity” or “slackness” conditions\n\nthey are equivalent to \\(\\min(\\lambda, B - p_1 x_1 - p_2 x_2)=0\\)\nwe denote \\(\\lambda \\geq 0 \\perp B- p_1 x_1 + p_2 x_2  \\geq 0\\)\n\n\\(\\lambda\\) can be interpreted as the welfare gain of relaxing the constraint.\n\n\n\n\n\n\nWe can get first order conditions that factor in the constraints:\n\n\\(U^{\\prime}_x - \\lambda p_1 = 0\\)\n\\(U^{\\prime}_y - \\lambda p_2 = 0\\)\n\\(\\lambda \\geq 0 \\perp B-p_1 x_1 -p_2 x_2 \\geq 0\\)\n\nIt is now a nonlinear system of equations with complementarities (NCP)\n\nthere are specific solution methods to deal with it\n\n\n\n\n\n\n\nGeneral formulation for vector-valued functions \\[f(x)\\geq 0 \\perp g(x)\\geq 0\\] means \\[\\forall i, f_i(x)\\geq 0 \\perp g_i(x)\\geq 0\\]\n\nNCP do not necessarily arise from a single optimization problem\n\nThere are robust (commercial) solvers for NCP problems (PATH, Knitro) for that\nHow do we solve it numerically?\n\nassume constraint is binding then non-binding then check which one is good\n\nOK if not too many constraints\n\nreformulate it as a smooth problem\napproximate the system by a series of linear complementarities problems (LCP)"
  },
  {
    "objectID": "slides/optimization copy.html#smooth-method",
    "href": "slides/optimization copy.html#smooth-method",
    "title": "Math topic: Optimization",
    "section": "",
    "text": "Consider the Fisher-Burmeister function \\[\\phi(a,b) = a+b-\\sqrt{a^2+b^2}\\]\nIt is infinitely differentiable, except at \\((0,0)\\)\nShow that \\(\\phi(a,b) = 0 \\iff \\min(a,b)=0 \\iff a\\geq 0 \\perp b \\geq 0\\)\nAfter substitution in the original system one can use regular non-linear solver\n\nfun fact: the formulation with a \\(\\min\\) is nonsmooth but also works quite often"
  },
  {
    "objectID": "slides/optimization copy.html#practicalities",
    "href": "slides/optimization copy.html#practicalities",
    "title": "Math topic: Optimization",
    "section": "",
    "text": "Robust optimization code is contained in the following libraries:\n\nRoots.jl: one-dimensional root finding\nNLSolve.jl: multidimensional root finding (+complementarities)\nOptim.jl: minimization\n\nThe two latter libraries have a somewhat peculiar API, but it’s worth absorbing it.\n\nin particular they provide non-alocating algorithms for functions that modify arguments in place\nthey are compatible with automatic differentiation\n\n\njulia&gt; f(x) = [x[1] - x[2] - 1, x[1] + x[2]]\nf (generic function with 1 method)\n\njulia&gt; NLsolve.nlsolve(f, [0., 0.0])\nResults of Nonlinear Solver Algorithm\n * Algorithm: Trust-region with dogleg and autoscaling\n * Starting Point: [0.0, 0.0]\n * Zero: [0.5000000000009869, -0.5000000000009869]\n * Inf-norm of residuals: 0.000000       \n * Iterations: 1                       \n * Convergence: true\n   * |x - x'| &lt; 0.0e+00: false\n   * |f(x)| &lt; 1.0e-08: true                           \n * Function Calls (f): 2\n * Jacobian Calls (df/dx): 2"
  },
  {
    "objectID": "slides/optimization.html#introduction-1",
    "href": "slides/optimization.html#introduction-1",
    "title": "Optimization",
    "section": "Introduction",
    "text": "Introduction\nOptimization is everywhere in economics:\n\nto model agent’s behaviour: what would a rational agent do?\n\nconsumer maximizes utility from consumption\nfirm maximizes profit\n\nan economist tries to solve a model:\n\nfind prices that clear the market"
  },
  {
    "objectID": "slides/optimization.html#plan",
    "href": "slides/optimization.html#plan",
    "title": "Optimization",
    "section": "Plan",
    "text": "Plan\n\ngeneral consideration about optimization problems\none-dimensional root-finding\none-dimensional optimization\nlocal root-finding\nlocal optimization\nconstrained optimization\nconstrained root-finding"
  },
  {
    "objectID": "slides/optimization.html#optimization-tasks-come-in-many-flavours",
    "href": "slides/optimization.html#optimization-tasks-come-in-many-flavours",
    "title": "Optimization",
    "section": "Optimization tasks come in many flavours",
    "text": "Optimization tasks come in many flavours\n\ncontinuous versus discrete optimization\nconstrained and unconstrained optimization\nglobal and local\nstochastic and deterministic optimization\nconvexity"
  },
  {
    "objectID": "slides/optimization.html#continuous-versus-discrete-optimization",
    "href": "slides/optimization.html#continuous-versus-discrete-optimization",
    "title": "Optimization",
    "section": "Continuous versus discrete optimization",
    "text": "Continuous versus discrete optimization\n\nChoice is picked from a given set (\\(x\\in X\\)) which can be:\n\ncontinuous: choose amount of debt \\(b_t \\in [0,\\overline{b}]\\), of capital \\(k_t \\in R^{+}\\)\ndiscrete: choose whether to repay or default \\(\\delta\\in{0,1}\\), how many machines to buy (\\(\\in N\\)), at which age to retire…\na combination of both: mixed integer programming"
  },
  {
    "objectID": "slides/optimization.html#continuous-versus-discrete-optimization-2",
    "href": "slides/optimization.html#continuous-versus-discrete-optimization-2",
    "title": "Optimization",
    "section": "Continuous versus discrete optimization (2)",
    "text": "Continuous versus discrete optimization (2)\n\nDiscrete optimization requires a lot of combinatorial thinking\n\nWe don’t cover it today.\n…if needed, we just test all choices until we find the best one\n\nSometimes a discrete choice can be approximated by a mixed strategy (i.e. a random strategy).\n\nInstead of \\(\\delta\\in{0,1}\\) we choose \\(x\\) in \\(prob(\\delta=1)=\\sigma(x)\\)\nwith \\(\\sigma(x)=\\frac{2}{1+\\exp(-x)}\\)"
  },
  {
    "objectID": "slides/optimization.html#constrained-and-unconstrained-optimization",
    "href": "slides/optimization.html#constrained-and-unconstrained-optimization",
    "title": "Optimization",
    "section": "Constrained and Unconstrained optimization",
    "text": "Constrained and Unconstrained optimization\n\nUnconstrained optimization: \\(x\\in R\\)\nConstrained optimization: \\(x\\in X\\)\n\nbudget set: \\(p_1 c_1 + p_2 c_2 \\leq I\\)\npositivity of consumption: \\(c \\geq 0\\).\n\nIn good cases, the optimization set is convex…\n\npretty much always in this course"
  },
  {
    "objectID": "slides/optimization.html#stochastic-vs-determinstic",
    "href": "slides/optimization.html#stochastic-vs-determinstic",
    "title": "Optimization",
    "section": "Stochastic vs Determinstic",
    "text": "Stochastic vs Determinstic\n\nCommon case, especially in machine learning \\[f(x) = E_{\\epsilon}[ \\xi (\\epsilon, x)]\\]\nOne wants to maximize (resp solve) w.r.t. \\(x\\) but it is costly to compute expectation precisely using Monte-Carlo draws (there are other methods).\nA stochastic optimization method allows to use noisy estimates of the expectation, and will still converge in expectation.\nFor now we focus on deterministic methods. Maybe later…"
  },
  {
    "objectID": "slides/optimization.html#local-vs-global-algorithms",
    "href": "slides/optimization.html#local-vs-global-algorithms",
    "title": "Optimization",
    "section": "Local vs global Algorithms",
    "text": "Local vs global Algorithms\n\nIn principle, there can be many roots (resp maxima) within the optimization set.\nAlgorithms that find them all are called “global”. For instance:\n\ngrid search\nsimulated annealing\n\nWe will deal only with local algorithms, and consider local convergence properties.\n\n-&gt;then it might work or not\nto perform global optimization just restart from different points."
  },
  {
    "objectID": "slides/optimization.html#math-vs-practice",
    "href": "slides/optimization.html#math-vs-practice",
    "title": "Optimization",
    "section": "Math vs practice",
    "text": "Math vs practice\n\nThe full mathematical treatment will typically assume that \\(f\\) is smooth (\\(\\mathcal{C}_1\\) or \\(\\mathcal{C}_2\\) depending on the algorithm).\nIn practice we often don’t know about these properties\n\nwe still try and check thqt we have a local optimal\n\nSo: fingers crossed"
  },
  {
    "objectID": "slides/optimization.html#math-vs-practice-1",
    "href": "slides/optimization.html#math-vs-practice-1",
    "title": "Optimization",
    "section": "Math vs practice",
    "text": "Math vs practice\nHere is the surface representing the objective that a deep neural network training algorithm tries to minimize.\n\nAnd yet, neural networks do great things!"
  },
  {
    "objectID": "slides/optimization.html#what-do-you-need-to-know",
    "href": "slides/optimization.html#what-do-you-need-to-know",
    "title": "Optimization",
    "section": "What do you need to know?",
    "text": "What do you need to know?\n\nbe able to handcode simple algos (Newton, Gradient Descent)\nunderstand the general principle of the various algorithms to compare them in terms of\n\nrobustness\nefficiency\naccuracy\n\nthen you can just switch the various options, when you use a library…"
  },
  {
    "objectID": "slides/optimization.html#bisection",
    "href": "slides/optimization.html#bisection",
    "title": "Optimization",
    "section": "Bisection",
    "text": "Bisection\n\nFind \\(x \\in [a,b]\\) such that \\(f(x) = 0\\). Assume \\(f(a)f(b) &lt;0\\).\nAlgorithm\n\nStart with \\(a_n, b_n\\). Set \\(c_n=(a_n+b_n)/2\\)\nCompute \\(f(c_n)\\)\n\n\nif \\(f(c_n)f(a_n)&lt;0\\) then set \\((a_{n+1},b_{n+1})=(a_n,c_n)\\)\nelse set \\((a_{n+1},b_{n+1})=(c_n,b_n)\\)\n\n\nIf \\(|f(c_n)|&lt;\\epsilon\\) and/or \\(\\frac{b-a}{2^n}&lt;\\delta\\) stop. Otherwise go back to 1."
  },
  {
    "objectID": "slides/optimization.html#bisection-2",
    "href": "slides/optimization.html#bisection-2",
    "title": "Optimization",
    "section": "Bisection (2)",
    "text": "Bisection (2)\n\nNo need for initial guess: globally convergent algorithm\n\nnot a global algorithm…\n… in the sense that it doesn’t find all solutions\n\n\\(\\delta\\) is a guaranteed accuracy on \\(x\\)\n\\(\\epsilon\\) is a measure of how good the solution is\nthink about your tradeoff: (\\(\\delta\\) or \\(\\epsilon\\) ?)"
  },
  {
    "objectID": "slides/optimization.html#newton-algorithm",
    "href": "slides/optimization.html#newton-algorithm",
    "title": "Optimization",
    "section": "Newton algorithm",
    "text": "Newton algorithm\n\nFind \\(x\\) such that \\(f(x) = 0\\). Use \\(x_0\\) as initial guess.\n\\(f\\) must be \\(\\mathcal{C_1}\\) and we assume we can compute its derivative \\(f^{\\prime}\\)\nGeneral idea:\n\nobserve that the zero \\(x^{\\star}\\) must satisfy \\[f(x^{\\star})=0=f(x_0)+f^{\\prime}(x_0)(x^{\\star}-x_0) + o(x-x_0)\\]\nHence a good approximation should be \\[x^{\\star}\\approx = x_0- f(x_0)/f^{\\prime}(x_0)\\]\nCheck it is good. otherwise, replace \\(x_0\\) by \\(x^{\\star}\\)"
  },
  {
    "objectID": "slides/optimization.html#newton-algorithm-2",
    "href": "slides/optimization.html#newton-algorithm-2",
    "title": "Optimization",
    "section": "Newton algorithm (2)",
    "text": "Newton algorithm (2)\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n- \\frac{f(x_n)}{f^{\\prime}(x_n)}=f^{\\text{newton}}(x_n)\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic"
  },
  {
    "objectID": "slides/optimization.html#quasi-newton",
    "href": "slides/optimization.html#quasi-newton",
    "title": "Optimization",
    "section": "Quasi-Newton",
    "text": "Quasi-Newton\n\nWhat if we can’t compute \\(f^{\\prime}\\) or it is expensive to do so?\n\nIdea: try to approximate \\(f^{\\prime}(x_n)\\) from the last iterates\n\nSecant method: \\[f^{\\prime}(x_n)\\approx \\frac{f(x_n)-f(x_{n-1})}{x_n-x_{n-1}}\\] \\[x_{n+1} = x_n- f(x_n)\\frac{x_n-x_{n-1}}{f(x_n)-f(x_{n-1})}\\]\n\nrequires two initial guesses: \\(x_1\\) and \\(x_0\\)\nsuperlinear convergence: \\(\\lim \\frac{x_t-x^{\\star}}{x_{t-1}-x^{\\star}}\\rightarrow 0\\)"
  },
  {
    "objectID": "slides/optimization.html#limits-of-newtons-method",
    "href": "slides/optimization.html#limits-of-newtons-method",
    "title": "Optimization",
    "section": "Limits of Newton’s method",
    "text": "Limits of Newton’s method\n\nHow could Newton method fail?\n\nbad guess\n\n-&gt; start with a better guess\n\novershoot\n\n-&gt; dampen the update (problem: much slower)\n-&gt; backtrack\n\nstationary point\n\n-&gt; if root of multiplicity \\(m\\) try \\(x_{n+1} = x_n- m \\frac{f(x_n)}{f^{\\prime}(x_n)}\\)"
  },
  {
    "objectID": "slides/optimization.html#backtracking",
    "href": "slides/optimization.html#backtracking",
    "title": "Optimization",
    "section": "Backtracking",
    "text": "Backtracking\n\nSimple idea:\n\nat stage \\(n\\) given \\(f(x_n)\\) compute Newton step \\(\\Delta_n=-\\frac{f(x_n)}{f^{\\prime}(x_n)}\\)\nfind the smallest \\(k\\) such that \\(|f(x_n-\\Delta/2^k)|&lt;|f(x_n)|\\)\nset \\(x_{n+1}=x_n-\\Delta/2^k\\)"
  },
  {
    "objectID": "slides/optimization.html#golden-section-search",
    "href": "slides/optimization.html#golden-section-search",
    "title": "Optimization",
    "section": "Golden section search",
    "text": "Golden section search\n\nMinimize \\(f(x)\\) for \\(x \\in [a,b]\\)\nChoose \\(\\Phi \\in [0,0.5]\\)\nAlgorithm:\n\nstart with \\(a_n &lt; b_n\\) (initially equal to \\(a\\) and \\(b\\))\ndefine \\(c_n = a_n+\\Phi(b_n-a_n)\\) and \\(d_n = a_n+(1-\\Phi)(b_n-a_n)\\)\n\nif \\(f(c_n)&lt;f(d_n)\\) set \\(a_{n+1},b_{n+1}=a_n, d_n\\)\nelse set \\(a_{n+1}, b_{n+1}= c_n, b_n\\)"
  },
  {
    "objectID": "slides/optimization.html#golden-section-search-2",
    "href": "slides/optimization.html#golden-section-search-2",
    "title": "Optimization",
    "section": "Golden section search (2)",
    "text": "Golden section search (2)\n\nThis is guaranteed to converge to a local minimum\nIn each step, the size of the interval is reduced by a factor \\(\\Phi\\)\nBy choosing \\(\\Phi=\\frac{\\sqrt{5}-1}{2}\\) one can save one evaluation by iteration.\n\nyou can check that either \\(c_{n+1} = d_n\\) or \\(d_{n+1} = c_n\\)\n\nRemark that bisection is not enough"
  },
  {
    "objectID": "slides/optimization.html#newton-raphson-algorithm-2",
    "href": "slides/optimization.html#newton-raphson-algorithm-2",
    "title": "Optimization",
    "section": "Newton-Raphson Algorithm (2)",
    "text": "Newton-Raphson Algorithm (2)\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n-\\frac{f^{\\prime}(x_0)}{f^{\\prime\\prime}(x_0)}\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f^{\\prime}(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic"
  },
  {
    "objectID": "slides/optimization.html#unconstrained-problems",
    "href": "slides/optimization.html#unconstrained-problems",
    "title": "Optimization",
    "section": "Unconstrained problems",
    "text": "Unconstrained problems\n\nMinimize \\(f(x)\\) for \\(x \\in R^n\\) given initial guess \\(x_0 \\in R^n\\)\nMany intuitions from the 1d case, still apply\n\nreplace derivatives by gradient, jacobian and hessian\nrecall that matrix multiplication is not commutative\n\nSome specific problems:\n\nupdate speed can be specific to each dimension\nsaddle-point issues (for minimization)"
  },
  {
    "objectID": "slides/optimization.html#quick-terminology",
    "href": "slides/optimization.html#quick-terminology",
    "title": "Optimization",
    "section": "Quick terminology",
    "text": "Quick terminology\nFunction \\(f: R^p \\rightarrow R^q\\)\n\nJacobian: \\(J(x)\\) or \\(f^{\\prime}\\_x(x)\\), \\(p\\times q\\) matrix such that: \\[J(x)\\_{ij} = \\frac{\\partial f(x)\\_i}{\\partial x_j}\\]\nGradient: \\(\\nabla f(x) = J(x)\\), gradient when \\(q=1\\)\nHessian: denoted by \\(H(x)\\) or \\(f^{\\prime\\prime}\\_{xx}(x)\\) when \\(q=1\\): \\[H(x)\\_{jk} = \\frac{\\partial f(x)}{\\partial x_j\\partial x_k}\\]\nIn the following explanations, \\(|x|\\) denotes the supremum norm, but most of the following explanations also work with other norms."
  },
  {
    "objectID": "slides/optimization.html#multidimensional-newton-raphson",
    "href": "slides/optimization.html#multidimensional-newton-raphson",
    "title": "Optimization",
    "section": "Multidimensional Newton-Raphson",
    "text": "Multidimensional Newton-Raphson\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n- J(x_{n})^{-1}f(x_n)=f^{\\text{newton}}(x_n)\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic"
  },
  {
    "objectID": "slides/optimization.html#multidimensional-newton-root-finding-2",
    "href": "slides/optimization.html#multidimensional-newton-root-finding-2",
    "title": "Optimization",
    "section": "Multidimensional Newton root-finding (2)",
    "text": "Multidimensional Newton root-finding (2)\n\nwhat matters is the computation of the step \\(\\Delta_n = {\\color{\\red}{J(x_{n})^{-1}}} f(x_n)\\)\ndon’t compute \\(J(x_n)^{-1}\\)\n\nit takes less operations to compute \\(X\\) in \\(AX=Y\\) than \\(A^{-1}\\) then \\(A^{-1}Y\\)\nin Julia: X = A \\ Y\n\nstrategies to improve convergence:\n\ndampening: \\(x_n = (1-\\lambda)x_{n-1} - \\lambda \\Delta_n\\)\nbacktracking: choose \\(k\\) such that \\(|f(x_n-2^{-k}\\Delta_n)|\\)&lt;\\(|f(x_{n-1})|\\)\nlinesearch: choose \\(\\lambda\\in[0,1]\\) so that \\(|f(x_n-\\lambda\\Delta_n)|\\) is minimal"
  },
  {
    "objectID": "slides/optimization.html#multidimensional-gradient-descent",
    "href": "slides/optimization.html#multidimensional-gradient-descent",
    "title": "Optimization",
    "section": "Multidimensional Gradient Descent",
    "text": "Multidimensional Gradient Descent\n\nMinimize \\(f(x) \\in R\\) for \\(x \\in R^n\\) given \\(x_0 \\in R^n\\)\nAlgorithm\n\nstart with \\(x_n\\) \\[x_{n+1} = (1-\\lambda) x_n - \\lambda \\nabla f(x_n)\\]\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nComments:\n\nlots of variants\nautomatic differentiation software makes gradient easy to compute\nconvergence is typically linear"
  },
  {
    "objectID": "slides/optimization.html#gradient-descent-variants",
    "href": "slides/optimization.html#gradient-descent-variants",
    "title": "Optimization",
    "section": "Gradient descent variants",
    "text": "Gradient descent variants"
  },
  {
    "objectID": "slides/optimization.html#multidimensional-newton-minimization",
    "href": "slides/optimization.html#multidimensional-newton-minimization",
    "title": "Optimization",
    "section": "Multidimensional Newton Minimization",
    "text": "Multidimensional Newton Minimization\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n-{\\color{\\red}{H(x_{n})^{-1}}}\\color{\\green}{ J(x_n)'}\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic\nProblem:\n\n\\(H(x_{n})\\) hard to compute efficiently\nrather unstable"
  },
  {
    "objectID": "slides/optimization.html#quasi-newton-method-for-multidimensional-minimization",
    "href": "slides/optimization.html#quasi-newton-method-for-multidimensional-minimization",
    "title": "Optimization",
    "section": "Quasi-Newton method for multidimensional minimization",
    "text": "Quasi-Newton method for multidimensional minimization\n\nRecall the secant method:\n\n\\(f(x_{n-1})\\) and \\(f(x_{n-2})\\) are used to approximate \\(f^{\\prime}(x_{n-2})\\).\nIntuitively, \\(n\\) iterates would be needed to approximate a hessian of size \\(n\\)….\n\nBroyden method: takes \\(2 n\\) steps to solve a linear problem of size \\(n\\)\n\nuses past information incrementally"
  },
  {
    "objectID": "slides/optimization.html#quasi-newton-method-for-multidimensional-minimization-1",
    "href": "slides/optimization.html#quasi-newton-method-for-multidimensional-minimization-1",
    "title": "Optimization",
    "section": "Quasi-Newton method for multidimensional minimization",
    "text": "Quasi-Newton method for multidimensional minimization\n\nConsider the approximation: \\[f(x_n)-f(x_{n-1}) \\approx J(x_n) (x_n - x_{n-1})\\]\n\n\\(J(x_n)\\) is unknown and cannot be determined directly as in the secant method.\nidea: \\(J(x_n)\\) as close as possible to \\(J(x_{n-1})\\) while solving the secant equation\nformula: \\[J_n = J_{n-1} + \\frac{(f(x_n)-f(x_{n-1})) - J_{n-1}(x_n-x_{n-1})}{||x_n-x_{n-1}||^2}(x_n-x_{n-1})^{\\prime}\\]"
  },
  {
    "objectID": "slides/optimization.html#gauss-newton-minimization",
    "href": "slides/optimization.html#gauss-newton-minimization",
    "title": "Optimization",
    "section": "Gauss-Newton Minimization",
    "text": "Gauss-Newton Minimization\n\nRestrict to least-square minimization: $min_x _i f(x)_i^2 R $\nThen up to first order, \\(H(x_n)\\approx J(x_n)^{\\prime}J(x_n)\\)\nUse the step: \\(({J(x_n)^{\\prime}J(x_n)})^{-1}\\color{\\green}{ J(x_n)}\\)\nConvergence:\n\ncan be quadratic at best\nlinear in general"
  },
  {
    "objectID": "slides/optimization.html#levenberg-marquardt",
    "href": "slides/optimization.html#levenberg-marquardt",
    "title": "Optimization",
    "section": "Levenberg-Marquardt",
    "text": "Levenberg-Marquardt\n\nLeast-square minimization: $min_x _i f(x)_i^2 R $\nreplace \\({J(x_n)^{\\prime}J(x_n)}^{-1}\\) by \\({J(x_n)^{\\prime}J(x_n)}^{-1} +\\mu I\\)\n\nadjust \\(\\lambda\\) depending on progress\n\nuses only gradient information like Gauss-Newton\nequivalent to Gauss-Newton close to the solution (\\(\\mu\\) small)\nequivalent to Gradient far from solution (\\(\\mu\\) high)"
  },
  {
    "objectID": "slides/optimization.html#consumption-optimization",
    "href": "slides/optimization.html#consumption-optimization",
    "title": "Optimization",
    "section": "Consumption optimization",
    "text": "Consumption optimization\nConsider the optimization problem: \\[\\max U(x_1, x_2)\\]\nunder the constraint \\(p_1 x_1 + p_2 x_2 \\leq B\\)\nwhere \\(U(.)\\), \\(p_1\\), \\(p_2\\) and \\(B\\) are given.\nHow do you find a solution by hand?"
  },
  {
    "objectID": "slides/optimization.html#consumption-optimization-1",
    "href": "slides/optimization.html#consumption-optimization-1",
    "title": "Optimization",
    "section": "Consumption optimization (1)",
    "text": "Consumption optimization (1)\n\nCompute by hand\nEasy:\n\nsince the budget constraint must be binding, get rid of it by stating \\(x_2 = B - p_1 x_1\\)\nthen maximize in \\(x_1\\), \\(U(x_1, B - p_1 x_1)\\) using the first order conditions.\n\nIt works but:\n\nbreaks symmetry between the two goods\nwhat if there are other constraints: \\(x_1\\geq \\underline{x}\\)?\nwhat if constraints are not binding?\nis there a better way to solve this problem?"
  },
  {
    "objectID": "slides/optimization.html#consumption-optimization-2",
    "href": "slides/optimization.html#consumption-optimization-2",
    "title": "Optimization",
    "section": "Consumption optimization (2)",
    "text": "Consumption optimization (2)\n\nAnother method, which keeps the symmetry. Constraint is binding, trying to minimize along the budget line yields an implicit relation between \\(d x_1\\) and \\(d x_2\\) \\[p_1 d {x_1} + p_2 d {x_2} = 0\\]\nAt the optimal: \\(U^{\\prime}\\_{x_1}(x_1, x_2)d {x_1} + U^{\\prime}\\_{x_2}(x_1, x_2)d {x_2} = 0\\)\nEliminate \\(d {x_1}\\) and \\(d {x_2}\\) to get one condition which characterizes optimal choices for all possible budgets. Combine with the budget constraint to get a second condition."
  },
  {
    "objectID": "slides/optimization.html#penalty-function",
    "href": "slides/optimization.html#penalty-function",
    "title": "Optimization",
    "section": "Penalty function",
    "text": "Penalty function\n\nTake a penalty function \\(p(x)\\) such that \\(p(x)=K&gt;0\\) if \\(x&gt;0\\) and \\(p(x)=0\\) if \\(x \\leq 0\\). Maximize: \\(V(x_1, x_2) = U(x_1, x_2) - p( p_1 x_1 + p_2 x_2 - B)\\)\nClearly, \\(\\min U \\iff \\min V\\)\nProblem: \\(\\nabla V\\) is always equal to \\(\\nabla U\\).\nSolution: use a smooth solution function like \\(p(x) = x^2\\)\nProblem: distorts optimization\n\nSolution: adjust weight of barrier and minimize \\(U(x_1, x_2) - \\kappa p(x)\\)\n\nPossible but hard to choose the weights/constraints."
  },
  {
    "objectID": "slides/optimization.html#penalty-function-1",
    "href": "slides/optimization.html#penalty-function-1",
    "title": "Optimization",
    "section": "Penalty function",
    "text": "Penalty function\n\nAnother idea: is there a canonical way to choose \\(\\lambda\\) such that at the minimum it is equivalent to minimize the original problem under constraint or to minimize \\[V(x_1, x_2) = U(x_1, x_2) - \\lambda (p_1 x_1 + p_2 x_2 - B)\\]\nClearly, when the constraint is not binding we must have \\(\\lambda=0\\). What should be the value of \\(\\lambda\\) when the constraint is binding ?"
  },
  {
    "objectID": "slides/optimization.html#karush-kuhn-tucker-conditions",
    "href": "slides/optimization.html#karush-kuhn-tucker-conditions",
    "title": "Optimization",
    "section": "Karush-Kuhn-Tucker conditions",
    "text": "Karush-Kuhn-Tucker conditions\n\nIf \\((x^{\\star},y^{\\star})\\) is optimal there exists \\(\\lambda\\) such that:\n\n\\((x^{\\star},y^{\\star})\\) maximizes lagrangian \\(\\mathcal{L} = U(x_1, x_2) + \\lambda (B- p_1 x_1 - p_2 x_2)\\)\n\\(\\lambda \\geq 0\\)\n\\(B- p_1 x_1 - p_2 x_2 \\geq 0\\)\n\\(\\lambda  (B - p_1 x_1 - p_2 x_2 ) = 0\\)\n\nThe three latest conditions are called “complementarity” or “slackness” conditions\n\nthey are equivalent to \\(\\min(\\lambda, B - p_1 x_1 - p_2 x_2)=0\\)\nwe denote \\(\\lambda \\geq 0 \\perp B- p_1 x_1 + p_2 x_2  \\geq 0\\)\n\n\\(\\lambda\\) can be interpreted as the welfare gain of relaxing the constraint."
  },
  {
    "objectID": "slides/optimization.html#karush-kuhn-tucker-conditions-1",
    "href": "slides/optimization.html#karush-kuhn-tucker-conditions-1",
    "title": "Optimization",
    "section": "Karush-Kuhn-Tucker conditions",
    "text": "Karush-Kuhn-Tucker conditions\n\nWe can get first order conditions that factor in the constraints:\n\n\\(U^{\\prime}_x - \\lambda p_1 = 0\\)\n\\(U^{\\prime}_y - \\lambda p_2 = 0\\)\n\\(\\lambda \\geq 0 \\perp B-p_1 x_1 -p_2 x_2 \\geq 0\\)\n\nIt is now a nonlinear system of equations with complementarities (NCP)\n\nthere are specific solution methods to deal with it"
  },
  {
    "objectID": "slides/optimization.html#solution-strategies-for-ncp-problems",
    "href": "slides/optimization.html#solution-strategies-for-ncp-problems",
    "title": "Optimization",
    "section": "Solution strategies for NCP problems",
    "text": "Solution strategies for NCP problems\n\nGeneral formulation for vector-valued functions \\[f(x)\\geq 0 \\perp g(x)\\geq 0\\] means \\[\\forall i, f_i(x)\\geq 0 \\perp g_i(x)\\geq 0\\]\n\nNCP do not necessarily arise from a single optimization problem\n\nThere are robust (commercial) solvers for NCP problems (PATH, Knitro) for that\nHow do we solve it numerically?\n\nassume constraint is binding then non-binding then check which one is good\n\nOK if not too many constraints\n\nreformulate it as a smooth problem\napproximate the system by a series of linear complementarities problems (LCP)"
  },
  {
    "objectID": "slides/optimization.html#optimization-libraries",
    "href": "slides/optimization.html#optimization-libraries",
    "title": "Optimization",
    "section": "Optimization libraries",
    "text": "Optimization libraries\n\nRobust optimization code is contained in the following libraries:\n\nRoots.jl: one-dimensional root finding\nNLSolve.jl: multidimensional root finding (+complementarities)\nOptim.jl: minimization\n\nThe two latter libraries have a somewhat peculiar API, but it’s worth absorbing it.\n\nin particular they provide non-allocating algorithms for functions that modify arguments in place\nthey are compatible with automatic differentiation\n\n\njulia&gt; f(x) = [x[1] - x[2] - 1, x[1] + x[2]]\nf (generic function with 1 method)\n\njulia&gt; NLsolve.nlsolve(f, [0., 0.0])\nResults of Nonlinear Solver Algorithm\n * Algorithm: Trust-region with dogleg and autoscaling\n * Starting Point: [0.0, 0.0]\n * Zero: [0.5000000000009869, -0.5000000000009869]\n * Inf-norm of residuals: 0.000000       \n * Iterations: 1                       \n * Convergence: true\n   * |x - x'| &lt; 0.0e+00: false\n   * |f(x)| &lt; 1.0e-08: true                           \n * Function Calls (f): 2\n * Jacobian Calls (df/dx): 2"
  },
  {
    "objectID": "slides/ddp.html#introduction",
    "href": "slides/ddp.html#introduction",
    "title": "Discrete Dynamic Programming",
    "section": "Introduction",
    "text": "Introduction"
  },
  {
    "objectID": "slides/ddp.html#section",
    "href": "slides/ddp.html#section",
    "title": "Discrete Dynamic Programming",
    "section": "",
    "text": "The imperialism of Dynamic Programming\n— Recursive Macroeconomic Theory (Ljunqvist & Sargent)"
  },
  {
    "objectID": "slides/ddp.html#section-1",
    "href": "slides/ddp.html#section-1",
    "title": "Discrete Dynamic Programming",
    "section": "",
    "text": "I spent the Fall quarter (of 1950) at RAND. My first task was to find a name for multistage decision processes. An interesting question is, “Where did the name, dynamic programming, come from?” The 1950s were not good years for mathematical research. We had a very interesting gentleman in Washington named Wilson. He was Secretary of Defense, and he actually had a pathological fear and hatred of the word “research”. I’m not using the term lightly; I’m using it precisely. His face would suffuse, he would turn red, and he would get violent if people used the term research in his presence. You can imagine how he felt, then, about the term mathematical. The RAND Corporation was employed by the Air Force, and the Air Force had Wilson as its boss, essentially. Hence, I felt I had to do something to shield Wilson and the Air Force from the fact that I was really doing mathematics inside the RAND Corporation. What title, what name, could I choose? In the first place I was interested in planning, in decision making, in thinking. But planning, is not a good word for various reasons. I decided therefore to use the word “programming”. I wanted to get across the idea that this was dynamic, this was multistage, this was time-varying. I thought, let’s kill two birds with one stone. Let’s take a word that has an absolutely precise meaning, namely dynamic, in the classical physical sense. It also has a very interesting property as an adjective, and that is it’s impossible to use the word dynamic in a pejorative sense. Try thinking of some combination that will possibly give it a pejorative meaning. It’s impossible. Thus, I thought dynamic programming was a good name. It was something not even a Congressman could object to. So I used it as an umbrella for my activities.\n\n— Richard Bellman, Eye of the Hurricane: An Autobiography (1984, page 159)"
  },
  {
    "objectID": "slides/ddp.html#markov-chain-and-markov-process-1",
    "href": "slides/ddp.html#markov-chain-and-markov-process-1",
    "title": "Discrete Dynamic Programming",
    "section": "Markov chain and Markov process",
    "text": "Markov chain and Markov process\n\nStochastic process: family of random variables indexed by time\nA stochastic process has the Markov property if its future evolution depends only on its current state.\nSpecial cases:\n\n\n\n\n\n\n\n\n\n\nDiscrete States\nContinuous States\n\n\n\n\nDiscrete Time\nDiscrete Markov Chain\nContinuous Markov Chain\n\n\nContinuous Time\nMarkov Jump Process\nMarkov Process"
  },
  {
    "objectID": "slides/ddp.html#stochastic-matrices",
    "href": "slides/ddp.html#stochastic-matrices",
    "title": "Discrete Dynamic Programming",
    "section": "Stochastic matrices",
    "text": "Stochastic matrices\n\na matrix \\(M \\in R^n\\times R^n\\) matrix is said to be stochastic if\n\nall coefficents are non-negative\nall the lines lines sum to 1 (\\(\\forall i, \\sum_j M_{ij} = 1\\))\n\na probability density is a vector \\(\\mu \\in R^n\\) such that :\n\nall components are non-negative\nall coefficients sum to 1 (\\(\\sum_{i=1}^n \\mu_{i} = 1\\))\n\na distribution is a vector with such that:\n\nall components are non-negative"
  },
  {
    "objectID": "slides/ddp.html#simulation",
    "href": "slides/ddp.html#simulation",
    "title": "Discrete Dynamic Programming",
    "section": "Simulation",
    "text": "Simulation\n\nConsider: \\(\\mu_{i,t+1}' =\\mu_t' P\\)\nWe have \\(\\mu_{i,t+1} = \\sum_{k=1}^n  \\mu_{k,t}  P_{k, i}\\)\nAnd: \\(\\sum_i\\mu_{i,t+1} = \\sum_i \\mu_{i,t}\\)\nPostmultiplication by a stochastic matrix preserves the mass.\nInterpretation: \\(P_{ij}\\) is the fraction of the mass initially in state \\(i\\) which ends up in \\(j\\)"
  },
  {
    "objectID": "slides/ddp.html#example",
    "href": "slides/ddp.html#example",
    "title": "Discrete Dynamic Programming",
    "section": "Example",
    "text": "Example\n\\[\\underbrace{\n\\begin{pmatrix}\n? & ? & ?\n\\end{pmatrix}\n}_{\\mu_{t+1}'} = \\underbrace{\n\\begin{pmatrix}\n0.5 & 0.3 & 0.2\n\\end{pmatrix}\n}_{\\mu_t'} \\begin{pmatrix}\n0.4 & 0.6 & 0.0 \\\\\\\\\n0.2 & 0.5 & 0.3 \\\\\\\\\n0 & 0 & 1.0\n\\end{pmatrix}\\]"
  },
  {
    "objectID": "slides/ddp.html#representation-as-a-graph",
    "href": "slides/ddp.html#representation-as-a-graph",
    "title": "Discrete Dynamic Programming",
    "section": "Representation as a graph",
    "text": "Representation as a graph"
  },
  {
    "objectID": "slides/ddp.html#probabilistic-interpretation",
    "href": "slides/ddp.html#probabilistic-interpretation",
    "title": "Discrete Dynamic Programming",
    "section": "Probabilistic interpretation",
    "text": "Probabilistic interpretation\n\nDenote by \\(S=(s_1,...s_n)\\) a finite set with \\(n\\) elements (\\(|S|=n\\)).\nA Markov Chain with values in \\(S\\) and with transitions given by a stochastic matrix \\(P\\in R^n\\times R^n\\) identfies a stochastic process \\((X_t)_{t\\geq 0}\\) such that \\[P_{ij} = Prob(X_{t+1}=s_j|X_t=s_i)\\]\nIn words, line \\(i\\) describes the conditional distribution of \\(X_{t+1}\\) conditional on \\(X_t=s_i\\)."
  },
  {
    "objectID": "slides/ddp.html#what-about-longer-horizons",
    "href": "slides/ddp.html#what-about-longer-horizons",
    "title": "Discrete Dynamic Programming",
    "section": "What about longer horizons?",
    "text": "What about longer horizons?\n\nIt is easy to show that for any \\(k\\), \\(P^k\\) is a stochastic matrix.\n\\(P^k_{ij}\\) denotes the probability of ending in \\(j\\), after \\(k\\) periods, starting from \\(i\\)\nGiven an initial distribution \\(\\mu_0\\in R^{+ n}\\)\n\nWhich states will visited with positive probability between t=0 and t=k?\nWhat happens in the very long run?\n\nWe need to study a little bit the properties of Markov Chains"
  },
  {
    "objectID": "slides/ddp.html#connectivity",
    "href": "slides/ddp.html#connectivity",
    "title": "Discrete Dynamic Programming",
    "section": "Connectivity",
    "text": "Connectivity\n\nTwo states \\(s_i\\) and \\(s_j\\) are connected if \\(P_{ij}&gt;0\\)\nWe call incidence matrix: \\(\\mathcal{I}(P)=(\\delta_{P_{ij}&gt;0})_{ij}\\)\nTwo states \\(i\\) and \\(j\\) communicate with each other if there are \\(k\\) and \\(l\\) such that: \\((P^k)_ {i,j}&gt;0\\) and \\((P^l)_ {j,i}&gt;0\\)\n\nit is an equivalence relation\nwe can define equivalence classes\n\nA stochastic matrix \\(P\\) is irreducible if all states communicate\n\nthere is a unique communication class"
  },
  {
    "objectID": "slides/ddp.html#connectivity-and-irreducibility-example-from-qe",
    "href": "slides/ddp.html#connectivity-and-irreducibility-example-from-qe",
    "title": "Discrete Dynamic Programming",
    "section": "Connectivity and irreducibility (example from QE)",
    "text": "Connectivity and irreducibility (example from QE)\n\n\nIrreducible\n\n\nAll states can be reached with positive probably from any other initial state.\n\n\nNot irreducible\n\n\nThere is a subset of states (poor), which absorbs all the mass coming in."
  },
  {
    "objectID": "slides/ddp.html#aperiodicity",
    "href": "slides/ddp.html#aperiodicity",
    "title": "Discrete Dynamic Programming",
    "section": "Aperiodicity",
    "text": "Aperiodicity\n\nAre there cycles? Starting from a state \\(i\\), how long does it take to return to \\(i\\)?\nThe period of a state is defined as \\[gcd( {k\\geq 1 | (P^k)_{i,i}&gt;0} )\\]\nIf a state has a period d&gt;1 the chain returns to the state only at dates multiple of d."
  },
  {
    "objectID": "slides/ddp.html#aperiodicity-example-from-qe",
    "href": "slides/ddp.html#aperiodicity-example-from-qe",
    "title": "Discrete Dynamic Programming",
    "section": "Aperiodicity (example from QE)",
    "text": "Aperiodicity (example from QE)\n\n\nPeriodic\n\n\nIf you start from some states, you return to it, but not before two periods.\n\n\nAperiodic\n\n\nIf some mass leaves a state, some of it returns to the state in the next period."
  },
  {
    "objectID": "slides/ddp.html#stationary-distribution",
    "href": "slides/ddp.html#stationary-distribution",
    "title": "Discrete Dynamic Programming",
    "section": "Stationary distribution",
    "text": "Stationary distribution\n\n\\(\\mu\\) is a stationary distribution if \\(\\mu' = \\mu' P\\)\nTheorem: there always exists such a distribution\n\nproof: Brouwer theorem (fixed-point result for compact-convex set)\n\\(f: \\mu\\rightarrow (\\mu'P)'\\)\n\nTheorem:\n\nif P is irreducible the fixed point \\(\\mu^{\\star}\\) is unique\nif P is irreducible and aperiodic \\(|\\mu_0' P^k - \\mu^{\\star}| \\underset{k\\to+\\infty}{\\longrightarrow} 0\\) for any initial distribution \\(\\mu_0\\)\n\nWe then say the Markov chain is ergodic\n\\(\\mu^{\\star}\\) is the ergodic distribution\n\nit is the best guess, one can do for the state of the chain in the very far future"
  },
  {
    "objectID": "slides/ddp.html#stationary-distribution-proof",
    "href": "slides/ddp.html#stationary-distribution-proof",
    "title": "Discrete Dynamic Programming",
    "section": "Stationary distribution (proof)",
    "text": "Stationary distribution (proof)\n\nBrouwer’s theorem: Let \\(\\mathcal{C}\\) be a compact convex subset of \\(R^n\\) and \\(f\\) a continuous mapping \\(\\mathcal{C}\\rightarrow \\mathcal{C}\\). Then there exists a fixed point \\(x_0\\in \\mathcal{C}\\) such that \\(f(x_0)=x_0\\)\nResult hinges on:\n\ncontinuity of \\(f: \\mu \\mapsto \\mu P\\)\nconvexity of \\(\\\\{x \\in R^n | |x|=1 \\\\}\\) (easy to check)\ncompactness of \\(\\\\{x \\in R^n | |x|=1 \\\\}\\)\n\nit is bounded\nand closed (the inverse image of 1 for \\(u\\mapsto |u|\\) which is continuous)"
  },
  {
    "objectID": "slides/ddp.html#stationary-distribution-1",
    "href": "slides/ddp.html#stationary-distribution-1",
    "title": "Discrete Dynamic Programming",
    "section": "Stationary distribution?",
    "text": "Stationary distribution?\nHow do we compute the stationary distribution?\n\nSimulation\nLinear algebra\nDecomposition"
  },
  {
    "objectID": "slides/ddp.html#simulating-a-markov-chain",
    "href": "slides/ddp.html#simulating-a-markov-chain",
    "title": "Discrete Dynamic Programming",
    "section": "Simulating a Markov Chain",
    "text": "Simulating a Markov Chain\n\nVery simple idea:\n\nstart with any \\(\\mu_0\\) and compute the iterates recursively\n\\(\\mu_{n+1}' = \\mu_n' P\\)\nconvergence is linear:\n\n\\(|\\mu_{n+1} - \\mu_n| \\leq |P| |\\mu_n - \\mu_{n-1}|\\)"
  },
  {
    "objectID": "slides/ddp.html#using-linear-algebra",
    "href": "slides/ddp.html#using-linear-algebra",
    "title": "Discrete Dynamic Programming",
    "section": "Using Linear Algebra",
    "text": "Using Linear Algebra\n\nFind the solution of \\(\\mu'(P-I) = 0\\) ?\n\nnot well defined, 0 is a solution\nwe need to incorporate the constraint \\(\\sum_i(\\mu_i)=1\\)\n\nMethod:\n\nDefine \\(M_{ij} =  \\begin{cases} 1  &\\text{if} & j =0 \\\\\\\\ (P-I)_{ij}  & \\text{if} & j&gt; 1  \\end{cases}\\)\nDefine \\(D_i = \\begin{cases} 1 & \\text{if} & j = 0 \\\\\\\\0 & \\text{if} & j&gt;0 \\end{cases}\\)\nWith a linear algebra solver\n\nlook for a solution \\(\\mu\\) of \\(\\mu' M = D\\)\nor \\(M^{\\prime} \\mu = D\\prime\\)\nif you find a solution, it is unique (theorem)\n\n\nAlternative:\n\nminimize residual squares of overidentified system"
  },
  {
    "objectID": "slides/ddp.html#code-example",
    "href": "slides/ddp.html#code-example",
    "title": "Discrete Dynamic Programming",
    "section": "Code example",
    "text": "Code example\n# we use the identity matrix and the \\ operator\nusing LinearAlgebra: I, \\\n# define a stochastic matrix (lines sum to 1)\nP = [  0.9  0.1 0.0  ;\n       0.05 0.9 0.05 ;\n       0.0  0.9 0.1  ]\n# define an auxiliary matrix\nM = P' - I\nM[end,:] .= 1.0\n# define rhs\nR = zeros(3)\nR[end] = 1\n# solve the system\nμ = M\\R\n# check that you have a solution:\n@assert sum(μ) == 1\n@assert all(abs.(μ'P - μ').&lt;1e-10)"
  },
  {
    "objectID": "slides/ddp.html#further-comments",
    "href": "slides/ddp.html#further-comments",
    "title": "Discrete Dynamic Programming",
    "section": "Further comments",
    "text": "Further comments\n\nKnowledge about the structure of the Markov Chain can help speedup the calculations\nThere are methods for potentially very-large linear system\n\nNewton-Krylov based methods, GMRES\n\nBasic algorithms are easy to implement by hand\nQuantEcon toolbox has very good methods to study markov chains"
  },
  {
    "objectID": "slides/ddp.html#general-formulation",
    "href": "slides/ddp.html#general-formulation",
    "title": "Discrete Dynamic Programming",
    "section": "General Formulation",
    "text": "General Formulation\nMarkov Decision Problem\n\n\n\n\nEnvironment\n\nstates: \\(s \\in S\\)\nactions: \\(x \\in X(s)\\)\ntransitions: \\(\\pi(s'| s, x) \\in S\\)\n\n\\(probability\\) of going to \\(s'\\) in state \\(s\\)…\n… given action \\(x\\)\n\n\n\n\n\n\nReward: \\(r(s,x) \\in R\\)\n\naka felicity, intratemporal utility\n\n\nPolicy: \\(x(): s \\rightarrow x\\in X(s)\\)\n\na.k.a. decision rule\nwe consider deterministic policy\ngiven \\(x()\\), the evolution of \\(s\\) is a Markov process\n\n\\(\\pi(. |s, x())\\) is a distribution for \\(s'\\) over \\(S\\)\nit depends only on \\(s\\)"
  },
  {
    "objectID": "slides/ddp.html#objective",
    "href": "slides/ddp.html#objective",
    "title": "Discrete Dynamic Programming",
    "section": "Objective",
    "text": "Objective\n\nexpected lifetime reward:\n\nvalue of following policy \\(x()\\) starting from \\(s\\): \\[R(s; x()) =  E_0 \\sum_t^T \\delta^t \\left[ r_t\\right]\\]\n\\(\\delta \\in [0,1[\\): discount factor\nhorizon: \\(T \\in \\\\{N, \\infty\\\\}\\)\n\nvalue of a state \\(s\\)\n\nvalue of following the optimal policy starting from \\(s\\) \\[V(s) = \\max_{ x()} R(s, x())\\]\n\\(V()\\) is the value function (t.b.d.)"
  },
  {
    "objectID": "slides/ddp.html#classes-of-dynamic-optimization",
    "href": "slides/ddp.html#classes-of-dynamic-optimization",
    "title": "Discrete Dynamic Programming",
    "section": "Classes of Dynamic Optimization",
    "text": "Classes of Dynamic Optimization\n\nThe formulation so far is very general. It encompasses several variants of the problem:\n\nfinite horizon vs infinite horizon\ndiscrete-space problem vs continuous-state space problem\nsome learning problems (reinforcement learning…)\n\nThere are also variants not included:\n\nnon time-separable problems\nnon time-homogenous problems\nsome learning problems (bayesian updating, …)"
  },
  {
    "objectID": "slides/ddp.html#finite-horizon-vs-infinite-horizon",
    "href": "slides/ddp.html#finite-horizon-vs-infinite-horizon",
    "title": "Discrete Dynamic Programming",
    "section": "Finite horizon vs infinite horizon",
    "text": "Finite horizon vs infinite horizon\n\nRecall objective: \\(V(s; x()) =  \\max E_0\\sum_{t=0}^T \\delta^t \\left[ r(s_t, x_t) \\right]\\)\nIf \\(T&lt;\\infty\\), the decision in the last periods, will be different from the periods before\n\none must find a decision rule \\(\\pi_t()\\) per period\nor, equivalently, add \\(t\\) to the state space: \\(\\tilde{S}=S\\times[0,T]\\)\n\nIf \\(T=\\infty\\), the continuation value of being in state \\(s_t\\) is independent from \\(t\\)\n\n\\[V(s; x()) = E_0 \\max \\sum_ {t=0}^{T_0} \\delta^t \\left[ r(s_t, x_t) \\right] + \\delta^{T_0} E_0  \\sum_ {t=T_0}^{\\infty} \\delta^t \\left[ r(s_t, x_t) \\right]\\]\n\\[ = E_0 \\left[ \\max \\sum_ {t=0}^{T_0} \\delta^t \\left[ r(s_t, x_t) \\right] +  \\delta^{T_0} V(s_ {T_0}; x()) \\right]\\]"
  },
  {
    "objectID": "slides/ddp.html#continuous-vs-discrete",
    "href": "slides/ddp.html#continuous-vs-discrete",
    "title": "Discrete Dynamic Programming",
    "section": "Continuous vs discrete",
    "text": "Continuous vs discrete\n\nDiscrete Dynamic Programming (today)\n\ndiscrete states: \\(s \\in {s_1, \\cdots, s_N}\\)\ndiscrete controls: \\(|X(s)|&lt;\\infty\\)\nthere is a finite number of policies, the can be represented exactly\nunless \\(|S|\\) is very large (cf go game)\n\nContinuous problem:\n\n\\(x(s)\\), \\(V(s; \\pi)\\) require an infinite number of coefficients\nsame general approach but different implementation\ntwo main variants:\n\ndiscretize the initial problem: back to DDP\nuse approximation techniques (i.e. interpolation)"
  },
  {
    "objectID": "slides/ddp.html#non-time-separable-example",
    "href": "slides/ddp.html#non-time-separable-example",
    "title": "Discrete Dynamic Programming",
    "section": "Non time separable example",
    "text": "Non time separable example\n\nFor instance Epstein-Zin preferences: \\[\\max V(;c())\\] where \\[V_t = (1-\\delta) \\frac{c_t^{1-\\sigma}}{1-\\sigma} + \\delta \\left[ E_t V_{t+1}^{\\alpha} \\right]^{\\frac{1}{\\alpha}}\\]\nWhy would you do that?\n\nto disentangle risk aversion and elasticity of intertemporal substitution\nrobust control\n\nYou can still use ideas from Dynamic Programming."
  },
  {
    "objectID": "slides/ddp.html#non-homogenous-preference",
    "href": "slides/ddp.html#non-homogenous-preference",
    "title": "Discrete Dynamic Programming",
    "section": "Non homogenous preference",
    "text": "Non homogenous preference\n\nLook at the \\(\\alpha-\\beta\\) model. \\[V_t = \\max \\sum_t^{\\infty} \\beta_t U(c_t)\\] where \\(\\delta_0 = 1\\), \\(\\delta_1=\\alpha\\), \\(\\delta_k=\\alpha\\beta^{k-1}\\)\nMakes the problem time-inconsistent:\n\nthe optimal policy you would choose for the continuation value after \\(T\\) is not the same if you maximize it in expectation from \\(0\\) or at \\(T\\)."
  },
  {
    "objectID": "slides/ddp.html#learning-problems",
    "href": "slides/ddp.html#learning-problems",
    "title": "Discrete Dynamic Programming",
    "section": "Learning problems",
    "text": "Learning problems\n\nBayesian learning: Uncertainty about some model parameters\n\nex: variance and return of a stock market\nagent models this uncertainty as a distribution\nagent updates his priors after observing the result of his actions\nactions are taken optimally taken into account the revelation power of some actions\n\nIs it good?\n\nclean: the rational thing to do with uncertainty\nsuper hard: the state-space should contain all possible priors\nmathematical cleanness comes with many assumptions\n\nUsed to estimate rather big (mostly linear) models"
  },
  {
    "objectID": "slides/ddp.html#learning-problems-2",
    "href": "slides/ddp.html#learning-problems-2",
    "title": "Discrete Dynamic Programming",
    "section": "Learning problems (2)",
    "text": "Learning problems (2)\n\nReinforcement learning\n\nmodel can be partially or totally unknown\ndecision rule is updated by observing the reward from actions\n\nno priors\n\nsolution does not derive directly from model\n\ncan be used to solve dynamic programming problems\n\n\nGood solutions maximize a criterion similar to lifetime reward but are usually not optimal:\n\nusually evaluated by replaying the game many times\ntradeoff exploration / exploitations"
  },
  {
    "objectID": "slides/ddp.html#finite-horizon-dmdp-1",
    "href": "slides/ddp.html#finite-horizon-dmdp-1",
    "title": "Discrete Dynamic Programming",
    "section": "Finite horizon DMDP",
    "text": "Finite horizon DMDP\nWhen \\(T&lt;\\infty\\). With discrete action the problem can be represented by a tree."
  },
  {
    "objectID": "slides/ddp.html#finite-horizon-dmdp-2",
    "href": "slides/ddp.html#finite-horizon-dmdp-2",
    "title": "Discrete Dynamic Programming",
    "section": "Finite horizon DMDP",
    "text": "Finite horizon DMDP\n\nIntuition: backward induction.\n\nFind optimal policy \\(x_T(s_T)\\) in all terminal states \\(s_T\\). Set \\(V_T(s_T)\\) equal to \\(r(s_T, \\pi_T)\\)\nFor each state \\(s_{k-1}\\in S\\) find \\(x_{k-1}\\in X(s_{k-1})\\) which maximizes \\[V_{k-1}(s_{k-1}) = \\max_{x_{k-1}(s_{k-1})\\in X(s_{k-1})}r(s_{k-1},x_{k-1}) + \\delta \\underbrace{ \\sum_{s_k\\in S} \\pi(s_k | s_{k-1}, x_{k-1} ) V_k(s_k)} _{ \\textit{expected continuation value} }\\]\n\nPolicies \\(x_0(), ... x_T()\\) are Markov-perfect:\n\nthey maximize utility on all subsets of the “game”\nalso from t=0"
  },
  {
    "objectID": "slides/ddp.html#remarks",
    "href": "slides/ddp.html#remarks",
    "title": "Discrete Dynamic Programming",
    "section": "Remarks",
    "text": "Remarks\n\nCan we do better than this naive algorithm?\n\nnot really\nbut we can try to limit \\(S\\) to make the maximization step faster\nexclude a priori some branches in the tree using knowledge of the problem"
  },
  {
    "objectID": "slides/ddp.html#infinite-horizon-dmdp-1",
    "href": "slides/ddp.html#infinite-horizon-dmdp-1",
    "title": "Discrete Dynamic Programming",
    "section": "Infinite horizon DMDP",
    "text": "Infinite horizon DMDP\n\nHorizon is infinite: \\[V(s; x()) =  \\max E_0 \\sum_{t=0}^{\\infty} \\delta^t r(s_t, x_t) \\]\nIntuition:\n\nlet’s consider the finite horizon version \\(T&lt;\\infty\\) and \\(T &gt;&gt; 1\\)\ncompute the solution, increase \\(T\\) until the solution doesn’t change\nin practice: take an initial guess for \\(V_{T}\\) then compute optimal \\(V_{T-1}\\), \\(V_{T_2}\\) and so on, until convergence of the \\(V\\)s"
  },
  {
    "objectID": "slides/ddp.html#infinite-horizon-dmdp-2",
    "href": "slides/ddp.html#infinite-horizon-dmdp-2",
    "title": "Discrete Dynamic Programming",
    "section": "Infinite horizon DMDP (2)",
    "text": "Infinite horizon DMDP (2)\n\nThis is possible, it’s called Successive Approximation or Value Function Iteration\n\nhow fast does it converge? linearly\ncan we do better? yes, quadratically\n\nwith howard improvement steps"
  },
  {
    "objectID": "slides/ddp.html#successive-approximation",
    "href": "slides/ddp.html#successive-approximation",
    "title": "Discrete Dynamic Programming",
    "section": "Successive Approximation",
    "text": "Successive Approximation\n\nConsider the decomposition: \\[V(s; x()) = E_0 \\sum_{t=0}^{\\infty} \\delta^t r(s_t, x_t) = E_0 \\left[ r(s, x(s)) + \\sum_{t=1}^{\\infty} \\delta^t r(s_t, x_t) \\right]\\]\n\nor\n\\[V(s; x()) =  r(s, x(s)) + \\delta \\sum_{s'} p(s'|s,x(s)) V(s'; x()) \\]"
  },
  {
    "objectID": "slides/ddp.html#successive-approximation-2",
    "href": "slides/ddp.html#successive-approximation-2",
    "title": "Discrete Dynamic Programming",
    "section": "Successive Approximation (2)",
    "text": "Successive Approximation (2)\n\nTaking continuation value as given we can certainly improve the value in every state \\(\\tilde{V}\\) by choosing \\(\\tilde{x}()\\) so as to maximize \\[\\tilde{V}(s; x(), \\tilde{x}()) =  r(s, \\tilde{x}(s)) + \\delta \\sum_{s'} \\pi(s'|s,\\tilde{x}(s) )V(s'; x()) \\]\nBy construction: \\(\\forall s, \\tilde{V}(s, \\tilde{x}(), x()) &gt; {V}(s, x())\\)\n\nit is an improvement step\n\nCan \\({V}(s, \\tilde{x}())\\) be worse for some states than \\({V}(s, \\tilde{x}())\\) ?\n\nactually no"
  },
  {
    "objectID": "slides/ddp.html#bellman-equation",
    "href": "slides/ddp.html#bellman-equation",
    "title": "Discrete Dynamic Programming",
    "section": "Bellman equation",
    "text": "Bellman equation\n\nIdea:\n\nit should not be possible to improve upon the optimal solution.\nHence the optimal value \\(V\\) and policy \\(x^{\\star}\\) should satisfy: \\[\\forall s\\in S, V(s) = \\max_{y(s)} r(s, y(s)) + \\delta \\sum_{s^{\\prime}\\in S} \\pi(s^{\\prime}| s, y(s)) V(s^{\\prime})\\] with the maximum attained at \\(x(s)\\).\n\nThis is referred to as the Bellman equation.\nConversely, it is possible to show that a solution to the Bellman equation is also an optimal solution to the initial problem."
  },
  {
    "objectID": "slides/ddp.html#bellman-operator",
    "href": "slides/ddp.html#bellman-operator",
    "title": "Discrete Dynamic Programming",
    "section": "Bellman operator",
    "text": "Bellman operator\n\nThe function \\(G\\) is known as the Bellman operator: \\[G: V \\rightarrow \\max_{y(s)} r(s, y(s)) + \\delta \\sum_{s^{\\prime}\\in S} \\pi(s^{\\prime}| s, y(s)) V(s^{\\prime})\\]\nDefine sequence \\(V_n = G(V_{n-1})\\)\n\nit goes back in time\nbut is not the time-iteration operator\n\nOptimal value is a fixed point of G\nDoes \\(G\\) converges to it ? Yes, if \\(G\\) is a contraction mapping."
  },
  {
    "objectID": "slides/ddp.html#blackwells-theorem",
    "href": "slides/ddp.html#blackwells-theorem",
    "title": "Discrete Dynamic Programming",
    "section": "Blackwell’s theorem",
    "text": "Blackwell’s theorem\n\nLet \\(X\\subset R^n\\) and let \\(\\mathcal{C}(X)\\) be a space of bounded functions \\(f: X\\rightarrow  R\\), with the sup-metric. \\(B: \\mathcal{C}(X)\\rightarrow \\mathcal{C}(X)\\) be an operator satisfying two conditions:\n\n(monotonicity) if \\(f,g \\in \\mathcal{C}(X)\\) and \\(\\forall x\\in X, f(x)\\leq g(x)\\) then\n\n\\(\\forall x \\in X (Bf)(x)\\leq(Bg)(x)\\)\n\n(discounting) there exists some \\(\\delta\\in]0,1[\\) such that: \\(B.(f+a)(x)\\leq (B.f)(x) + \\delta a, \\forall f \\in \\mathcal{C}(X), a\\geq 0, x\\in X\\)\n\nThen \\(B\\) is a contraction mapping with modulus \\(\\delta\\)."
  },
  {
    "objectID": "slides/ddp.html#successive-approximation-1",
    "href": "slides/ddp.html#successive-approximation-1",
    "title": "Discrete Dynamic Programming",
    "section": "Successive Approximation",
    "text": "Successive Approximation\n\nUsing the Blackwell’s theorem, we can prove the Bellman operator is a contraction mapping (do it).\nThis justifies the Value Function Iteration algorithm:\n\nchoose an initial \\(V_0\\)\ngiven \\(V_n\\) compute \\(V_{n+1} = G(V_n)\\)\niterate until \\(|V_{n+1}- V_n|\\leq \\eta\\)\n\nPolicy rule is deduced from \\(V\\) as the maximand in the Bellman step"
  },
  {
    "objectID": "slides/ddp.html#successive-approximation-2-1",
    "href": "slides/ddp.html#successive-approximation-2-1",
    "title": "Discrete Dynamic Programming",
    "section": "Successive Approximation (2)",
    "text": "Successive Approximation (2)\n\nNote that convergence of \\(V_n\\) is geometric\nBut \\(x_n\\) converges after a finite number of iterations (\\(X\\) is finite)\n\nsurely the latest iterations are suboptimal\nthey serve only to evaluate the value of \\(x^{\\star}\\)\n\nIn fact:\n\n\\(V_n\\) is never the value of \\(x_n()\\)\nshould we try to keep both in sync?"
  },
  {
    "objectID": "slides/ddp.html#policy-iteration-for-dmdp",
    "href": "slides/ddp.html#policy-iteration-for-dmdp",
    "title": "Discrete Dynamic Programming",
    "section": "Policy iteration for DMDP",
    "text": "Policy iteration for DMDP\n\nChoose initial policy \\(x_0()\\)\nGiven initial guess \\(x_n()\\)\n\ncompute the value function \\(V_n=V( ;x_n)\\) which satisfies\n\\(\\forall s,  V_n(s) = r(s, x_n(s)) + \\delta \\sum_{s'} \\pi(s'| s, x_n(s)) V_n(s')\\)\nimprove policy by maximizing in \\(x_n()\\) \\[\\max_{x_n()} r(s, x_n(s)) + \\delta \\sum_{s^{\\prime}\\in S} \\pi(s^{\\prime}| s, x_n(s)) V_{n-1}(s^{\\prime})\\]\n\nRepeat until convergence, i.e. \\(x_n=x_{n+1}\\)\nOne can show the speed of convergence (for \\(V_n\\)) is quadratic\n\nit corresponds the Newton-Raphson steps applied to \\(V\\rightarrow G(V)-V\\)\nwe’ll see Newton-Raphson in the next session (on optimization)"
  },
  {
    "objectID": "slides/ddp.html#how-do-we-compute-the-value-of-a-policy",
    "href": "slides/ddp.html#how-do-we-compute-the-value-of-a-policy",
    "title": "Discrete Dynamic Programming",
    "section": "How do we compute the value of a policy?",
    "text": "How do we compute the value of a policy?\n\nGiven \\(x_n\\), goal is to find \\(V_n(s)\\) in \\[\\forall s,  V_n(s) = r(s, x_n(s)) + \\delta \\sum_{s'} \\pi(s'| s, x_n(s)) V_n(s')\\]\nTwo(three) approaches:\n\nsimulate the policy rule and compute \\(E\\left[ \\sum_t \\delta^t r(s_t, x_t) \\right]\\) with Monte-Carlo draws\nsuccessive approximation:\n\nput \\(V_k\\) in the rhs and recompute the lhs \\(V_{k+1}\\), replace \\(V_k\\) by \\(V_{k+1}\\) and iterate until convergence\n\nsolve a linear system in \\(V_n\\)\n\nFor 2 and 3 it helps representing a linear operator \\(M\\) such that \\(V_{n+1} = R_n + \\delta M_n .  V_n\\)"
  },
  {
    "objectID": "slides/ddp.html#idea",
    "href": "slides/ddp.html#idea",
    "title": "Discrete Dynamic Programming",
    "section": "Idea",
    "text": "Idea\n\nMcCall model:\n\nwhen should an unemployed person accept a job offer?\nchoice between:\n\nwait for a better offer (and receive low unemp. benefits)\naccept a suboptimal job offer\n\n\nWe present a variant of it, with a small probability of loosing a job."
  },
  {
    "objectID": "slides/ddp.html#formalization",
    "href": "slides/ddp.html#formalization",
    "title": "Discrete Dynamic Programming",
    "section": "Formalization",
    "text": "Formalization\n\nWhen unemployed in date, a job-seeker\n\nconsumes unemployment benefit \\(c_t = \\underline{c}\\)\nreceives in every date \\(t\\) a job offer \\(w_t\\)\n\n\\(w_t\\) is i.i.d.,\ntakes values \\(w_1, w_2, w_3\\) with probabilities \\(p_1, p_2, p_3\\)\n\nif job-seeker accepts, becomes employed at rate \\(w_t\\) in the next period\nelse he stays unemployed\n\nWhen employed at rate \\(w\\)\n\nworker consumes salary \\(c_t = w\\)\nwith small probability \\(\\lambda&gt;0\\) looses his job:\n\nstarts next period unemployed\n\notherwise stays employed at same rate\n\nObjective: \\(\\max E_0 \\left\\{ \\sum \\beta^t \\log(w_t) \\right\\}\\)"
  },
  {
    "objectID": "slides/ddp.html#states-reward",
    "href": "slides/ddp.html#states-reward",
    "title": "Discrete Dynamic Programming",
    "section": "States / reward",
    "text": "States / reward\n\nWhat are the states?\n\nemployement status: Unemployed / Employed\nif Unemployed:\n\nthe level \\(w\\in {w_1, w_2, w_3}\\) of the salary that is currently proposed\n\nif Employed:\n\nthe level \\(w\\in {w_1, w_2, w_3}\\) at which worker was hired\n\ncurrent state, can be represented by a 2x3 index\n\nWhat are the actions?\n\nif Unemployed:\n\nreject (false) / accept (true)\n\nif Employed: None\nactions (when unemployed) are represented by a 3 elements binary vector\n\nWhat is the (intratemporal) reward?\n\nif Unemployed: \\(U(c)\\)\nif Employed at rate w: \\(U(w)\\)\nhere it doesn’t depend on the action"
  },
  {
    "objectID": "slides/ddp.html#value-function",
    "href": "slides/ddp.html#value-function",
    "title": "Discrete Dynamic Programming",
    "section": "Value function",
    "text": "Value function\n\\(\\newcommand{\\E}{\\mathbb{E}}\\)\n\nWhat is the value of being in a given state?\nIf Unemployed, facing current offer \\(w\\):\n\\[V^U(w) = U(\\underline{c}) + \\max_{a} \\begin{cases} \\beta V^E(w) & \\text{if $a(w)$ is true} \\\\ \\beta  E_{w'}\\left[ V^U(w^{\\prime}) \\right]  & \\text{if $a(w)$ is false} \\end{cases}\\]\nIf Employed, at rate \\(w\\) \\[V^E(w) = U(w) +  (1-\\lambda) \\beta V^E(w) +  \\lambda \\beta E_{w'}\\left[ V^U(w^{\\prime}) \\right] \\]\nWe can represent value as two functions \\(V^U\\) and \\(V^E\\) of the states as\n\ntwo vectors of Floats, with three elements (recall: value-function is real valued)"
  },
  {
    "objectID": "slides/ddp.html#value-function-iteration",
    "href": "slides/ddp.html#value-function-iteration",
    "title": "Discrete Dynamic Programming",
    "section": "Value function iteration",
    "text": "Value function iteration\n\nTake a guess for value function \\(\\tilde{V^E}\\), \\(\\tilde{V^U}\\), tomorrow\nUse it to compute value function today: \\[V^U(w) = U(\\underline{c}) + \\max_{a(w)} \\begin{cases} \\beta \\tilde{V}^E(w) & \\text{if $a(w)$ is true} \\\\ \\beta  E_{w'}\\left[ \\tilde{V}^U(w^{\\prime}) \\right]  & \\text{if $a(w)$ is false} \\end{cases}\\] \\[V^E(w) = U(w) +  (1-\\lambda) \\beta \\tilde{V}^E(w) +  \\lambda \\beta E_{w'}\\left[\\tilde{V}^U(w^{\\prime}) \\right] \\]\n\\((\\tilde{V}^E, \\tilde{V}^U)\\mapsto (V^E, V^U)\\) is one value iteration step\nNote that we don’t have to keep track of policies tomorrow\n\nall information about future decisions is contained in \\(\\tilde{V}^E, \\tilde{V}^U\\)\nbut we can keep track of current policy: \\(a(w): \\arg\\max \\cdots\\)"
  },
  {
    "objectID": "slides/ddp.html#value-evaluation",
    "href": "slides/ddp.html#value-evaluation",
    "title": "Discrete Dynamic Programming",
    "section": "Value evaluation",
    "text": "Value evaluation\n\nSuppose we take a policy \\(a(w)\\) as given. What is the value of following this policy forever?\nThe value function \\(V_a^E\\), \\(V_a^U\\) satisfies \\[V_a^U(w) = U(\\underline{c}) + \\begin{cases} \\beta \\tilde{V}^E_a(w) & \\text{if $a(w)$ is true} \\\\ \\beta  E_{w'}\\left[ \\tilde{V}^U_a(w^{\\prime}) \\right]  & \\text{if $a(w)$ is false} \\end{cases}\\] \\[V_a^E(w) = U(w) +  (1-\\lambda) \\beta \\tilde{V}^E_a(w) +  \\lambda \\beta E_{w'}\\left[\\tilde{V}^U_a(w^{\\prime}) \\right] \\]\nNote the absence of the max function: we don’t reoptimize"
  },
  {
    "objectID": "slides/ddp.html#value-evaluation-2",
    "href": "slides/ddp.html#value-evaluation-2",
    "title": "Discrete Dynamic Programming",
    "section": "Value evaluation (2)",
    "text": "Value evaluation (2)\n\nHow do you compute value of policy \\(a(w)\\) recursively?\nIterate: \\((\\tilde{V}^E_a, \\tilde{V}^U)\\mapsto (V^E_a, V^U_a)\\) \\[V_a^U(w) \\leftarrow U(\\underline{c}) + \\begin{cases} \\beta \\tilde{V}^E_a(w) & \\text{if $a(w)$ is true} \\\\ \\beta  E_{w'}\\left[ \\tilde{V}^U_a(w^{\\prime}) \\right]  & \\text{if $a(w)$ is false} \\end{cases}\\] \\[V_a^E(w) \\leftarrow U(w) +  (1-\\lambda) \\beta \\tilde{V}^E_a(w) +  \\lambda \\beta E_{w'}\\left[\\tilde{V}^U_a(w^{\\prime}) \\right] \\]\nNote the absence of the max function:\n\nwe don’t reoptimize\nwe we keep the same policy all along"
  },
  {
    "objectID": "slides/ddp.html#policy-iteration",
    "href": "slides/ddp.html#policy-iteration",
    "title": "Discrete Dynamic Programming",
    "section": "Policy iteration",
    "text": "Policy iteration\n\nstart with policy \\(a(w)\\)\nevaluate the value of this policy \\(V^E_a, V^U_a\\)\ncompute the optimal policy \\(a(w)\\) in the Bellman iteration\n\nhere: \\(a(w) = \\arg\\max_{a(w)} \\begin{cases} \\beta \\tilde{V}^E(w)\\\\ \\beta  E_{a'}\\left[ \\tilde{V}^U(a^{\\prime}) \\right] \\end{cases}\\)\n\niterate until \\(a(w)\\) converges"
  },
  {
    "objectID": "slides/session_2/index.html#life-of-a-computational-economist",
    "href": "slides/session_2/index.html#life-of-a-computational-economist",
    "title": "Convergence of Sequences",
    "section": "Life of a computational economist",
    "text": "Life of a computational economist",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#life-of-a-computational-economist-1",
    "href": "slides/session_2/index.html#life-of-a-computational-economist-1",
    "title": "Convergence of Sequences",
    "section": "Life of a computational economist",
    "text": "Life of a computational economist\nVideo\n\n\nWe spend a lot of time waiting for algorithms to converge!\n\n\nsolution 1: program better\n\nsolution 2: better algorithms\n\neven better: understand convergence properties (information about the model)",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#recursive-sequence",
    "href": "slides/session_2/index.html#recursive-sequence",
    "title": "Convergence of Sequences",
    "section": "Recursive sequence",
    "text": "Recursive sequence\nConsider a function \\(f: R\\rightarrow R\\) and a recursive sequence \\((x_n)\\) defined by \\(x_0\\) and \\(x_n = f(x_{n-1})\\).\nWe want to compute a fixed point of \\(f\\) and study its properties.",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#example-growth-model",
    "href": "slides/session_2/index.html#example-growth-model",
    "title": "Convergence of Sequences",
    "section": "Example: growth model",
    "text": "Example: growth model\n\n\n\nSolow growth model:\n\ncapital accumulation: \\[k_t = (1-\\delta)k_{t-1} + i_{t-1}\\]\nproduction: \\[y_t = k_t^\\alpha\\]\nconsumption: \\[c_t = (1-{\\color{red}s})y_t\\] \\[i_t = s y_t\\]\n\n\n\n\nFor a given value of \\({\\color{red} s}\\in\\mathbb{R}^{+}\\) ( \\({\\color{red} s}\\) is a decision rule) \\[k_{t+1} = f(k_t, {\\color{red} s})\\]\n\nbackward-looking iterations\nSolow hypothesis: saving rate is invariant\n\n\n\nQuestions:\n\nWhat is the steady-state?\nCan we characterize the transition back the steady-state?\nCharacterize the dynamics close to the steady-state?\nwhat is the optimal \\(s\\) ?",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#another-example-linear-new-keynesian-model",
    "href": "slides/session_2/index.html#another-example-linear-new-keynesian-model",
    "title": "Convergence of Sequences",
    "section": "Another example: linear new keynesian model",
    "text": "Another example: linear new keynesian model\n\n\n\nBasic New Keynesian model (full derivation if curious )\n\nnew philips curve (PC):\\[\\pi_t = \\beta \\mathbb{E}_t \\pi_{t+1} + \\kappa y_t\\]\ndynamic investment-saving equation (IS):\\[y_t = \\beta \\mathbb{E}_t y_{t+1} - \\frac{1}{\\sigma}(i_t - \\mathbb{E}_t(\\pi_{t+1}) ) - {\\color{green} z_t}\\]\ninterest rate setting (taylor rule): \\[i_t = \\alpha_{\\pi} \\pi_t + \\alpha_{y} y_t\\]\n\n\nSolving the system:\n\nsolution: \\(\\begin{bmatrix}\\pi_t \\\\\\\\ y_t \\end{bmatrix} = {\\color{red} c} z_t\\)\n\n\n\n\n\nforward looking:\n\ntake \\(\\begin{bmatrix}\\pi_{t+1} \\\\\\\\ y_{t+1} \\end{bmatrix} = {\\color{red} {c_n}} z_{t+1}\\)\ndeduce \\(\\begin{bmatrix}\\pi_{t} \\\\\\\\ y_{t} \\end{bmatrix} = {\\color{red} {c_{n+1}}} z_{t}\\)\n\\(\\mathcal{T}: \\underbrace{c_{n}}_{t+1: \\; \\text{tomorrow}} \\rightarrow \\underbrace{c_{n+1}}_{t: \\text{today}}\\) is the time-iteration operator (a.k.a. Coleman operator)\n\n\n\n\n\n\nQuestions:\n\nWhat is the limit to \\(c_{t+1} = \\mathcal{T} c_n\\) ?\nUnder wich conditions (on \\(\\alpha_{\\pi}, \\alpha_y\\)) is it convergent ?\n\ndeterminacy conditions\ninterpretation: does the central bank manage to control inflation expectations?",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#recursive-series-2",
    "href": "slides/session_2/index.html#recursive-series-2",
    "title": "Convergence of Sequences",
    "section": "Recursive series (2)",
    "text": "Recursive series (2)\n\nWait: does a fixed point exist?\n\nwe’re not very concerned by the existence problem here\nwe’ll be happy with local conditions (existence, uniqueness) around a solution\n\nWe can assume there is an interval such that \\(f([a,b])\\subset[a,b]\\). Then we know there exists \\(x\\) in \\([a,b]\\) such that \\(f(x)=x\\). But there can be many such points.",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#example-growth-model-with-multiple-fixed-points",
    "href": "slides/session_2/index.html#example-growth-model-with-multiple-fixed-points",
    "title": "Convergence of Sequences",
    "section": "Example: growth model with multiple fixed points",
    "text": "Example: growth model with multiple fixed points\n\n\n\nIn the growth model, if we change the production function: \\(y=k^{\\alpha}\\) for a nonconvex/nonmonotonic one, we can get multiple fixed points.",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#convergence",
    "href": "slides/session_2/index.html#convergence",
    "title": "Convergence of Sequences",
    "section": "Convergence",
    "text": "Convergence\n\nHow do we characterize behaviour around \\(x\\) such that \\(f(x)=x\\)?\n\nif \\(|f^{\\prime}(x)|&gt;1\\): series is unstable and will not converge to \\(x\\) except by chance\nif \\(|f^{\\prime}(x)|&lt;1\\): \\(x\\) is a stable fixed point\nif \\(|f^{\\prime}(x)|=1\\): ??? (look at higher order terms, details ↓)",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#section",
    "href": "slides/session_2/index.html#section",
    "title": "Convergence of Sequences",
    "section": "",
    "text": "To get the intution about local convergence assume, you have an initial point \\(x_n\\) close to the steady state and consider the following expresion:\n\\(x_{n+1} - x = f(x_n) - f(x) = f^{\\prime}(x) (x_n-x) + o( (x_n-x) )\\)\nIf one sets aside the error term (which one can do with full mathematical rigour), the dynamics for very small perturbations are given by:\n\\(|x_{n+1} - x| = |f^{\\prime}(x)| |x_n-x|\\)\nWhen \\(|f^{\\prime}(x)|&lt;1\\), the distance to the target decreases at each iteration and we have convergence. When \\(|f^{\\prime}(x)|&gt;1\\) there is local divergence.",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#section-1",
    "href": "slides/session_2/index.html#section-1",
    "title": "Convergence of Sequences",
    "section": "",
    "text": "What about the case \\(|f^{\\prime}(x)=1|\\)? Many cases are possible. To distinguish between them, one needs to inspect higher order derivatives.\n\nwhen \\(|f^{\\prime}(x)=1|\\), \\(|f^{\\prime\\prime}(x)|\\neq 0\\) the series will convergence, only if \\((x_0-x)f^{\\prime\\prime}(x)&lt;0\\), i.e. starting from one side of the fixed point. The steady-state is not stable.\nWhen \\(|f^{\\prime}(x)=1|\\), \\(|f^{\\prime\\prime}(x)| = 0\\), \\(|f^{\\prime \\prime\\prime}(x)|\\neq 0\\) the series will converge, only if \\(f^{\\prime}(x)(f^{\\prime\\prime\\prime}(x))&lt;1\\)\n\nIn general, there is stability only if the function \\(f\\) is crossing the 45 degrees line (when \\(f^ {\\prime}(x)=1)\\), or the -45 degrees line (when \\(f^ {\\prime}(x)=1\\))\nMathematically, this involves, that: - the first non-zero coefficient \\(f^{k}(x)\\) with \\(k&gt;1\\) has odd order (\\(k\\) odd) - it has the right sign\n\n\n[TODO: add graph]",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#change-the-problem",
    "href": "slides/session_2/index.html#change-the-problem",
    "title": "Convergence of Sequences",
    "section": "Change the problem",
    "text": "Change the problem\n\nSometimes, we are interested in tweaking the convergence speed:\n\n\\[x_{n+1} = (1-\\lambda) x_n + \\lambda f(x_n)\\]\n\n\\(\\lambda\\) is the learning rate:\n\n\\(\\lambda&gt;1\\): acceleration\n\\(\\lambda&lt;1\\): dampening\n\nWe can also replace the function by another one \\(g\\) such that \\(g(x)=x\\iff f(x)=x\\), for instance:\n\n\\[g(x)=x-\\frac{f(x)-x}{f^{\\prime}(x)-1}\\]",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#dynamics-around-a-stable-point",
    "href": "slides/session_2/index.html#dynamics-around-a-stable-point",
    "title": "Convergence of Sequences",
    "section": "Dynamics around a stable point",
    "text": "Dynamics around a stable point\n\nWe can write successive approximation errors:\n\n\\[|x_t - x_{t-1}| =  | f(x_{t-1}) - f(x_{t-2})| \\]\n\\[|x_t - x_{t-1}| \\sim |f^{\\prime}(x_{t-1})| |x_{t-1} - x_{t-2}| \\]\n\nRatio of successive approximation errors \\[\\lambda_t =  \\frac{ |x_{t} - x_{t-1}| } { |x_{t-1} - x_{t-2}|}\\]\n\\(\\lambda_t \\rightarrow | f^{\\prime}(\\overline{x}) |\\)",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#dynamics-around-a-stable-point-2",
    "href": "slides/session_2/index.html#dynamics-around-a-stable-point-2",
    "title": "Convergence of Sequences",
    "section": "Dynamics around a stable point (2)",
    "text": "Dynamics around a stable point (2)\nHow do we derive an error bound? Suppose that we have \\(\\overline{\\lambda}&gt;|f^{\\prime}(x_k)|\\) for all \\(k\\geq k_0\\):\n\\[|x_t - x| \\leq |x_t - x_{t+1}| + |x_{t+1} - x_{t+2}| + |x_{t+2} - x_{t+3}| + ... \\]\n\\[|x_t - x| \\leq |x_t - x_{t+1}| + |f(x_{t}) - f(x_{t+1})| + |f(x_{t+1}) - f(x_{t+2})| + ... \\]\n\\[|x_t - x| \\leq |x_t - x_{t+1}| + \\overline{\\lambda} |x_t - x_{t+1}| + \\overline{\\lambda}^2 |x_t - x_{t+1}| + ... \\]\n\\[|x_t - x| \\leq \\frac{1} {1-\\overline{\\lambda}} | x_t - x_{t+1} |\\]",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#how-do-we-improve-convergence",
    "href": "slides/session_2/index.html#how-do-we-improve-convergence",
    "title": "Convergence of Sequences",
    "section": "How do we improve convergence ?",
    "text": "How do we improve convergence ?\n\\[\\frac{|x_{t-1} - x_{t-2}|} {|x_t - x_{t-1}|} \\sim |f^{\\prime}(x_{t-1})|  \\]\ncorresponds to the case of linear convergence (kind of slow).",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#aitkens-extrapolation",
    "href": "slides/session_2/index.html#aitkens-extrapolation",
    "title": "Convergence of Sequences",
    "section": "Aitken’s extrapolation",
    "text": "Aitken’s extrapolation\nWhen convergence is geometric, we have: \\[ \\lim_{x\\rightarrow \\infty}\\frac{ x_{t+1}-x}{x_t-x} = \\lambda \\in \\mathbb{R}^{\\star}\\]\nWhich implies:\n\\[\\frac{ x_{t+1}-x}{x_t-x} \\sim \\frac{ x_{t}-x}{x_{t-1}-x}\\]",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#aitkens-extrapolation-2",
    "href": "slides/session_2/index.html#aitkens-extrapolation-2",
    "title": "Convergence of Sequences",
    "section": "Aitken’s extrapolation (2)",
    "text": "Aitken’s extrapolation (2)\nTake \\(x_{t-1}, x_t\\) and \\(x_{t+1}\\) as given and solve for \\(x\\):\n\\[x = \\frac{x_{t+1}x_{t-1} - x_{t}^2}{x_{t+1}-2x_{t} + x_{t-1}}\\]\nor after some reordering\n\\[x = x_{t-1} - \\frac{(x_t-x_{t-1})^2}{x_{t+1}-2 x_t + x_{t-1}}\\]",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#steffensens-method",
    "href": "slides/session_2/index.html#steffensens-method",
    "title": "Convergence of Sequences",
    "section": "Steffensen’s Method:",
    "text": "Steffensen’s Method:\n\nstart with a guess \\(x_0\\), compute \\(x_1=f(x_0)\\) and \\(x_2=f(x_1)\\)\nuse Aitken’s guess for \\(x^{\\star}\\). If required tolerance is met, stop.\notherwise, set \\(x_0 = x^{\\star}\\) and go back to step 1.\n\nIt can be shown that the sequence generated from Steffensen’s method converges quadratically, that is\n\\(\\lim_{t\\rightarrow\\infty} \\frac{x_{t+1}-x_t}{(x_t-x_{t-1})^2} \\leq M  \\in \\mathbb{R}^{\\star}\\)",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#convergence-speed",
    "href": "slides/session_2/index.html#convergence-speed",
    "title": "Convergence of Sequences",
    "section": "Convergence speed",
    "text": "Convergence speed\nRate of convergence of series \\(x_t\\) towards \\(x^{\\star}\\) is:\n\nlinear: \\[{\\lim}_{t\\rightarrow\\infty} \\frac{|x_{t+1}-x^{\\star}|}{|x_{t}-x^{\\star}|} = \\mu \\in R^+\\]\nsuperlinear: \\[{\\lim}_{t\\rightarrow\\infty} \\frac{|x_{t+1}-x^{\\star}|}{|x_{t}-x^{\\star}|} = 0\\]\nquadratic: \\[{\\lim}_{t\\rightarrow\\infty} \\frac{|x_{t+1}-x^{\\star}|}{|x_{t}-x^{\\star}|^{\\color{red}2}} = \\mu \\in R^+\\]",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#convergence-speed-1",
    "href": "slides/session_2/index.html#convergence-speed-1",
    "title": "Convergence of Sequences",
    "section": "Convergence speed",
    "text": "Convergence speed\nRemark: in the case of linear convergence:\n\\[{\\lim}_{t\\rightarrow\\infty} \\frac{|x_{t+1}-x_t|}{|x_{t}-x_{t-1}|} = \\mu \\in R^+ \\iff {\\lim}_{t\\rightarrow\\infty} \\frac{|x_{t+1}-x^{\\star}|}{|x_{t}-x^{\\star}|}=\\frac{1}{1-\\mu}\\]",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#in-practice",
    "href": "slides/session_2/index.html#in-practice",
    "title": "Convergence of Sequences",
    "section": "In practice",
    "text": "In practice\n\nProblem:\n\nSuppose one is trying to find \\(x\\) solving the model \\(G(x)=0\\)\nAn iterative algorithm provides a function \\(f\\) defining a recursive series \\(x_{t+1}\\).\n\nThe best practice consists in monitoring at the same time:\n\nthe success criterion: \\[\\epsilon_n = |G(x_n)|\\]\n\n\nhave you found the solution?\n\nthe successive approximation errors \\[\\eta_n = |x_{n+1} - x_n|\\]\n\n\nare you making progress?\n\nthe ratio of successive approximation errors \\[\\lambda_n = \\frac{\\eta_n}{\\eta_{n-1}}\\]\n\n\nwhat kind of convergence? (if \\(|\\lambda_n|&lt;1\\): OK, otherwise: ❓)",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/discretization.html#several-kinds-of-discretization",
    "href": "slides/discretization.html#several-kinds-of-discretization",
    "title": "Discretization",
    "section": "Several kinds of Discretization",
    "text": "Several kinds of Discretization\n\napproximate operator with a finite number of iterations:\n\ncompute \\(\\int_a^b f(x) dx\\)\ncompute \\(E_\\omega f(\\omega)\\)\n\nrepresent an infinite dimensional object with a finite set of parameters:\n\n\\(f \\equiv (f(x_i))_{i=1:N}\\) with \\(x_i=a+\\frac{i-1}{N-1}(b-a)\\)\n\ndiscretize arguments\n\n\\(\\omega \\equiv (\\mu_i, \\omega_i)_{i=1:N}\\) such that \\(E_\\omega f(\\omega) \\approx \\sum_i \\mu_i f(\\omega_i)\\) (quantization)\n\ndiscretize continous process by a discrete one:\n\ncontinuous markov chain to discrete markov Chain"
  },
  {
    "objectID": "slides/discretization.html#discretizing-an-ar1-1",
    "href": "slides/discretization.html#discretizing-an-ar1-1",
    "title": "Discretization",
    "section": "Discretizing an AR1",
    "text": "Discretizing an AR1\n\nTake \\(AR1\\) process \\[x_t = \\rho x_{t-1} + \\epsilon_t\\]\n\nwith \\(|\\rho| &lt;1\\) and \\(\\epsilon \\sim N(0,\\sigma)\\)\n\nCan we replace \\((x_t)\\) by a discrete markov chain?\n\napproximate version:\n\ngood time \\(x^g\\) and bad time \\(x^b\\). Probability \\(\\pi\\) of staying in the same, \\(1-\\pi\\) of switching.\n\ntwo systematic methods (available in QuantEcon.jl)\n\nTauchen\nRouwenhorst"
  },
  {
    "objectID": "slides/discretization.html#ar1-tauchen",
    "href": "slides/discretization.html#ar1-tauchen",
    "title": "Discretization",
    "section": "AR1: Tauchen",
    "text": "AR1: Tauchen\n\nThe unconditional distribution of an AR1 is a normal law \\(\\mathcal{N}(0,\\frac{\\sigma}{\\sqrt{1-\\rho^2}})\\)\nChoose \\(m&gt;0\\), typically \\(m=3\\)\nBound the process: \\(\\underline{x} = -m \\frac{\\sigma}{\\sqrt{1-\\rho^2}}\\) and \\(\\overline{x} = m \\frac{\\sigma}{\\sqrt{1-\\rho^2}}\\)\nDefine the \\(N\\) discretized points (\\(i\\in[1,n]\\)): \\(y_i = \\underline{x} + \\frac{i-1}{N-1}(\\overline{x}-\\underline{x})\\)\nDefine the transitions:\n\n\\[\\begin{eqnarray}\n\\pi_{ij} & = & prob \\left( y_{t+1}=y_j|y_t=y_i\\right)\\\\\n         & = & prob \\left( |y_{t+1}-x_j| = \\inf_k |y_{t+1}-x_k| \\left| y_t=y_i \\right. \\right)\n\\end{eqnarray}\\]"
  },
  {
    "objectID": "slides/discretization.html#ar1-tauchen-2",
    "href": "slides/discretization.html#ar1-tauchen-2",
    "title": "Discretization",
    "section": "AR1: Tauchen (2)",
    "text": "AR1: Tauchen (2)\n\nFormulas \\(\\delta=\\frac{\\overline{x}-\\underline{x}}{N}\\):\n\nif \\(1&lt;k&lt;N-1\\)\n\\[\\pi_{jk} = F(\\frac{y_k + \\delta/2-\\rho y_j}{\\sigma_{\\epsilon}}) - F(y_k + \\delta/2-\\rho y_j)\\]\nif \\(k=1\\)\n\\[\\pi_{j} = F(\\frac{y_k + \\delta/2-\\rho y_j}{\\sigma_{\\epsilon}}) \\]\nif \\(k=N\\)\n\\[\\pi_{j} = 1- F(\\frac{y_k - \\delta/2-\\rho y_j}{\\sigma_{\\epsilon}}) \\]"
  },
  {
    "objectID": "slides/discretization.html#how-to-assess-the-quality-of-approximation",
    "href": "slides/discretization.html#how-to-assess-the-quality-of-approximation",
    "title": "Discretization",
    "section": "How to assess the quality of approximation ?",
    "text": "How to assess the quality of approximation ?\n\ncompare generated stationary moments between discretized process and true AR1:\n\nE(), Var(), ACor()\n\nby looking at the exact ergodic distribution or by doing some simulations\nnot very precise when then process is very persistent \\(\\rho\\approx 1\\)"
  },
  {
    "objectID": "slides/discretization.html#rouvenhorst-method-1",
    "href": "slides/discretization.html#rouvenhorst-method-1",
    "title": "Discretization",
    "section": "Rouvenhorst method (1)",
    "text": "Rouvenhorst method (1)\n\nN = 2\n\nchoose \\(y_1=-\\psi\\), \\(y_2=\\psi\\)\ndefine transition matrix: \\[\\Theta_2 = \\begin{bmatrix}\np & 1-p\\\\\\\\\n1-q & q\n\\end{bmatrix}\\]\nchoose \\(p\\), \\(q\\) and \\(\\psi\\) to match some moments: \\(E()\\), \\(Var()\\), \\(ACor()\\)\n\nthey can be computed analytically for AR1 and for discretized version."
  },
  {
    "objectID": "slides/discretization.html#rouvenhorst-method-2",
    "href": "slides/discretization.html#rouvenhorst-method-2",
    "title": "Discretization",
    "section": "Rouvenhorst method (2)",
    "text": "Rouvenhorst method (2)\n\nN &gt;2 \\[\\Theta_N =\np \\begin{bmatrix}  \n\\Theta_{N-1}  & 0\\\\\\\\\n0 & 0\n\\end{bmatrix} +\n(1-p) \\begin{bmatrix}  \n0 & \\Theta_{N-1} \\\\\\\\\n0 & 0\n\\end{bmatrix} +\n(1-q) \\begin{bmatrix}  \n0 & 0\\\\\\\\\n\\Theta_{N-1} & 0\n\\end{bmatrix} +\nq \\begin{bmatrix}  \n0 & 0\\\\\\\\\n0 & \\Theta_{N-1}\n\\end{bmatrix}\n\\]\nNormalize all lines"
  },
  {
    "objectID": "slides/discretization.html#rouvenhorst-method-3",
    "href": "slides/discretization.html#rouvenhorst-method-3",
    "title": "Discretization",
    "section": "Rouvenhorst method (3)",
    "text": "Rouvenhorst method (3)\n\nProcedure converges to Bernouilli distribution.\nMoments can be computed in closed form:\n\n\\(E() = \\frac{(q-p)\\psi}{2-(p+q)}\\)\n\\(Var() = \\psi^2 \\left[ 1-4 s (1-s) + \\frac{4s(1-s)}{N-1}\\right]\\)\n\\(Acor()= p+q-1\\)\n\nRouwenhorst method performs better for highly correlated processes"
  },
  {
    "objectID": "slides/discretization.html#common-problem",
    "href": "slides/discretization.html#common-problem",
    "title": "Discretization",
    "section": "Common problem:",
    "text": "Common problem:\n\nGiven \\(f\\), and an iid process \\(\\epsilon \\sim N(0,\\sigma^2)\\), how to approximate \\(E_{\\epsilon} f(\\epsilon)\\) ?\nIdeas:\n\ndraw lots of random \\((\\epsilon\\_n)\\_{n=1:N}\\) and compute \\[\\frac{1}{N}\\sum_{n=1}^N f(\\epsilon_n)\\]\n\naka Monte-Carlo simulations\n\ngiven a method to approximate integrals, compute \\[\\int_{u=-\\infty}^{\\infty} f(u) \\mu(u) du\\] with \\(\\mu(u)=\\frac{1}{\\sigma\\sqrt{2 \\pi}}e^{-\\frac{u^2}{2\\sigma^2}}\\)\ndiscretize (or quantize) the signal \\(\\epsilon\\) as \\((w_i, \\epsilon_i)_{i=1:N}\\) and compute:\n\n\n\\[\\frac{1}{N} \\sum_n w_n f(\\epsilon_n)\\]"
  },
  {
    "objectID": "slides/discretization.html#whats-wrong-with-monte-carlo-simulations",
    "href": "slides/discretization.html#whats-wrong-with-monte-carlo-simulations",
    "title": "Discretization",
    "section": "What’s wrong with Monte-Carlo Simulations?",
    "text": "What’s wrong with Monte-Carlo Simulations?\n\nLet’s take an exemple:\n\nconsumption is \\(C(\\epsilon)=U(e^{\\epsilon})\\)\nwith \\({\\sigma}\\_{\\epsilon}=0.05\\) and \\(U(x)=\\frac{x^{1-\\gamma}}{1-\\gamma}\\) and \\(\\gamma=40\\).\n\nLet’s compute \\(E_{\\epsilon}(C(\\epsilon))\\) precisely.\nDiscuss value of \\(\\gamma\\): is it crazy? (risk return)"
  },
  {
    "objectID": "slides/discretization.html#whats-wrong-with-monte-carlo-simulations-1",
    "href": "slides/discretization.html#whats-wrong-with-monte-carlo-simulations-1",
    "title": "Discretization",
    "section": "What’s wrong with Monte-Carlo Simulations?",
    "text": "What’s wrong with Monte-Carlo Simulations?\nCompute expectation\n# imports:\nusing Distributions: Normal\n\n# define the model\nσ = 0.05; γ = 40\nU(x)=(x^(-γ))/(-γ)\nC(e) = U(exp(e))\n\n# create distributions\ndis = Normal(0,σ)      \nE_ϵ(f;N=1000) = sum(f(rand(dis)) for i=1:N)/N\n\nNVec = [1000, 5000, 10000, 15000, 20000]\nvals = [E_ϵ(C; N=i) for i=NVec]\njulia&gt; vals = [E_ϵ(C; N=i) for i=NVec\n5-element Array{Float64,1}:\n -0.17546927855215824\n -0.2906119630309043\n -0.17924501776041424\n -0.1826805612086024\n -0.181184208323609"
  },
  {
    "objectID": "slides/discretization.html#whats-wrong-with-monte-carlo-simulations-2",
    "href": "slides/discretization.html#whats-wrong-with-monte-carlo-simulations-2",
    "title": "Discretization",
    "section": "What’s wrong with Monte-Carlo Simulations?",
    "text": "What’s wrong with Monte-Carlo Simulations?\nusing Statistics: std\n\n#computes estimates for various N\nstdev(f; N=100, K=100) = std(E_ϵ(f; N=N) for k=1:K)\nsdvals = [stdev(C; N=n, K=10000) for n=NVec]\njulia&gt; @time sdvals = [stdev(C; N=n, K=10000) for n=NVec]      \n 99.558940 seconds (2.55 G allocations: 38.011 GiB, 0.81% gc time)\n5-element Array{Float64,1}:                                       \n 0.04106466473642666                                              \n 0.018296399941889575                                             \n 0.013174287295527257                                             \n 0.01086721462174894                                              \n 0.009383218078206898"
  },
  {
    "objectID": "slides/discretization.html#quick-theory-1",
    "href": "slides/discretization.html#quick-theory-1",
    "title": "Discretization",
    "section": "Quick theory (1)",
    "text": "Quick theory (1)\n\nFact: the sum of several independent gaussian variables is a gaussian variable\nSo \\(T_N =\\frac{1}{N}\\sum_{n=1}^N \\epsilon_n\\) is gaussian variable. Its mean is 0 (unbiased). Let’s compute its variance: \\[E(T_N^2) = \\frac{1}{N^2} \\sum_{n=1}^N E\\left[ \\epsilon_n^2 \\right]\\]\nThe standard deviation is: \\[s_N = \\sigma(T_N^2) = \\frac{1}{\\sqrt{\\color{red} N}} \\sigma_{\\epsilon}\\]\nConclusion: the precision of (basic) Monte-Carlo decreases only as a square root of the number of experiments."
  },
  {
    "objectID": "slides/discretization.html#quick-theory-2",
    "href": "slides/discretization.html#quick-theory-2",
    "title": "Discretization",
    "section": "Quick theory (2)",
    "text": "Quick theory (2)\n\nIn the general case, the Monte-Carlo estimator is: \\[T^{MC}\\_N =\\frac{1}{N}\\sum\\_{n=1}^N f(\\epsilon_n)\\]\nIt is unbiased: \\[E(T_N^{MC}) = E\\left[f(\\epsilon) \\right]\\]\nIt’s variance is \\[E(T_N^{MC}) \\propto \\frac{1}{\\sqrt{N}}\\]\n\nslow\non the plus side: rate independent of the dimension of \\(\\epsilon\\)"
  },
  {
    "objectID": "slides/discretization.html#quantization-using-quantiles",
    "href": "slides/discretization.html#quantization-using-quantiles",
    "title": "Discretization",
    "section": "Quantization using quantiles",
    "text": "Quantization using quantiles\n\n\n\nEquiprobable discretization\nWorks for any distribution with pdf and cdf\nSplit the space into equal \\(N\\) quantiles: \\[(I_i=[a_i,a_{i+1}])_{i=1:N}\\] such that \\[prob(\\epsilon \\in I_i)=\\frac{1}{N}\\]\nChoose the nodes as the median of each interval: \\[prob(\\epsilon\\in[a_i,x_i]) = prob(\\epsilon\\in[x_i,a_{i+1}])\\]\nThe quantization is \\((1/N, x_i)_{i=1:N}\\)\n\n\n\n[graph]"
  },
  {
    "objectID": "slides/discretization.html#gauss-hermite",
    "href": "slides/discretization.html#gauss-hermite",
    "title": "Discretization",
    "section": "Gauss-Hermite",
    "text": "Gauss-Hermite\n\n\\(f\\in \\mathcal{F}\\) a Banach space (or \\(\\mathbb{R}^n\\)), \\(\\epsilon\\) a gaussian variable\n\n\\(I: f\\rightarrow E_{\\epsilon} f(\\epsilon)\\) is a linear application\n\nsuppose there is a dense family of polynomials \\(P_n\\), spanning \\(\\mathcal{F}_n\\)\n\n\\(I\\) restricted to \\(\\mathcal{F}_N\\) is a \\(N\\)-dimensional linear form\n\nGauss quadrature magic\n\na way to choose \\(\\\\epsilon_i\\) and \\(w_i\\) such that \\[\\left(f\\rightarrow\\sum\\_{n=1}^N w_n f(\\epsilon_i) \\right)= \\left.I\\right|\\_{\\mathcal{F}_{2N}}\\]"
  },
  {
    "objectID": "slides/discretization.html#gauss-hermite-1",
    "href": "slides/discretization.html#gauss-hermite-1",
    "title": "Discretization",
    "section": "Gauss-Hermite",
    "text": "Gauss-Hermite\n\nVery accurate if a function can be approximated by polynomials\nBad:\n\nimprecise if function \\(f\\) has kinks or non local behaviour\n\npoints \\(\\epsilon_n\\) can be very far from the origin (TODO: graph)\n\nnot super easy to commute weights and nodes (but there are good libraries)"
  },
  {
    "objectID": "slides/discretization.html#gauss-",
    "href": "slides/discretization.html#gauss-",
    "title": "Discretization",
    "section": "Gauss-*",
    "text": "Gauss-*\n\nSame logic can be applied to compute integration with weight function \\(w(x)\\): \\[\\int_a^b f(x) w(x)\\]\nGauss-Hermite:\n\n\\(w(x) = e^{-x^2}\\), \\([a,b] = [-\\infty, \\infty]\\)\n\nGauss-Legendre:\n\n\\(w(x) = 1\\)\n\nGauss-Chebychev:\n\n\\(w(x)=\\sqrt{1-x^2}\\), \\([a,b] = [-1, 1]\\)\nfor periodic functions"
  },
  {
    "objectID": "slides/discretization.html#in-practice",
    "href": "slides/discretization.html#in-practice",
    "title": "Discretization",
    "section": "In practice",
    "text": "In practice\nBeware that weight is not the density of the normal law:\n\\[\\frac{1}{\\sqrt{2 \\pi \\sigma^2}}\\int f(x) e^{-\\frac{x^2}{2\\sigma^2}}dx = {\\frac{1}{\\sqrt{\\pi}}}\\int f(u {\\sigma \\sqrt{2}}) e^{-{u^2}}du \\] \\[{\\frac{1}{\\sqrt{\\pi}}}\\sum_n w_n f(\\epsilon_n {\\sigma \\sqrt{2}})\\]\nusing FastGaussQuadrature\n\nx, w = gausslegendre( 10 );\nx = x.*σ*sqrt(2) # renormalize nodes\ns = sum( w_*U(exp(x_)) for (w_,x_) in zip(x,w))\ns /= sqrt(\\pi) # renormalize output"
  },
  {
    "objectID": "slides/interpolation.html#basics",
    "href": "slides/interpolation.html#basics",
    "title": "Interpolation",
    "section": "Basics",
    "text": "Basics\nTwo continuous sets \\(X\\in R^p\\), \\(Y \\in R^q\\).\nData set: \\((x_i, y_i)_{i\\in[1,N]} \\in X \\times Y\\)\nTake \\(\\tilde{x} \\in X \\setminus \\{x_i\\}_{i\\in[1,N]}\\). What should be the matching \\(\\tilde{y}\\) ?\nDiscover implicit relation \\(y=f(x)\\) (the model) then compute \\(\\tilde{y}=f(\\tilde{x})\\).\n\\(f\\) is chosen from a family \\(\\mathcal{F}\\) of functions parameterized by a parameter \\(\\theta\\), the approximation family."
  },
  {
    "objectID": "slides/interpolation.html#interpolation-vs.-regression",
    "href": "slides/interpolation.html#interpolation-vs.-regression",
    "title": "Interpolation",
    "section": "Interpolation vs. Regression",
    "text": "Interpolation vs. Regression\n\nInterpolation: \\(f\\) is chosen such that \\(\\forall n, y_n=f(x_n)\\) \nRegression: \\(f\\) is chosen so as to minimize a fitness criterium such as\n\n\\(\\min_f \\sum_n \\left( y_n-f(x_n) \\right)^2\\)\nor \\(\\min_{\\theta} \\sum_n \\left( y_n-f(x_n;\\theta) \\right)^2 + \\lambda  || \\theta ||^2\\) with \\(\\lambda&gt;0\\)\n\nRemarks:\n\nsome applied mathematicians tend to mix the two (interpolate=evaluate f outside of X)"
  },
  {
    "objectID": "slides/interpolation.html#examples-1-linear-interpolation",
    "href": "slides/interpolation.html#examples-1-linear-interpolation",
    "title": "Interpolation",
    "section": "Examples (1): Linear Interpolation",
    "text": "Examples (1): Linear Interpolation\n1d Graph. Join the dots. Linear/Spline\n2d Graph: Regression\nConclusion: interpolate only if \\(f\\) is known precisely on \\(X\\)"
  },
  {
    "objectID": "slides/interpolation.html#example-2",
    "href": "slides/interpolation.html#example-2",
    "title": "Interpolation",
    "section": "Example (2)",
    "text": "Example (2)\n\n\n\\(X\\) and \\(Y\\): large databases of low and high resolutions images\n\\(\\mathcal{F}\\): neural network"
  },
  {
    "objectID": "slides/interpolation.html#why-do-we-need-it",
    "href": "slides/interpolation.html#why-do-we-need-it",
    "title": "Interpolation",
    "section": "Why do we need it?",
    "text": "Why do we need it?\n\nIn economics, we often solve a problem \\(\\Phi(f)=0\\) where \\(f\\) is a function: \\(\\forall s, \\Phi(f)(s) = 0\\)\nIf we approximate \\(f\\) by some element \\(f(;\\theta)\\in\\mathcal{F}\\) we just need to identify a finite set of parameters \\(\\theta \\in R^n\\)\nHow do we identify \\(\\theta\\)?\n\nchoose a finite set of \\(n\\) criteria that must be met\n\n\\(f\\) is pin down uniquely\nexample: colocation, choose \\(s_1, ..., s_n\\). Find \\(f\\) such that \\(\\forall i=1:n, \\Phi(f)(s_i) = 0\\)\n\nchoose higher number of objectives (\\(p&gt;n\\)) that must be minimized:\n\nexample: regression, choose \\(s_1, ..., s_p\\). Find \\(f\\) such that minimize \\(\\sum_i \\Phi(f)(s_i)^2 = 0\\)"
  },
  {
    "objectID": "slides/interpolation.html#several-interpolation-flavours",
    "href": "slides/interpolation.html#several-interpolation-flavours",
    "title": "Interpolation",
    "section": "Several interpolation flavours",
    "text": "Several interpolation flavours\n\nlocal vs spectral:\n\nlocal: functions in \\(f\\) have compact support\nspectral: noncompact support\n\nlinear vs nonlinear:\n\n\\(\\mathcal{F}\\) is a vector space: \\(f(x) \\approx \\sum_{i=1}^N \\theta_n b_n(x)\\) where \\(b_n\\) is a base of \\(\\mathcal{F}\\)\nnonlinear: wavelets, neural networks, …."
  },
  {
    "objectID": "slides/interpolation.html#linear",
    "href": "slides/interpolation.html#linear",
    "title": "Interpolation",
    "section": "Linear",
    "text": "Linear\n\nTake function \\(f\\) defined on an interval \\([a,b]\\). Suppose the value is known at \\((a=x_1, ... x_N=b)\\). Denote \\(y_i = f(x_i)\\).\nJoin the dots: define a piecewise linear function as \\[\\forall x \\in [x_i, x_{i+1}], \\tilde{f}(x) = y_i + \\underbrace{\\frac{x-x_i}{x_{i+1}-x_i}}_{\\text{barycentric coordinate}} (y_{i+1} - y_i)\\]\n\n[TODO: graph]"
  },
  {
    "objectID": "slides/interpolation.html#linear-1",
    "href": "slides/interpolation.html#linear-1",
    "title": "Interpolation",
    "section": "Linear",
    "text": "Linear\n\nAlternate view: \\[\\tilde{f}(x) = \\sum_{i=1}^N y_i B^i_1(x)\\] where \\(b_1^i(x)=\\frac{x-x_{i-1}}{x_i-x_{i-1}}.1_{x\\in[x_{i-1},x_i]} + (1-\\frac{x-x_{i}}{x_{i+1}-x_{i}}).1_{x\\in [x_i, x_{i+1}]}\\)\n\\((B^i)\\) is an interpolation basis"
  },
  {
    "objectID": "slides/interpolation.html#splines-1",
    "href": "slides/interpolation.html#splines-1",
    "title": "Interpolation",
    "section": "Splines",
    "text": "Splines\n\n\\(n\\)-th order spline : piecewise polynomial function that is \\(n\\) times differentiable except on a finite set of break points (aka knots), where it is \\((n-1)\\) times differentiable.\nin practice the data points are the breakpoints\nexample: order 2\n\nsuppose \\(\\tilde{f}(x_i)\\) and \\(\\tilde{f}^{\\prime}(x_i)\\) are known, choose the coefficients for the patch \\(p_{i+1}(x) = a_{i+1}x^2+b_{i+1}x + c_{i+1}\\)\nAlready two constraints. Condition \\(p_{i+1}(x_{i+1})=\\tilde{f}(x_{i+1})\\) supplies another one.\nDo it for every patch. Note that it requires to set \\(f^{\\prime}(a)\\) beforehand."
  },
  {
    "objectID": "slides/interpolation.html#basis-splines-much-better",
    "href": "slides/interpolation.html#basis-splines-much-better",
    "title": "Interpolation",
    "section": "Basis Splines (much better)",
    "text": "Basis Splines (much better)\n\nDefine \\[B_{i,1}(x) = 1_{x \\in [x_i, x_{i+1}]}\\] \\[B_{i,k+1}(x) = \\frac{x-x_i}{x_{i+k}-x_i}B_{i,k}(x) +\n\\frac{x_{i+k+1}-x}{x_{i+k+1}-x_{i+1}}B_{i+1,k}(x)\\]\nTheorem: Any spline of order \\(k\\) on the knots \\((x_i)\\) can be expressed as a linear combination of the basis splines \\((B_{i,k})\\).\nAll basis splines have compact support.\nIf grid is regularly spaced there is \\(B_k\\) such that \\(B_{i,k}(x) = B_k(x-x_i)\\)"
  },
  {
    "objectID": "slides/interpolation.html#basis-splines",
    "href": "slides/interpolation.html#basis-splines",
    "title": "Interpolation",
    "section": "Basis splines",
    "text": "Basis splines\n\nBasis Splines"
  },
  {
    "objectID": "slides/interpolation.html#basis-splines-are-not-interpolating",
    "href": "slides/interpolation.html#basis-splines-are-not-interpolating",
    "title": "Interpolation",
    "section": "Basis splines are not interpolating",
    "text": "Basis splines are not interpolating\n\nUnfortunately basis splines are not “interpolating” in the sense that in general \\[f(x_i) \\neq \\sum_{n} f(x_n) B_{n,k} (x_i)\\]\nOne must choose other coefficients \\((c_n)\\) which satisfy:\n\\[y_i = \\sum_n c_n B_{n,k} (x_i)\\]\n\nthere are more coefficients than data points: requires boundary conditions\n\nf’’=0: natural spline\n\ngoing from \\(y_n\\) to \\(c_n\\) is called prefiltering"
  },
  {
    "objectID": "slides/interpolation.html#in-practice-interpolations",
    "href": "slides/interpolation.html#in-practice-interpolations",
    "title": "Interpolation",
    "section": "In practice: Interpolations",
    "text": "In practice: Interpolations\nf(x) = log(x)\nxs = 1:0.2:5\nA = [f(x) for x in xs]\n\n# linear interpolation\ninterp_linear = LinearInterpolation(xs, A)\ninterp_linear(1.3) # interpolate\n\n# cubic spline interpolation\ninterp_cubic = CubicSplineInterpolation(xs, A)\ninterp_cubic(1.3) # interpolate"
  },
  {
    "objectID": "slides/interpolation.html#in-practice-interpolations-2",
    "href": "slides/interpolation.html#in-practice-interpolations-2",
    "title": "Interpolation",
    "section": "In practice: Interpolations (2)",
    "text": "In practice: Interpolations (2)\nNote that in \\(y_i = \\sum_n c_n B_{n,k} (x_i)\\), \\(y_i\\) and \\(c_n\\) could perfectly well be vectors. If we use a Vector type which implements all operations (zeros, *, …) we can interpolate them with the same operations\nusing StaticArrays\n\nf(x) = SVector(log(x), exp(x))\nxs = 1:0.2:5\nA = [f(x) for x in xs]\n\n# linear interpolation\ninterp_linear = LinearInterpolation(xs, A)\ninterp_linear(1.3) # returns a 2d SVector"
  },
  {
    "objectID": "slides/interpolation.html#matrix-conditioning",
    "href": "slides/interpolation.html#matrix-conditioning",
    "title": "Interpolation",
    "section": "Matrix conditioning",
    "text": "Matrix conditioning\n\nSuppose you want to solve vector equation \\(A x=y\\). Will a small error in \\(y\\) affect a lot the value of \\(x\\)? (in particular round-off errors)\n\ncondition number: \\(\\lim_{\\epsilon\\rightarrow 0} \\sup_{\\delta y\\leq \\epsilon} \\frac{\\delta x}{\\delta y}\\)\nor \\(\\kappa(A) = ||A^{-1}|| || A||\\) where \\(|| ||\\) is a subordonate norm.\nif very-large: the matrix is ill conditioned\n\nWhat makes a matrix ill-conditioned?\n\nsome rows/columns are very small, others are gigantic\nrows/columns are almost colinear"
  },
  {
    "objectID": "slides/interpolation.html#fitting-polynomials",
    "href": "slides/interpolation.html#fitting-polynomials",
    "title": "Interpolation",
    "section": "Fitting polynomials",
    "text": "Fitting polynomials\n\nLet’s approximate: \\(f(;\\theta) = \\sum_{n=0}^K \\theta_k x^k\\).\nWe need \\((K+1)\\) points to fit a polynomial of order \\(K\\). Let’s take grid points \\((x_0, ... x_{K})\\) and denote \\(y_k=f(x_k)\\)\nWe need to solve in \\((\\theta_k)_{k=[0,K]}\\):\n\n\\[\\forall n \\in[0,K],  \\underbrace{\\sum_k \\theta_k (x_n)^{k}}_{M \\theta} = y_k\\]"
  },
  {
    "objectID": "slides/interpolation.html#vandermonde-matrix",
    "href": "slides/interpolation.html#vandermonde-matrix",
    "title": "Interpolation",
    "section": "Vandermonde Matrix",
    "text": "Vandermonde Matrix\n\n\\(M\\) has a special structure, a Vandermode matrix: \\[\nM =\n\\begin{bmatrix}\n1 & x_0 & x_0^2 \\cdots & x_0^K \\\\\\\\\n1 & x_1 & x_1^2  \\cdots  & x_1^K \\\\\\\\\n1 & x_2 & x_2^2  \\cdots  & x_2^K \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n1 & x_K & x_K^2  \\cdots & x_K^K\n\\end{bmatrix}\n\\]\nVandermonde matrix is ill-conditioned if points are too close or if \\(K\\) is high."
  },
  {
    "objectID": "slides/interpolation.html#orthogonal-polynomials",
    "href": "slides/interpolation.html#orthogonal-polynomials",
    "title": "Interpolation",
    "section": "Orthogonal polynomials",
    "text": "Orthogonal polynomials\n\nDefine a scalar product over functions on the domain \\([a,b]\\) by choosing a positive weight function \\(w(x)\\). \\[&lt;P,Q&gt; = \\int_a^b w(x) P(x)Q(x) dx\\]\nConstruct an orthogonal base \\((T_n)_{n=[1,K]}\\).\nApproximate \\[f(x)\\approx f(x; \\theta) = \\sum_{n=0}^K \\theta_n T_n(x)=\\sum_{n=0}^K &lt;f|T_n&gt; T_n(x)\\]\n\nthis is optimal for the norm associated to \\(&lt;&gt;\\) (projection on the orthogonal base)"
  },
  {
    "objectID": "slides/interpolation.html#vandermonde-matrix-1",
    "href": "slides/interpolation.html#vandermonde-matrix-1",
    "title": "Interpolation",
    "section": "Vandermonde matrix",
    "text": "Vandermonde matrix\nCoefficients can still be identified by inverting: \\[\\forall n \\in[0,K] \\underbrace{\\sum_k \\theta_k T_k(x_n)}_{M \\theta} = y_n\\]\n\\[\nM =\n\\begin{bmatrix}\nT_0(x_0) & T_1(x_0) & \\cdots & T_K(x_0) \\\\\\\\\nT_0(x_1) & T_1(x_1) &  \\cdots  & T_K(x_1) \\\\\\\\\nT_0(x_2) & T_1(x_2) &  \\cdots  & T_K(x_2) \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\nT_0(x_K) & T_1(x_K) &  \\cdots & T_K(x_K)\n\\end{bmatrix}\n\\]"
  },
  {
    "objectID": "slides/interpolation.html#problem-runge-error",
    "href": "slides/interpolation.html#problem-runge-error",
    "title": "Interpolation",
    "section": "Problem: Runge error",
    "text": "Problem: Runge error\n\n\n\nRed: Runge function \\(f(x)=\\frac{1}{1+25x^2}\\)\nBlue: interpolates at 6, regularly-spaced, points\nGreen: interpolates at 10, regularly-spaced, points\nWhat happens when interpolation order increases?\n\noscillations increase.\n\nDoes it contradict Stone-Weierstrass theorem ? No.\nSolutions:\n\nuse regression method instead\nchoose the interpolation points wisely"
  },
  {
    "objectID": "slides/interpolation.html#chebychev-nodes",
    "href": "slides/interpolation.html#chebychev-nodes",
    "title": "Interpolation",
    "section": "Chebychev Nodes",
    "text": "Chebychev Nodes\n\nThere is an optimal way to choose the interpolation points:\n\nthe roots of \\(cos(\\frac{2 k - 1}{2n} \\pi)\\) for [-1,1]\nrescale for a finite interval [a,b]\n\nfor the interpolating polynomial: \\[|f(x) - P_n(x)|  \\leq \\frac{1}{2^n (n+1)!} \\max_{\\xi \\in [-1,1]} |f^n(\\xi)|\\]"
  },
  {
    "objectID": "slides/interpolation.html#chebychev-polynomials",
    "href": "slides/interpolation.html#chebychev-polynomials",
    "title": "Interpolation",
    "section": "Chebychev polynomials",
    "text": "Chebychev polynomials\n\nChebychev polynomials (of the first kind) have their zeros on the nodes.\nDefinitions:\n\n\\(T_n(x) = \\cos(n  \\arccos(x))\\) (in [0,1])\nrecursive: \\(T_0(x)=1\\), \\(T_1(x)=x\\), \\(T_n(x)=2 x T_{n-1}(x)-T_{n-2}(x)\\)\n\nVery good choice:\n\nmatrix \\(M\\) is well conditioned: \\(\\sqrt{2}\\)"
  },
  {
    "objectID": "slides/interpolation.html#chebychev-polynomial",
    "href": "slides/interpolation.html#chebychev-polynomial",
    "title": "Interpolation",
    "section": "Chebychev Polynomial",
    "text": "Chebychev Polynomial"
  },
  {
    "objectID": "slides/interpolation.html#multidimensional-interpolation",
    "href": "slides/interpolation.html#multidimensional-interpolation",
    "title": "Interpolation",
    "section": "Multidimensional interpolation",
    "text": "Multidimensional interpolation\n\nConsider a function \\(f\\) defined on a space \\(X_1 \\times X_d\\)\nTake \\(d\\) grids \\(\\mathcal{G}_1\\subset X_1, ..., \\mathcal{G}_d\\subset X_d\\) with linear approximation bases \\(\\mathcal{B}_1=(b_1^1, ... b_1^{N_1}),..., \\mathcal{B}_d=(b_d^1, ... b_d^{N_d})\\).\nThen \\(f\\) can be approximated by \\(f(x_1, ... x_d ; \\theta) = \\sum_{i_1=1}^{N_1} ... \\sum_{i_d=1}^{N_d} \\theta_{i_1, ... i_d} \\underbrace{b_{i_1}^1(x_1) ...  b_{i_d}^d(x_d)}_{\\text{Product Base}}\\)\nMorality:\n\nlinear appoximation along each dimension induces a natural (multi)-linear in many dimensions\nCoefficients are still the solution of a linear system: \\[M \\theta = y\\]\nbut \\(M\\) has a special structure (tensor product)\n\nProblem: number of coefficients to determine increases exponentially with number of dimensions:\n\n“Curse of Dimensionality”"
  },
  {
    "objectID": "slides/interpolation.html#multidimensional-interpolation-2",
    "href": "slides/interpolation.html#multidimensional-interpolation-2",
    "title": "Interpolation",
    "section": "Multidimensional interpolation (2)",
    "text": "Multidimensional interpolation (2)\n\nWays to mitigate the curse of dimensionality\nRemedies:\n\nsparse grids\nadaptive approximation\nneural networks\n…\n\nNo black-magic theorem: there is no solution to the curse of dimensionality\n\n.. but there are methods to adapt to problem whose intrinsic dimension is smaller than the actual number of variables"
  },
  {
    "objectID": "slides/interpolation.html#in-practice",
    "href": "slides/interpolation.html#in-practice",
    "title": "Interpolation",
    "section": "In Practice:",
    "text": "In Practice:\n\nInterpolations.jl can interpolate on multi-dim grids\nIf you want to construct basis matrices yourself, BasisMatrices.jl:"
  },
  {
    "objectID": "slides/prep_4/index.html#introduction-1",
    "href": "slides/prep_4/index.html#introduction-1",
    "title": "Optimization",
    "section": "Introduction",
    "text": "Introduction\nOptimization is everywhere in economics:\n\nto model agent’s behaviour: what would a rational agent do?\n\nconsumer maximizes utility from consumption\nfirm maximizes profit\n\nan economist tries to solve a model:\n\nfind prices that clear the market"
  },
  {
    "objectID": "slides/prep_4/index.html#two-kinds-of-optimization-problem",
    "href": "slides/prep_4/index.html#two-kinds-of-optimization-problem",
    "title": "Optimization",
    "section": "Two kinds of optimization problem:",
    "text": "Two kinds of optimization problem:\n\nroot finding: \\(\\text{find  $x$ in $X$ such that $f(x)=0$}\\)\nminimization/maximization \\(\\min_{x\\in X} f(x)\\) or \\(\\max_{x\\in X} f(x)\\)\noften a minimization problem can be reformulated as a root-finding problem\n\\[x_0 = {argmin}_{x\\in X} f(x) \\overbrace{\\iff}^{??} f^{\\prime} (x_0) = 0\\]"
  },
  {
    "objectID": "slides/prep_4/index.html#plan",
    "href": "slides/prep_4/index.html#plan",
    "title": "Optimization",
    "section": "Plan",
    "text": "Plan\n\ngeneral consideration about optimization problems\none-dimensional root-finding\none-dimensional optimization\nlocal root-finding\nlocal optimization\nconstrained optimization\nconstrained root-finding"
  },
  {
    "objectID": "slides/prep_4/index.html#optimization-tasks-come-in-many-flavours",
    "href": "slides/prep_4/index.html#optimization-tasks-come-in-many-flavours",
    "title": "Optimization",
    "section": "Optimization tasks come in many flavours",
    "text": "Optimization tasks come in many flavours\n\ncontinuous versus discrete optimization\nconstrained and unconstrained optimization\nglobal and local\nstochastic and deterministic optimization\nconvexity"
  },
  {
    "objectID": "slides/prep_4/index.html#continuous-versus-discrete-optimization",
    "href": "slides/prep_4/index.html#continuous-versus-discrete-optimization",
    "title": "Optimization",
    "section": "Continuous versus discrete optimization",
    "text": "Continuous versus discrete optimization\n\nChoice is picked from a given set (\\(x\\in X\\)) which can be:\n\ncontinuous: choose amount of debt \\(b_t \\in [0,\\overline{b}]\\), of capital \\(k_t \\in R^{+}\\)\ndiscrete: choose whether to repay or default \\(\\delta\\in{0,1}\\), how many machines to buy (\\(\\in N\\)), at which age to retire…\na combination of both: mixed integer programming"
  },
  {
    "objectID": "slides/prep_4/index.html#continuous-versus-discrete-optimization-2",
    "href": "slides/prep_4/index.html#continuous-versus-discrete-optimization-2",
    "title": "Optimization",
    "section": "Continuous versus discrete optimization (2)",
    "text": "Continuous versus discrete optimization (2)\n\nDiscrete optimization requires a lot of combinatorial thinking\n\nWe don’t cover it today.\n…if needed, we just test all choices until we find the best one\n\nSometimes a discrete choice can be approximated by a mixed strategy (i.e. a random strategy).\n\nInstead of \\(\\delta\\in{0,1}\\) we choose \\(x\\) in \\(prob(\\delta=1)=\\sigma(x)\\)\nwith \\(\\sigma(x)=\\frac{2}{1+\\exp(-x)}\\)"
  },
  {
    "objectID": "slides/prep_4/index.html#constrained-and-unconstrained-optimization",
    "href": "slides/prep_4/index.html#constrained-and-unconstrained-optimization",
    "title": "Optimization",
    "section": "Constrained and Unconstrained optimization",
    "text": "Constrained and Unconstrained optimization\n\nUnconstrained optimization: \\(x\\in R\\)\nConstrained optimization: \\(x\\in X\\)\n\nbudget set: \\(p_1 c_1 + p_2 c_2 \\leq I\\)\npositivity of consumption: \\(c \\geq 0\\).\n\nIn good cases, the optimization set is convex…\n\npretty much always in this course"
  },
  {
    "objectID": "slides/prep_4/index.html#stochastic-vs-determinstic",
    "href": "slides/prep_4/index.html#stochastic-vs-determinstic",
    "title": "Optimization",
    "section": "Stochastic vs Determinstic",
    "text": "Stochastic vs Determinstic\n\nCommon case, especially in machine learning \\[f(x) = E_{\\epsilon}[ \\xi (\\epsilon, x)]\\]\nOne wants to maximize (resp solve) w.r.t. \\(x\\) but it is costly to compute expectation precisely using Monte-Carlo draws (there are other methods).\nA stochastic optimization method allows to use noisy estimates of the expectation, and will still converge in expectation.\nFor now we focus on deterministic methods. Maybe later…"
  },
  {
    "objectID": "slides/prep_4/index.html#local-vs-global-algorithms",
    "href": "slides/prep_4/index.html#local-vs-global-algorithms",
    "title": "Optimization",
    "section": "Local vs global Algorithms",
    "text": "Local vs global Algorithms\n\nIn principle, there can be many roots (resp maxima) within the optimization set.\nAlgorithms that find them all are called “global”. For instance:\n\ngrid search\nsimulated annealing\n\nWe will deal only with local algorithms, and consider local convergence properties.\n\n-&gt;then it might work or not\nto perform global optimization just restart from different points."
  },
  {
    "objectID": "slides/prep_4/index.html#math-vs-practice",
    "href": "slides/prep_4/index.html#math-vs-practice",
    "title": "Optimization",
    "section": "Math vs practice",
    "text": "Math vs practice\n\nThe full mathematical treatment will typically assume that \\(f\\) is smooth (\\(\\mathcal{C}_1\\) or \\(\\mathcal{C}_2\\) depending on the algorithm).\nIn practice we often don’t know about these properties\n\nwe still try and check thqt we have a local optimal\n\nSo: fingers crossed"
  },
  {
    "objectID": "slides/prep_4/index.html#math-vs-practice-1",
    "href": "slides/prep_4/index.html#math-vs-practice-1",
    "title": "Optimization",
    "section": "Math vs practice",
    "text": "Math vs practice\nHere is the surface representing the objective that a deep neural network training algorithm tries to minimize.\n\nAnd yet, neural networks do great things!"
  },
  {
    "objectID": "slides/prep_4/index.html#what-do-you-need-to-know",
    "href": "slides/prep_4/index.html#what-do-you-need-to-know",
    "title": "Optimization",
    "section": "What do you need to know?",
    "text": "What do you need to know?\n\nbe able to handcode simple algos (Newton, Gradient Descent)\nunderstand the general principle of the various algorithms to compare them in terms of\n\nrobustness\nefficiency\naccuracy\n\nthen you can just switch the various options, when you use a library…"
  },
  {
    "objectID": "slides/prep_4/index.html#bisection",
    "href": "slides/prep_4/index.html#bisection",
    "title": "Optimization",
    "section": "Bisection",
    "text": "Bisection\n\nFind \\(x \\in [a,b]\\) such that \\(f(x) = 0\\). Assume \\(f(a)f(b) &lt;0\\).\nAlgorithm\n\nStart with \\(a_n, b_n\\). Set \\(c_n=(a_n+b_n)/2\\)\nCompute \\(f(c_n)\\)\n\n\nif \\(f(c_n)f(a_n)&lt;0\\) then set \\((a_{n+1},b_{n+1})=(a_n,c_n)\\)\nelse set \\((a_{n+1},b_{n+1})=(c_n,b_n)\\)\n\n\nIf \\(|f(c_n)|&lt;\\epsilon\\) and/or \\(\\frac{b-a}{2^n}&lt;\\delta\\) stop. Otherwise go back to 1."
  },
  {
    "objectID": "slides/prep_4/index.html#bisection-2",
    "href": "slides/prep_4/index.html#bisection-2",
    "title": "Optimization",
    "section": "Bisection (2)",
    "text": "Bisection (2)\n\nNo need for initial guess: globally convergent algorithm\n\nnot a global algorithm…\n… in the sense that it doesn’t find all solutions\n\n\\(\\delta\\) is a guaranteed accuracy on \\(x\\)\n\\(\\epsilon\\) is a measure of how good the solution is\nthink about your tradeoff: (\\(\\delta\\) or \\(\\epsilon\\) ?)"
  },
  {
    "objectID": "slides/prep_4/index.html#newton-algorithm",
    "href": "slides/prep_4/index.html#newton-algorithm",
    "title": "Optimization",
    "section": "Newton algorithm",
    "text": "Newton algorithm\n\nFind \\(x\\) such that \\(f(x) = 0\\). Use \\(x_0\\) as initial guess.\n\\(f\\) must be \\(\\mathcal{C_1}\\) and we assume we can compute its derivative \\(f^{\\prime}\\)\nGeneral idea:\n\nobserve that the zero \\(x^{\\star}\\) must satisfy \\[f(x^{\\star})=0=f(x_0)+f^{\\prime}(x_0)(x^{\\star}-x_0) + o(x-x_0)\\]\nHence a good approximation should be \\[x^{\\star}\\approx = x_0- f(x_0)/f^{\\prime}(x_0)\\]\nCheck it is good. otherwise, replace \\(x_0\\) by \\(x^{\\star}\\)"
  },
  {
    "objectID": "slides/prep_4/index.html#newton-algorithm-2",
    "href": "slides/prep_4/index.html#newton-algorithm-2",
    "title": "Optimization",
    "section": "Newton algorithm (2)",
    "text": "Newton algorithm (2)\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n- \\frac{f(x_n)}{f^{\\prime}(x_n)}=f^{\\text{newton}}(x_n)\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic"
  },
  {
    "objectID": "slides/prep_4/index.html#quasi-newton",
    "href": "slides/prep_4/index.html#quasi-newton",
    "title": "Optimization",
    "section": "Quasi-Newton",
    "text": "Quasi-Newton\n\nWhat if we can’t compute \\(f^{\\prime}\\) or it is expensive to do so?\n\nIdea: try to approximate \\(f^{\\prime}(x_n)\\) from the last iterates\n\nSecant method: \\[f^{\\prime}(x_n)\\approx \\frac{f(x_n)-f(x_{n-1})}{x_n-x_{n-1}}\\] \\[x_{n+1} = x_n- f(x_n)\\frac{x_n-x_{n-1}}{f(x_n)-f(x_{n-1})}\\]\n\nrequires two initial guesses: \\(x_1\\) and \\(x_0\\)\nsuperlinear convergence: \\(\\lim \\frac{x_t-x^{\\star}}{x_{t-1}-x^{\\star}}\\rightarrow 0\\)"
  },
  {
    "objectID": "slides/prep_4/index.html#limits-of-newtons-method",
    "href": "slides/prep_4/index.html#limits-of-newtons-method",
    "title": "Optimization",
    "section": "Limits of Newton’s method",
    "text": "Limits of Newton’s method\n\nHow could Newton method fail?\n\nbad guess\n\n-&gt; start with a better guess\n\novershoot\n\n-&gt; dampen the update (problem: much slower)\n-&gt; backtrack\n\nstationary point\n\n-&gt; if root of multiplicity \\(m\\) try \\(x_{n+1} = x_n- m \\frac{f(x_n)}{f^{\\prime}(x_n)}\\)"
  },
  {
    "objectID": "slides/prep_4/index.html#backtracking",
    "href": "slides/prep_4/index.html#backtracking",
    "title": "Optimization",
    "section": "Backtracking",
    "text": "Backtracking\n\nSimple idea:\n\nat stage \\(n\\) given \\(f(x_n)\\) compute Newton step \\(\\Delta_n=-\\frac{f(x_n)}{f^{\\prime}(x_n)}\\)\nfind the smallest \\(k\\) such that \\(|f(x_n-\\Delta/2^k)|&lt;|f(x_n)|\\)\nset \\(x_{n+1}=x_n-\\Delta/2^k\\)"
  },
  {
    "objectID": "slides/prep_4/index.html#golden-section-search",
    "href": "slides/prep_4/index.html#golden-section-search",
    "title": "Optimization",
    "section": "Golden section search",
    "text": "Golden section search\n\nMinimize \\(f(x)\\) for \\(x \\in [a,b]\\)\nChoose \\(\\Phi \\in [0,0.5]\\)\nAlgorithm:\n\nstart with \\(a_n &lt; b_n\\) (initially equal to \\(a\\) and \\(b\\))\ndefine \\(c_n = a_n+\\Phi(b_n-a_n)\\) and \\(d_n = a_n+(1-\\Phi)(b_n-a_n)\\)\n\nif \\(f(c_n)&lt;f(d_n)\\) set \\(a_{n+1},b_{n+1}=a_n, d_n\\)\nelse set \\(a_{n+1}, b_{n+1}= c_n, b_n\\)"
  },
  {
    "objectID": "slides/prep_4/index.html#golden-section-search-2",
    "href": "slides/prep_4/index.html#golden-section-search-2",
    "title": "Optimization",
    "section": "Golden section search (2)",
    "text": "Golden section search (2)\n\nThis is guaranteed to converge to a local minimum\nIn each step, the size of the interval is reduced by a factor \\(\\Phi\\)\nBy choosing \\(\\Phi=\\frac{\\sqrt{5}-1}{2}\\) one can save one evaluation by iteration.\n\nyou can check that either \\(c_{n+1} = d_n\\) or \\(d_{n+1} = c_n\\)\n\nRemark that bisection is not enough"
  },
  {
    "objectID": "slides/prep_4/index.html#gradient-descent",
    "href": "slides/prep_4/index.html#gradient-descent",
    "title": "Optimization",
    "section": "Gradient Descent",
    "text": "Gradient Descent\n\nMinimize \\(f(x)\\) for \\(x \\in R\\) given initial guess \\(x_0\\)\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n (1-\\lambda)- \\lambda f^{\\prime}(x_n)\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f^{\\prime}(x_n)| &lt; \\epsilon\\)"
  },
  {
    "objectID": "slides/prep_4/index.html#gradient-descent-2",
    "href": "slides/prep_4/index.html#gradient-descent-2",
    "title": "Optimization",
    "section": "Gradient Descent (2)",
    "text": "Gradient Descent (2)\n\nUses local information\n\none needs to compute the gradient\nnote that gradient at \\(x_n\\) does not provide a better guess for the minimum than \\(x_n\\) itself\nlearning speed is crucial\n\nConvergence speed: linear\n\nrate depend on the learning speed\noptimal learning speed? the fastest for which there is convergence"
  },
  {
    "objectID": "slides/prep_4/index.html#newton-raphson-method",
    "href": "slides/prep_4/index.html#newton-raphson-method",
    "title": "Optimization",
    "section": "Newton-Raphson method",
    "text": "Newton-Raphson method\n\nMinimize \\(f(x)\\) for \\(x \\in R\\) given initial guess \\(x_0\\)\nBuild a local model of \\(f\\) around \\(x_0\\) \\[f(x) = f(x_0) + f^{\\prime}(x_0)(x-x_0) + f^{\\prime\\prime}(x_0)\\frac{(x-x_0)^2}{2} + o(x-x_0)^2\\]\nAccording to this model, \\[ f(x{\\star}) = min_x f(x)\\iff \\frac{d}{d x} \\left[ f(x_0) + f^{\\prime}(x_0)(x-x_0) + f^{\\prime\\prime}(x_0)\\frac{(x-x_0)^2}{2} \\right] = 0\\] which yields: \\(x^{\\star} = x_0 - \\frac{f^{\\prime}(x_0)}{f^{\\prime\\prime}(x_0)}\\)\nthis is Newton applied to \\(f^{\\prime}(x)=0\\)"
  },
  {
    "objectID": "slides/prep_4/index.html#newton-raphson-algorithm-2",
    "href": "slides/prep_4/index.html#newton-raphson-algorithm-2",
    "title": "Optimization",
    "section": "Newton-Raphson Algorithm (2)",
    "text": "Newton-Raphson Algorithm (2)\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n-\\frac{f^{\\prime}(x_0)}{f^{\\prime\\prime}(x_0)}\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f^{\\prime}(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic"
  },
  {
    "objectID": "slides/prep_4/index.html#unconstrained-problems",
    "href": "slides/prep_4/index.html#unconstrained-problems",
    "title": "Optimization",
    "section": "Unconstrained problems",
    "text": "Unconstrained problems\n\nMinimize \\(f(x)\\) for \\(x \\in R^n\\) given initial guess \\(x_0 \\in R^n\\)\nMany intuitions from the 1d case, still apply\n\nreplace derivatives by gradient, jacobian and hessian\nrecall that matrix multiplication is not commutative\n\nSome specific problems:\n\nupdate speed can be specific to each dimension\nsaddle-point issues (for minimization)"
  },
  {
    "objectID": "slides/prep_4/index.html#quick-terminology",
    "href": "slides/prep_4/index.html#quick-terminology",
    "title": "Optimization",
    "section": "Quick terminology",
    "text": "Quick terminology\nFunction \\(f: R^p \\rightarrow R^q\\)\n\nJacobian: \\(J(x)\\) or \\(f^{\\prime}_x(x)\\), \\(p\\times q\\) matrix such that: \\[J(x)_{ij} = \\frac{\\partial f(x)_i}{\\partial x_j}\\]\nGradient: \\(\\nabla f(x) = J(x)\\), gradient when \\(q=1\\)\nHessian: denoted by \\(H(x)\\) or \\(f^{\\prime\\prime}_{xx}(x)\\) when \\(q=1\\): \\[H(x)_{jk} = \\frac{\\partial f(x)}{\\partial x_j\\partial x_k}\\]\nIn the following explanations, \\(|x|\\) denotes the supremum norm, but most of the following explanations also work with other norms."
  },
  {
    "objectID": "slides/prep_4/index.html#multidimensional-newton-raphson",
    "href": "slides/prep_4/index.html#multidimensional-newton-raphson",
    "title": "Optimization",
    "section": "Multidimensional Newton-Raphson",
    "text": "Multidimensional Newton-Raphson\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n- J(x_{n})^{-1}f(x_n)=f^{\\text{newton}}(x_n)\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic"
  },
  {
    "objectID": "slides/prep_4/index.html#multidimensional-newton-root-finding-2",
    "href": "slides/prep_4/index.html#multidimensional-newton-root-finding-2",
    "title": "Optimization",
    "section": "Multidimensional Newton root-finding (2)",
    "text": "Multidimensional Newton root-finding (2)\n\nwhat matters is the computation of the step \\(\\Delta_n = {\\color{\\red}{J(x_{n})^{-1}}} f(x_n)\\)\ndon’t compute \\(J(x_n)^{-1}\\)\n\nit takes less operations to compute \\(X\\) in \\(AX=Y\\) than \\(A^{-1}\\) then \\(A^{-1}Y\\)\nin Julia: X = A \\ Y\n\nstrategies to improve convergence:\n\ndampening: \\(x_n = (1-\\lambda)x_{n-1} - \\lambda \\Delta_n\\)\nbacktracking: choose \\(k\\) such that \\(|f(x_n-2^{-k}\\Delta_n)|\\)&lt;\\(|f(x_{n-1})|\\)\nlinesearch: choose \\(\\lambda\\in[0,1]\\) so that \\(|f(x_n-\\lambda\\Delta_n)|\\) is minimal"
  },
  {
    "objectID": "slides/prep_4/index.html#multidimensional-gradient-descent",
    "href": "slides/prep_4/index.html#multidimensional-gradient-descent",
    "title": "Optimization",
    "section": "Multidimensional Gradient Descent",
    "text": "Multidimensional Gradient Descent\n\nMinimize \\(f(x) \\in R\\) for \\(x \\in R^n\\) given \\(x_0 \\in R^n\\)\nAlgorithm\n\nstart with \\(x_n\\) \\[x_{n+1} = (1-\\lambda) x_n - \\lambda \\nabla f(x_n)\\]\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nComments:\n\nlots of variants\nautomatic differentiation software makes gradient easy to compute\nconvergence is typically linear"
  },
  {
    "objectID": "slides/prep_4/index.html#gradient-descent-variants",
    "href": "slides/prep_4/index.html#gradient-descent-variants",
    "title": "Optimization",
    "section": "Gradient descent variants",
    "text": "Gradient descent variants"
  },
  {
    "objectID": "slides/prep_4/index.html#multidimensional-newton-minimization",
    "href": "slides/prep_4/index.html#multidimensional-newton-minimization",
    "title": "Optimization",
    "section": "Multidimensional Newton Minimization",
    "text": "Multidimensional Newton Minimization\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n-{\\color{\\red}{H(x_{n})^{-1}}}\\color{\\green}{ J(x_n)'}\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic\nProblem:\n\n\\(H(x_{n})\\) hard to compute efficiently\nrather unstable"
  },
  {
    "objectID": "slides/prep_4/index.html#quasi-newton-method-for-multidimensional-minimization",
    "href": "slides/prep_4/index.html#quasi-newton-method-for-multidimensional-minimization",
    "title": "Optimization",
    "section": "Quasi-Newton method for multidimensional minimization",
    "text": "Quasi-Newton method for multidimensional minimization\n\nRecall the secant method:\n\n\\(f(x_{n-1})\\) and \\(f(x_{n-2})\\) are used to approximate \\(f^{\\prime}(x_{n-2})\\).\nIntuitively, \\(n\\) iterates would be needed to approximate a hessian of size \\(n\\)….\n\nBroyden method: takes \\(2 n\\) steps to solve a linear problem of size \\(n\\)\n\nuses past information incrementally"
  },
  {
    "objectID": "slides/prep_4/index.html#quasi-newton-method-for-multidimensional-minimization-1",
    "href": "slides/prep_4/index.html#quasi-newton-method-for-multidimensional-minimization-1",
    "title": "Optimization",
    "section": "Quasi-Newton method for multidimensional minimization",
    "text": "Quasi-Newton method for multidimensional minimization\n\nConsider the approximation: \\[f(x_n)-f(x_{n-1}) \\approx J(x_n) (x_n - x_{n-1})\\]\n\n\\(J(x_n)\\) is unknown and cannot be determined directly as in the secant method.\nidea: \\(J(x_n)\\) as close as possible to \\(J(x_{n-1})\\) while solving the secant equation\nformula: \\[J_n = J_{n-1} + \\frac{(f(x_n)-f(x_{n-1})) - J_{n-1}(x_n-x_{n-1})}{||x_n-x_{n-1}||^2}(x_n-x_{n-1})^{\\prime}\\]"
  },
  {
    "objectID": "slides/prep_4/index.html#gauss-newton-minimization",
    "href": "slides/prep_4/index.html#gauss-newton-minimization",
    "title": "Optimization",
    "section": "Gauss-Newton Minimization",
    "text": "Gauss-Newton Minimization\n\nRestrict to least-square minimization: $min_x _i f(x)_i^2 R $\nThen up to first order, \\(H(x_n)\\approx J(x_n)^{\\prime}J(x_n)\\)\nUse the step: \\(({J(x_n)^{\\prime}J(x_n)})^{-1}\\color{\\green}{ J(x_n)}\\)\nConvergence:\n\ncan be quadratic at best\nlinear in general"
  },
  {
    "objectID": "slides/prep_4/index.html#levenberg-marquardt",
    "href": "slides/prep_4/index.html#levenberg-marquardt",
    "title": "Optimization",
    "section": "Levenberg-Marquardt",
    "text": "Levenberg-Marquardt\n\nLeast-square minimization: $min_x _i f(x)_i^2 R $\nreplace \\({J(x_n)^{\\prime}J(x_n)}^{-1}\\) by \\({J(x_n)^{\\prime}J(x_n)}^{-1} +\\mu I\\)\n\nadjust \\(\\lambda\\) depending on progress\n\nuses only gradient information like Gauss-Newton\nequivalent to Gauss-Newton close to the solution (\\(\\mu\\) small)\nequivalent to Gradient far from solution (\\(\\mu\\) high)"
  },
  {
    "objectID": "slides/prep_4/index.html#consumption-optimization",
    "href": "slides/prep_4/index.html#consumption-optimization",
    "title": "Optimization",
    "section": "Consumption optimization",
    "text": "Consumption optimization\nConsider the optimization problem: \\[\\max U(x_1, x_2)\\]\nunder the constraint \\(p_1 x_1 + p_2 x_2 \\leq B\\)\nwhere \\(U(.)\\), \\(p_1\\), \\(p_2\\) and \\(B\\) are given.\nHow do you find a solution by hand?"
  },
  {
    "objectID": "slides/prep_4/index.html#consumption-optimization-1",
    "href": "slides/prep_4/index.html#consumption-optimization-1",
    "title": "Optimization",
    "section": "Consumption optimization (1)",
    "text": "Consumption optimization (1)\n\nCompute by hand\nEasy:\n\nsince the budget constraint must be binding, get rid of it by stating \\(x_2 = B - p_1 x_1\\)\nthen maximize in \\(x_1\\), \\(U(x_1, B - p_1 x_1)\\) using the first order conditions.\n\nIt works but:\n\nbreaks symmetry between the two goods\nwhat if there are other constraints: \\(x_1\\geq \\underline{x}\\)?\nwhat if constraints are not binding?\nis there a better way to solve this problem?"
  },
  {
    "objectID": "slides/prep_4/index.html#consumption-optimization-2",
    "href": "slides/prep_4/index.html#consumption-optimization-2",
    "title": "Optimization",
    "section": "Consumption optimization (2)",
    "text": "Consumption optimization (2)\n\nAnother method, which keeps the symmetry. Constraint is binding, trying to minimize along the budget line yields an implicit relation between \\(d x_1\\) and \\(d x_2\\) \\[p_1 d {x_1} + p_2 d {x_2} = 0\\]\nAt the optimal: \\(U^{\\prime}_{x_1}(x_1, x_2)d {x_1} + U^{\\prime}_{x_2}(x_1, x_2)d {x_2} = 0\\)\nEliminate \\(d {x_1}\\) and \\(d {x_2}\\) to get one condition which characterizes optimal choices for all possible budgets. Combine with the budget constraint to get a second condition."
  },
  {
    "objectID": "slides/prep_4/index.html#penalty-function",
    "href": "slides/prep_4/index.html#penalty-function",
    "title": "Optimization",
    "section": "Penalty function",
    "text": "Penalty function\n\nTake a penalty function \\(p(x)\\) such that \\(p(x)=K&gt;0\\) if \\(x&gt;0\\) and \\(p(x)=0\\) if \\(x \\leq 0\\). Maximize: \\(V(x_1, x_2) = U(x_1, x_2) - p( p_1 x_1 + p_2 x_2 - B)\\)\nClearly, \\(\\min U \\iff \\min V\\)\nProblem: \\(\\nabla V\\) is always equal to \\(\\nabla U\\).\nSolution: use a smooth solution function like \\(p(x) = x^2\\)\nProblem: distorts optimization\n\nSolution: adjust weight of barrier and minimize \\(U(x_1, x_2) - \\kappa p(x)\\)\n\nPossible but hard to choose the weights/constraints."
  },
  {
    "objectID": "slides/prep_4/index.html#penalty-function-1",
    "href": "slides/prep_4/index.html#penalty-function-1",
    "title": "Optimization",
    "section": "Penalty function",
    "text": "Penalty function\n\nAnother idea: is there a canonical way to choose \\(\\lambda\\) such that at the minimum it is equivalent to minimize the original problem under constraint or to minimize \\[V(x_1, x_2) = U(x_1, x_2) - \\lambda (p_1 x_1 + p_2 x_2 - B)\\]\nClearly, when the constraint is not binding we must have \\(\\lambda=0\\). What should be the value of \\(\\lambda\\) when the constraint is binding ?"
  },
  {
    "objectID": "slides/prep_4/index.html#karush-kuhn-tucker-conditions",
    "href": "slides/prep_4/index.html#karush-kuhn-tucker-conditions",
    "title": "Optimization",
    "section": "Karush-Kuhn-Tucker conditions",
    "text": "Karush-Kuhn-Tucker conditions\n\nIf \\((x^{\\star},y^{\\star})\\) is optimal there exists \\(\\lambda\\) such that:\n\n\\((x^{\\star},y^{\\star})\\) maximizes lagrangian \\(\\mathcal{L} = U(x_1, x_2) + \\lambda (B- p_1 x_1 - p_2 x_2)\\)\n\\(\\lambda \\geq 0\\)\n\\(B- p_1 x_1 - p_2 x_2 \\geq 0\\)\n\\(\\lambda  (B - p_1 x_1 - p_2 x_2 ) = 0\\)\n\nThe three latest conditions are called “complementarity” or “slackness” conditions\n\nthey are equivalent to \\(\\min(\\lambda, B - p_1 x_1 - p_2 x_2)=0\\)\nwe denote \\(\\lambda \\geq 0 \\perp B- p_1 x_1 + p_2 x_2  \\geq 0\\)\n\n\\(\\lambda\\) can be interpreted as the welfare gain of relaxing the constraint."
  },
  {
    "objectID": "slides/prep_4/index.html#karush-kuhn-tucker-conditions-1",
    "href": "slides/prep_4/index.html#karush-kuhn-tucker-conditions-1",
    "title": "Optimization",
    "section": "Karush-Kuhn-Tucker conditions",
    "text": "Karush-Kuhn-Tucker conditions\n\nWe can get first order conditions that factor in the constraints:\n\n\\(U^{\\prime}_x - \\lambda p_1 = 0\\)\n\\(U^{\\prime}_y - \\lambda p_2 = 0\\)\n\\(\\lambda \\geq 0 \\perp B-p_1 x_1 -p_2 x_2 \\geq 0\\)\n\nIt is now a nonlinear system of equations with complementarities (NCP)\n\nthere are specific solution methods to deal with it"
  },
  {
    "objectID": "slides/prep_4/index.html#solution-strategies-for-ncp-problems",
    "href": "slides/prep_4/index.html#solution-strategies-for-ncp-problems",
    "title": "Optimization",
    "section": "Solution strategies for NCP problems",
    "text": "Solution strategies for NCP problems\n\nGeneral formulation for vector-valued functions \\[f(x)\\geq 0 \\perp g(x)\\geq 0\\] means \\[\\forall i, f_i(x)\\geq 0 \\perp g_i(x)\\geq 0\\]\n\nNCP do not necessarily arise from a single optimization problem\n\nThere are robust (commercial) solvers for NCP problems (PATH, Knitro) for that\nHow do we solve it numerically?\n\nassume constraint is binding then non-binding then check which one is good\n\nOK if not too many constraints\n\nreformulate it as a smooth problem\napproximate the system by a series of linear complementarities problems (LCP)"
  },
  {
    "objectID": "slides/prep_4/index.html#smooth-method",
    "href": "slides/prep_4/index.html#smooth-method",
    "title": "Optimization",
    "section": "Smooth method",
    "text": "Smooth method\n\nConsider the Fisher-Burmeister function \\[\\phi(a,b) = a+b-\\sqrt{a^2+b^2}\\]\nIt is infinitely differentiable, except at \\((0,0)\\)\nShow that \\(\\phi(a,b) = 0 \\iff \\min(a,b)=0 \\iff a\\geq 0 \\perp b \\geq 0\\)\nAfter substitution in the original system one can use regular non-linear solver\n\nfun fact: the formulation with a \\(\\min\\) is nonsmooth but also works quite often"
  },
  {
    "objectID": "slides/prep_4/index.html#optimization-libraries",
    "href": "slides/prep_4/index.html#optimization-libraries",
    "title": "Optimization",
    "section": "Optimization libraries",
    "text": "Optimization libraries\n\nRobust optimization code is contained in the following libraries:\n\nRoots.jl: one-dimensional root finding\nNLSolve.jl: multidimensional root finding (+complementarities)\nOptim.jl: minimization\n\nThe two latter libraries have a somewhat peculiar API, but it’s worth absorbing it.\n\nin particular they provide non-allocating algorithms for functions that modify arguments in place\nthey are compatible with automatic differentiation\n\n\njulia&gt; f(x) = [x[1] - x[2] - 1, x[1] + x[2]]\nf (generic function with 1 method)\n\njulia&gt; NLsolve.nlsolve(f, [0., 0.0])\nResults of Nonlinear Solver Algorithm\n * Algorithm: Trust-region with dogleg and autoscaling\n * Starting Point: [0.0, 0.0]\n * Zero: [0.5000000000009869, -0.5000000000009869]\n * Inf-norm of residuals: 0.000000       \n * Iterations: 1                       \n * Convergence: true\n   * |x - x'| &lt; 0.0e+00: false\n   * |f(x)| &lt; 1.0e-08: true                           \n * Function Calls (f): 2\n * Jacobian Calls (df/dx): 2"
  },
  {
    "objectID": "slides/prep_3/index.html#today",
    "href": "slides/prep_3/index.html#today",
    "title": "Perturbation Analysis",
    "section": "Today",
    "text": "Today\nStudy Neoclassical Model of Growth with Deterministic Productivity Shocks\n\nDerive First Order Conditions\nComputing Derivatives Numerically\nSolution Method\n\nLinear Time Iteration\n\nImplementation"
  },
  {
    "objectID": "slides/prep_3/index.html#neoclassical-growth-model",
    "href": "slides/prep_3/index.html#neoclassical-growth-model",
    "title": "Perturbation Analysis",
    "section": "Neoclassical Growth Model",
    "text": "Neoclassical Growth Model\n\n\n\nTransition Equation \\[\\begin{eqnarray}\nk_t & = & (1-\\delta) k_{t-1} + i_{t-1} \\\\\nz_t & = & \\rho z_{t-1}\n\\end{eqnarray}\n\\]\nDefinition: \\[c_t = \\exp(z_t) k_t^\\alpha - i_t\\]\nControl \\(i_t\\in[0, \\exp(z_t)k_t^\\alpha[\\)\n\nor equivalently \\(c_t \\in ]0, \\exp(z_t) k_t^{\\alpha}]\\)\n\nObjective: \\[\\max_{i_t} \\sum_{t\\geq0} \\beta^t U(c_t)\\]\n\n\n\nCalibration:\n\n\\(\\beta = 0.96\\)\n\\(\\delta = 0.1\\)\n\\(\\gamma = 4.0\\)\n\\(\\alpha = 0.3\\)\n\\(U(x)=\\frac{x^{1-\\gamma}}{1-\\gamma}\\)"
  },
  {
    "objectID": "slides/prep_3/index.html#deriving-first-order-conditions-1",
    "href": "slides/prep_3/index.html#deriving-first-order-conditions-1",
    "title": "Perturbation Analysis",
    "section": "Deriving First Order Conditions",
    "text": "Deriving First Order Conditions\n\nTwo methods:\n\nBellman:\n\nOptimality Condition\nEnveloppe Condition\n\nLagrangian:\n\nWe will use the lagrangian version"
  },
  {
    "objectID": "slides/prep_3/index.html#lagrangian",
    "href": "slides/prep_3/index.html#lagrangian",
    "title": "Perturbation Analysis",
    "section": "Lagrangian",
    "text": "Lagrangian\n\nInitial Conditions (predetermined states): \\(z_0\\), \\(k_0\\)\nProblem: \\[V(z_0, k_0) = \\max_{\\begin{matrix}i_0, i_1, i_2, \\cdots \\\\c_0, c_1, c_2 \\cdots \\\\ k_1, k_2, \\cdots\\end{matrix}} \\sum_{t \\geq 0}\\beta^t U(c_t)\\]\n\n\\[\\text{s.t.}\\forall t\\geq 0, \\; \\; \\begin{eqnarray}\n\\mu_t:\\quad &  0 & \\leq & i_t  \\\\\n\\nu_t:\\quad &  i_t & \\leq & \\exp(z_t) k_t^{\\alpha} \\\\\n\\lambda_t:\\quad &  i_t & = & \\exp(z_t) k_t^{\\alpha} - c_t\\\\\nq_t:\\quad &  k_{t+1} & = & (1-\\delta) k_{t} + i_{t}\n\\end{eqnarray}\\]\n\nLagrangian: \\[\n\\mathcal{L} (z_0, k_0) = \\sum_{t \\geq 0} \\beta^t\\left\n\\{ U(c_t) + \\mu_t \\left( i_t \\right) + \\nu_t \\left(\\exp(z_t)k_t^{\\alpha} - i_t \\right) + \\lambda_t \\left(\\exp(z_t) k_t^{\\alpha}  - i_t -c_t \\right)  + q_t \\left( (1-\\delta) k_{t} + i_{t} - k_{t+1} \\right) \\right\\}\n\\]"
  },
  {
    "objectID": "slides/prep_3/index.html#lagrangian-1",
    "href": "slides/prep_3/index.html#lagrangian-1",
    "title": "Perturbation Analysis",
    "section": "Lagrangian",
    "text": "Lagrangian\n\n\n\nWe maximize the lagrangian to get:\n\n\\[\\begin{eqnarray}\n\\forall t\\geq0 & \\frac{\\partial \\mathcal{L}}{\\partial i_t} & = & 0 \\\\\n& \\frac{\\partial \\mathcal{L}}{\\partial c_t} & = & 0 \\\\\n& \\frac{\\partial \\mathcal{L}}{\\partial k_{t+1}} & = & 0\n\\end{eqnarray}\\]\n\nIt is important to note that we don’t differentiate with respect to a predetermined state\n\ncheck that you don’t differentiate w.r.t. \\(k_0\\)\n\nIt looks like the first order condition added four new variables \\(\\mu_t\\),\\(\\nu_t\\), \\(\\lambda_t\\), \\(q_t\\)\n\n\n\nLuckily these variables are associated to slackness conditions.\n\n\n\n\n\\(\\mu_t \\geq 0\\)\n\\(i_t \\geq 0\\)\n\n\n\\(\\nu_t \\geq 0\\)\n\\(\\exp(z_t) k_t^{\\alpha}-i_t \\geq 0\\)\n\n\n\\(q_t \\geq 0\\)\n\\((1-\\delta) k_{t} + i_{t} - k_{t+1} \\geq 0\\)\n\n\n\\(\\lambda_t \\geq 0\\)\n\\(\\exp(z_t) k_t^{\\alpha}  - i_t -c_t = 0\\)\n\n\n\n\nThe Karush-Kuhn-Tucker states, that for each slackness condition, at any time, either\n\nthe lagrangian is 0 and it disappears from the F.O.C.s\nor it is not 0 and the associated constraint adds another condition"
  },
  {
    "objectID": "slides/prep_3/index.html#eliminating-constraints",
    "href": "slides/prep_3/index.html#eliminating-constraints",
    "title": "Perturbation Analysis",
    "section": "Eliminating constraints",
    "text": "Eliminating constraints\n\n\n\n\n\n\\(\\mu_t \\geq 0\\)\n\\(i_t \\geq 0\\)\n\n\n\\(\\nu_t \\geq 0\\)\n\\(\\exp(z_t) k_t^{\\alpha}-i_t \\geq 0\\)\n\n\n\\(q_t\\)\n\\((1-\\delta) k_{t} + i_{t} - k_{t+1} = 0\\)\n\n\n\\(\\lambda_t\\)\n\\(\\exp(z_t) k_t^{\\alpha}  - i_t -c_t = 0\\)\n\n\n\n\nIn general slackness conditions can be occasionally binding\nFor perturbation analysis, we need constraints to be always (or never binding)\n\n\nLet’s review them:\n\n\\(\\nu_t\\): it is equivalent to \\(c_t\\geq 0\\)\n\nwe necessarily have \\(c_t&gt;0\\) since \\(U^{\\prime}(0)=\\infty\\)\nhence \\(\\nu_t=0\\)\n\n\\(\\mu_t\\): it states \\(k_{t+1}\\geq 0\\)\n\nif \\(k_{t+1}=0\\), then \\(c_{t+1}\\). We can conclude \\(k_{t+1}&gt;0\\)\nhence \\(\\mu_t=0\\)\n\nfor multipliers associated to an equality constraint, we always keep the system\n\nmultiplier can have any sign\n\ninequality formulation is sometimes found too:\n\n\\(c_t \\leq \\exp(z_t) k_t^{\\alpha}  - i_t\\) ( you can destroy production insead of eating or investing it)\n\\(k_{t+1} \\leq (1-\\delta) k_{t} + i_{t}\\) (you can destroy capital instead of investing it)"
  },
  {
    "objectID": "slides/prep_3/index.html#first-order-model",
    "href": "slides/prep_3/index.html#first-order-model",
    "title": "Perturbation Analysis",
    "section": "First order model",
    "text": "First order model\n\nOptimality Condition: \\[\\beta  \\left[ \\frac{\\left(c_{t+1}\\right)^{-\\gamma}}{\\left(c_t\\right)^{-\\gamma}} \\left( (1-\\delta + \\alpha exp(z_{t+1})k_{t+1}^{\\alpha -1}) \\right)\\right] = 1\\]\n\nTakes into account the fact that \\(c_t&gt;0\\).\n\nDefinition: \\[c_t = exp(z_t) k_t^\\alpha - i_t\\]\nTransition: \\[k_t = (1-\\delta) k_{t-1} + i_{t-1}\\] \\[z_t = \\rho z_{t-1}\\]"
  },
  {
    "objectID": "slides/prep_3/index.html#steady-state",
    "href": "slides/prep_3/index.html#steady-state",
    "title": "Perturbation Analysis",
    "section": "Steady-State",
    "text": "Steady-State\n\n\n\nSteady-State: \\(\\overline{i}, \\overline{k}, \\overline{z}\\) such that:\n\n\\(z_{t+1}=z_t=\\overline{z}\\)\n\\(k_{t+1}=k_t=\\overline{k}\\)\n\\(i_{t+1}=i_t=\\overline{i}\\)\n\\(c_{t+1}=c_t=\\overline{c}\\)\n\n…satisfy the first order conditions\n…i.e.\n\n\\[\n\\begin{eqnarray}\n1 & = & \\beta   \\left( (1-\\delta + \\alpha {\\overline{k}}^{\\alpha -1}) \\right)  \\\\\n\\overline{k} & = & (1-\\delta) \\overline{k} + \\overline{i} \\\\\n\\overline{z} & = & \\rho \\overline{z} \\\\\n\\overline{c} & = & \\overline{k}^{\\alpha} - \\overline{i}\n\\end{eqnarray}\n\\]\n\n\nSolution?\n\nclosed-form\nnumerical\n\nHere we can get a closed form:\n\n\\[\\begin{eqnarray}\n\\overline{k} & = & \\left( \\frac{\\frac{1}{\\beta}-(1-\\delta)}{\\alpha} \\right)^{\\frac{1}{\\alpha - 1}} \\\\\n\\overline{i} & = & \\delta \\overline{k} \\\\\\\n\\overline{z} & = & 0 \\\\\n\\overline{c} & = & \\overline{k}^{\\alpha} - \\overline{i}\n\\end{eqnarray}\\]"
  },
  {
    "objectID": "slides/prep_3/index.html#perturbation-analysis",
    "href": "slides/prep_3/index.html#perturbation-analysis",
    "title": "Perturbation Analysis",
    "section": "Perturbation Analysis",
    "text": "Perturbation Analysis\n\n\n\nWrite all variables in deviation to the steady-state: \\[z_{t}=\\overline{z} + \\Delta z_t\\] \\[k_{t}=\\overline{k} + \\Delta k_t\\] \\[i_{t}=\\overline{i} + \\Delta i_t\\] \\[c_{t}=\\overline{c} + \\Delta c_t\\]\n\nRemark: some smart economists use log-deviations (i.e. \\(x_t = \\overline{x} \\hat{x}_t\\) to make computations easier)\n\n\n\n\nReplace in the system \\[\\beta  \\left[ \\frac{\\left(\\overline{c}+ \\Delta c_{t+1}\\right)^{-\\gamma}}{\\left(\\overline{c} + \\Delta c_t\\right)^{-\\gamma}} \\left( (1-\\delta + \\alpha (\\overline{k} + \\Delta k_{t+1})^{\\alpha -1}) \\right)\\right] = 1\\] \\[\\overline{c} + \\Delta c_t = (\\overline{k}+ \\Delta k_t)^\\alpha - \\overline{i} - \\Delta i_t\\] \\[\\overline{k} + \\Delta k_t = (1-\\delta) (\\overline{k}+ \\Delta k_{t-1}) + \\overline{i }+ \\Delta i_{t-1}\\] \\[\\overline{z }+ \\Delta z_t = \\overline{z}+ \\Delta \\rho z_{t-1}\\]\nDifferentiate…\n(if we want to limit the number of equations, we can replace \\(c_t\\) by its value)"
  },
  {
    "objectID": "slides/prep_3/index.html#result",
    "href": "slides/prep_3/index.html#result",
    "title": "Perturbation Analysis",
    "section": "Result:",
    "text": "Result:\n\nOptimality conditions \\[\\begin{bmatrix} . & . & . & . \\\\ \\end{bmatrix} \\begin{bmatrix} \\Delta i_t \\\\ \\Delta c_t  \\\\ \\Delta k_t \\\\ \\Delta z_t \\end{bmatrix} = \\begin{bmatrix} . & . & . \\\\ \\end{bmatrix} \\begin{bmatrix} \\Delta i_{t+1} \\\\  \\Delta c_{t+1} \\\\ \\Delta k_{t+1} \\\\ \\Delta z_{t+1} \\end{bmatrix} \\]\nTransition \\[ \\begin{bmatrix} \\Delta k_t \\\\ \\Delta z_t \\end{bmatrix} = \\begin{bmatrix} . & .  \\\\ . & . \\end{bmatrix} \\begin{bmatrix} \\Delta k_{t-1} \\\\ \\Delta z_{t-1} \\end{bmatrix}  + \\begin{bmatrix} . \\end{bmatrix} \\begin{bmatrix}\\Delta i_{t-1}\\end{bmatrix}\\]"
  },
  {
    "objectID": "slides/prep_3/index.html#julia-console",
    "href": "slides/prep_3/index.html#julia-console",
    "title": "Perturbation Analysis",
    "section": "Julia Console",
    "text": "Julia Console\n\nAccessible:\n\nfrom a good terminal\nfrom VSCode panel\n\nFour modes:\n\n``: REPL (read-eval-print)\n?: Help\n]: Package Management\n;: System Console"
  },
  {
    "objectID": "slides/prep_3/index.html#julia-package-ecosystem",
    "href": "slides/prep_3/index.html#julia-package-ecosystem",
    "title": "Perturbation Analysis",
    "section": "Julia package ecosystem",
    "text": "Julia package ecosystem\n\nLarge package ecosystem\nFairly good quality native code\nWrappers to low-level / foreign language libraries\n\nC: ccall\nFortran: fcall\nPython: PyCall"
  },
  {
    "objectID": "slides/prep_3/index.html#how-do-you-install-pckages",
    "href": "slides/prep_3/index.html#how-do-you-install-pckages",
    "title": "Perturbation Analysis",
    "section": "How do you install pckages?",
    "text": "How do you install pckages?\n\nShort and wrong answer: ] add PackageName\nBetter answer:\n\na project environment specifies all dependencies for a project\n\ninformations are contained in Project.toml\n\nchange directory to the right project\n\n; cd path_to_the_right_project\nyou can check where you are ; pwd (print working directory)\n\nactivate environment:\n\n] activate . (. universally means current director)\n\nadd desired package:\n\n] add PackageName\n\nwhen you restart work on a project activate, it again, to ensure you have the right dependencies"
  },
  {
    "objectID": "slides/prep_3/index.html#main-approaches",
    "href": "slides/prep_3/index.html#main-approaches",
    "title": "Perturbation Analysis",
    "section": "Main approaches",
    "text": "Main approaches\n\nBack to our problem, how to we differentiate the model?\nMain approaches:\n\nManual\nFinite Differences\nSymbolic Differentiation\nAutomatic Differentiation"
  },
  {
    "objectID": "slides/prep_3/index.html#manual-differentiation",
    "href": "slides/prep_3/index.html#manual-differentiation",
    "title": "Perturbation Analysis",
    "section": "Manual Differentiation",
    "text": "Manual Differentiation\n\nTrick:\n\nnever use \\(\\frac{d}{dx} \\frac{u(x)}{v(x)} = \\frac{u'(x)v(x)-u(x)v'(x)}{v(x)^2}\\)\n\ntoo error prone\n\nuse instead \\[\\frac{d}{dx} {u(x)v(x)} = {u'(x)v(x)+u(x)v'(x)}\\] and \\[\\frac{d}{dx} \\frac{1}{u(x)} = -\\frac{u^{\\prime}}{u(x)^2}\\]\n\nYou can get easier calculations (in some cases) by using log-deviation rules"
  },
  {
    "objectID": "slides/prep_3/index.html#finite-differences",
    "href": "slides/prep_3/index.html#finite-differences",
    "title": "Perturbation Analysis",
    "section": "Finite Differences",
    "text": "Finite Differences\n\n\n\n\nChoose small \\(\\epsilon&gt;0\\), typically \\(\\sqrt{ \\textit{machine eps}}\\)\n\ncheck eps()\n\nForward Difference scheme:\n\n\\(f'(x) \\approx \\frac{f(x+\\epsilon) - f(x)}{\\epsilon}\\)\nprecision: \\(O(\\epsilon)\\)\nbonus: if \\(f(x+\\epsilon)\\) can compute \\(f(x)-f(x-\\epsilon)\\) instead (Backward)\n\nCentral Difference scheme:\n\nFinite \\(f'(x) \\approx \\frac{f(x+\\epsilon) - f(x-\\epsilon)}{2\\epsilon}\\)\naverage of forward and backward\nprecision: \\(O(\\epsilon^2)\\)\n\n\n\n\nTwo packages FiniteDiff and FiniteDifferences.\nExample:\nusing FiniteDiff\n\ng(x) = [x[1]^2 x[2]^3]\nFiniteDiff.finite_difference_jacobian(g, [0.1, 0.2])"
  },
  {
    "objectID": "slides/prep_3/index.html#finite-differences-higher-order",
    "href": "slides/prep_3/index.html#finite-differences-higher-order",
    "title": "Perturbation Analysis",
    "section": "Finite Differences: Higher order",
    "text": "Finite Differences: Higher order\n\nCentral formula: \\[\n\\begin{aligned}\nf''(x) & \\approx & \\frac{f'(x)-f'(x-\\epsilon)}{\\epsilon} \\approx \\frac{(f(x+\\epsilon))-f(x))-(f(x)-f(x-\\epsilon))}{\\epsilon^2} \\\\ & = & \\frac{f(x+\\epsilon)-2f(x)+f(x-\\epsilon)}{\\epsilon^2}\n\\end{aligned}\n\\]\n\nprecision: \\(o(\\epsilon)\\)\n\nGeneralizes to higher order but becomes more and more innacurate"
  },
  {
    "objectID": "slides/prep_3/index.html#symbolic-differentiation",
    "href": "slides/prep_3/index.html#symbolic-differentiation",
    "title": "Perturbation Analysis",
    "section": "Symbolic Differentiation",
    "text": "Symbolic Differentiation\n\n\n\nmanipulate the tree of algebraic expressions\n\nimplements various simplification rules\n\nrequires mathematical expression\ncan produce mathematical insights\nsometimes inaccurate:\n\ncf: \\(\\left(\\frac{1+u(x)}{1+v(x)}\\right)^{100}\\)\n\n\n\nTwo main libraries:\n\nSymEngine.jl\n\nfast symbolic calculation\nmature C++ engine\n\nSymbolics.jl:\n\npure julia\nfinite difference\nsymbolic calculation\n\n\nExample using Symbolics:\nusing Symbolics\n@variables a x b y\neq = a*sin(x) + b*cos(y)\nSymbolics.derivative(eq, x)"
  },
  {
    "objectID": "slides/prep_3/index.html#automatic-differentiation",
    "href": "slides/prep_3/index.html#automatic-differentiation",
    "title": "Perturbation Analysis",
    "section": "Automatic Differentiation",
    "text": "Automatic Differentiation\n\nAutomatic Differentiation\n\ndoes not provide mathematical insights but solves the other problems\ncan differentiate any piece of code\ntwo flavours\n\nforward accumulation\nreverse accumulation"
  },
  {
    "objectID": "slides/prep_3/index.html#automatic-source-code-rewrite",
    "href": "slides/prep_3/index.html#automatic-source-code-rewrite",
    "title": "Perturbation Analysis",
    "section": "Automatic source code rewrite",
    "text": "Automatic source code rewrite\n\n\nConsider this simple function\nfunction f(x::Number)\n\n    a = x + 1\n    b = x^2\n    c = sin(a) \n    d = c + b\n\n    return d\n\nend\n\nWe can rewrite the code as follows:\nfunction f(x::Number)\n\n    # x is an argument\n    x_dx = 1.0\n\n    a = x + 1\n    a_dx = x_dx\n\n    b = x^2\n    b_dx = 2*x*x_dx\n\n    c = sin(a)\n    c_x = cos(a)*a_dx\n\n    d = c + b\n    d_x = c_dx + b_dx\n\n    return (d, d_x)\nend"
  },
  {
    "objectID": "slides/prep_3/index.html#dual-numbers-operator-overloading",
    "href": "slides/prep_3/index.html#dual-numbers-operator-overloading",
    "title": "Perturbation Analysis",
    "section": "Dual numbers: operator overloading",
    "text": "Dual numbers: operator overloading\nInstead of rewriting source code, we can use dual numbers to perform exactly the same calculations.\nstruct DN&lt;:Number\n    x::Float64\n    dx::Float64\nend\n\n+(a::DN,b::DN) = DN(a.x+b.x, a.dx+b.dx)\n-(a::DN,b::DN) = DN(a.x-b.x, a.dx-b.dx)\n*(a::DN,b::DN) = DN(a.x*b.x, a.x*b.dx+a.dx*b.x)\n/(a::DN,b::DN) = DN(a.x/b.x, (a.dx*b.x-a.x*b.dx)/b.dx^2)\n\n...\nTry it on function f What do we miss ?"
  },
  {
    "objectID": "slides/prep_3/index.html#dual-numbers",
    "href": "slides/prep_3/index.html#dual-numbers",
    "title": "Perturbation Analysis",
    "section": "Dual numbers",
    "text": "Dual numbers\nThis approach (and automatic differentiation in general) is compatible with control flow operations (if, while, …)\nLet’s see it with the dual numbers defined by ForwardDiff library:\nimport ForwardDiff: Dual\n\nx = Dual(1.0, 1.0)\na = 0.5*x\nb = sum([(x)^i/i*(-1)^(i+1) for i=1:5000])\n# compare with log(1+x)\n\ngeneralizes nicely to gradient computations\n\nx = Dual(1.0, 1.0, 0.0)\ny = Dual(1.0, 0.0, 1.0)\nexp(x) + log(y)"
  },
  {
    "objectID": "slides/prep_3/index.html#automatic-differentiation-2",
    "href": "slides/prep_3/index.html#automatic-differentiation-2",
    "title": "Perturbation Analysis",
    "section": "Automatic differentiation",
    "text": "Automatic differentiation\nThere are many flavours of automatic differenation (check JuliaDiff.org)\n \n \n\n\nForward Accumulation Mode\n\nisomorphic to dual number calculation\ncompute values and derivatives at the same time\nefficient for \\(f: R^n\\rightarrow R^m\\), with \\(n&lt;&lt;m\\)\n\n(keeps lots of empty gradients when \\(n&gt;&gt;m\\))\n\n\n\nReverse Accumulation Mode\n\nReverse Accumulation / Back Propagation\n\nefficient for \\(f: R^n\\rightarrow R^m\\), with \\(n&gt;&gt;m\\)\nrequires data storage (to keep intermediate values)\ngraph / example\n\nVery good for machine learning:\n\n\\(\\nabla_{\\theta} F(x;\\theta)\\) where \\(F\\) is a scalar objective"
  },
  {
    "objectID": "slides/prep_3/index.html#libraries-for-autodiff",
    "href": "slides/prep_3/index.html#libraries-for-autodiff",
    "title": "Perturbation Analysis",
    "section": "Libraries for AutoDiff",
    "text": "Libraries for AutoDiff\n\nSee JuliaDiff: http://www.juliadiff.org/\n\nForwardDiff.jl\nReverseDiff.jl\n\nZygote.jl\nDeep learning framework:\n\nhigher order diff w.r.t. any vector -&gt; tensor operations\nFlux.jl, MXNet.jl, Tensorflow.jl\n\n\n\n\n\n\n\n\n\nExample with ForwardDiff\n\n\nExample with ForwardDiff:\n  using ForwardDiff\nForwardDiff.jacobian(u-&gt;[u[1]^2, u[2]+u[1]], [0.1,0.2])"
  },
  {
    "objectID": "slides/prep_3/index.html#our-problem",
    "href": "slides/prep_3/index.html#our-problem",
    "title": "Perturbation Analysis",
    "section": "Our problem",
    "text": "Our problem\n\n\nGeneral formulation of a linearized model: \\[ \\begin{eqnarray} A s_t + B x_t + C s_{t+1} + D x_{t+1} & = & 0_{n_x} \\\\\ns_{t+1} & = & E s_t + F x_t \\end{eqnarray}\\] where:\n\n\\(s_t \\in \\mathbb{R}^{n_s}\\) is a vector of states\n\\(x_t \\in \\mathbb{R}^{n_x}\\) is a vector of controls\n\nRemark:\n\nfirst equation is forward looking\nsecond equation is backward looking\n\n\nIn the neoclassical model: \\[\\begin{eqnarray}\ns_t & = & (\\Delta z_t, \\Delta k_t) \\\\\nx_t & = & (\\Delta i_t, \\Delta c_t)\n\\end{eqnarray}\\]\nThe linearized system is: \\[\\begin{eqnarray}\nA & = & ...\\\\\nB & = & ...\\\\\nC & = & ...\\\\\nD & = & ...\\\\\nE & = & ...\\\\\nF & = &\n\\end{eqnarray}\\]"
  },
  {
    "objectID": "slides/prep_3/index.html#solution",
    "href": "slides/prep_3/index.html#solution",
    "title": "Perturbation Analysis",
    "section": "Solution",
    "text": "Solution\n\n\nWhat is the solution of our problem?\n\n\nAt date \\(t\\) controls must be chosen as a function of (predetermined) states\nMathematically speaking, the solution is a function \\(\\varphi\\) such that: \\[\\forall t, x_t = \\varphi(s_t)\\]\nSince the model is linear we look for un unknown matrix \\(X \\in \\mathbb{R}^{n_x} \\times \\mathbb{R}^{n_s}\\) such that: \\[\\Delta x_t = X \\Delta s_t\\]\n\n\n\nIn the neoclassical model\n\n\nThe states are \\(k_t\\) and \\(z_t\\)\nThe controls \\(i_t\\) and \\(c_t\\) must be a function of the states\n\nthere is a decision rule \\(i()\\), \\(c()\\) such that \\[i_t = i(z_t, k_t)\\] \\[c_t = c(z_t, k_t)\\]\n\nIn the linearized model: \\[\\Delta i_t =i_z \\Delta z_t + i_k \\Delta k_t\\] \\[\\Delta c_t =c_z \\Delta z_t + c_k \\Delta k_t\\]"
  },
  {
    "objectID": "slides/prep_3/index.html#optimality-condition",
    "href": "slides/prep_3/index.html#optimality-condition",
    "title": "Perturbation Analysis",
    "section": "Optimality condition:",
    "text": "Optimality condition:\n\n\nReplacing in the system: \n\\[\\Delta x_t  =  X \\Delta s_t\\] \\[\\Delta s_{t+1}  =  E \\Delta s_t + F X \\Delta s_t\\] \\[\\Delta x_{t+1}  =  X \\Delta s_{t+1}\\] \\[A \\Delta s_t + B \\Delta x_t + C \\Delta s_{t+1} + D \\Delta x_{t+1}  =  0\\]\nIf we make the full substitution:\n\\[( (A + B X) + ( D X + C) ( E  + F X ) ) \\Delta s_t = 0\\]\n\nThis must be true for all \\(s_t\\). We get the special Ricatti equation:\n\\[(A + B {\\color{red}{X}} ) + ( D {\\color{red}{X}} + C) ( E  + F {\\color{red}X} ) = 0\\]\nThis is a quadratic, matrix ( \\(X\\) is 2 by 2 ) equation:\n\nrequires special solution method\nthere are multiple solutions: which should we choose?\ntoday: linear time iteration selects only one solution\n\nalternative: eigenvalues analysis"
  },
  {
    "objectID": "slides/prep_3/index.html#linear-time-iteration",
    "href": "slides/prep_3/index.html#linear-time-iteration",
    "title": "Perturbation Analysis",
    "section": "Linear Time Iteration",
    "text": "Linear Time Iteration\n\nLet’s be more subtle: define\n\n\\(X\\): decision rule today and\n\\(\\tilde{X}\\): is decision rule tomorrow. \\[\\begin{eqnarray}\n\\Delta x_t & =&  X \\Delta s_t \\\\\n\\Delta s_{t+1} & = & E \\Delta  s_t + F X \\Delta s_t \\\\\n\\Delta x_{t+1} & = & \\tilde{X} \\Delta s_{t+1} \\\\\nA \\Delta s_t + B \\Delta x_t + C \\Delta s_{t+1} + D \\Delta x_{t+1} & = & 0\n\\end{eqnarray}\\]\n\nWe get, \\(\\forall s_t\\): \\[(A + B X) + (C + D \\tilde{X}) ( E  + F X ) ) \\Delta s_t = 0 \\]\nAgain, this must be zero in all states \\(\\Delta s_t\\)."
  },
  {
    "objectID": "slides/prep_3/index.html#linear-time-iteration-2",
    "href": "slides/prep_3/index.html#linear-time-iteration-2",
    "title": "Perturbation Analysis",
    "section": "Linear Time Iteration (2)",
    "text": "Linear Time Iteration (2)\n\n\n\nWe get the equation: \\[\\begin{eqnarray}\nF(X, \\tilde{X}) & = & (A + B X) + ( C+ D \\tilde{X}) ( E  + F X ) \\\\&=& 0\n\\end{eqnarray}\\]\nConsider the linear time iteration algorithm\nWhen the model is well-specified it is guaranteed to converge to the right solution.\n\ncf linear time iteration by Pontus Rendahl (link)\n\nThere are simple criteria to check that the solution is right, and that the model is well specified\n\\(T\\) is the time iteration operator… for linear models\n\nit does forward iteration (\\(X_t\\) as a function of \\(X_{t+1}\\))\n\n\n\nAlgorithm:\n\nchoose stopping criteria: \\(\\epsilon_0\\) and \\(\\eta_0\\)\nchoose random \\(X_0\\)\ngiven \\(X_n\\):\n\ncompute \\(X_{n+1}\\) such that \\(F(X_{n+1}, X_{n}) = 0\\) \\[(B + (C+D X_{n})F)X_{n+1} + A  + (C+D X_n )E=0\\]\\[X_{n+1} = - (B + (C + D X_n) F)^{-1} (A + (C+DX_n)E)\\]\\[X_{n+1} = T(X_n)\\]\ncompute:\n\n\\(\\eta_n = |X_{n+1} - X_n|\\)\n\\(\\epsilon_n = F(X_{n+1}, X_{n+1})\\)\n\nif \\(\\eta_n&lt;\\eta_0\\) and \\(\\epsilon_n&lt;\\epsilon_0\\)\n\nstop and return \\(X_{n+1}\\)\notherwise iterate with \\(X_{n+1}\\)"
  },
  {
    "objectID": "slides/prep_3/index.html#simulating-the-model",
    "href": "slides/prep_3/index.html#simulating-the-model",
    "title": "Perturbation Analysis",
    "section": "Simulating the model",
    "text": "Simulating the model\n\nSuppose we have found the solution \\(\\Delta x_t  = X \\Delta s_t\\)\nRecall the transition equation: \\(\\Delta s_{t+1} = F \\Delta s_t + G \\Delta x_t\\)\nWe can now compute the model evolution following initial deviation in the state: \\[\\Delta s_t = \\underbrace{(F + G X)}_{P} \\Delta s_{t-1}\\]\n\n\\(P\\) is the simulation operator\nit is a backward operator (TODO: example of a reaction to a shock)\n\nThe system is stable if the biggest eigenvalue of \\(P\\) is smaller than one…\n… or if its spectral radius is smaller than 1: \\[\\rho(P)&lt;1\\]\nThis condition is called backward stability\n\nit rules out explosive solutions\nif \\(\\rho(P)&gt;1\\) one can always find \\(s_0\\) such that the model simulation diverges"
  },
  {
    "objectID": "slides/prep_3/index.html#spectral-radius",
    "href": "slides/prep_3/index.html#spectral-radius",
    "title": "Perturbation Analysis",
    "section": "Spectral radius",
    "text": "Spectral radius\n\n\n\nHow do you compute the spectral radius of matrix P?\n\nnaive approach: compute all eigenvalues, check the value of the biggest one…\n\nusing LinearAlgebra\nM = rand(2,2)\nmaximum(abs, eigvals(M))\n\nbecomes limited when size of matrix growth\nanother approach: power iteration method\n\nPower iteration method:\n\nworks for matrices and linear operators\ntake a linear operator \\(L\\) over a Banach Space \\(\\mathcal{B}\\) (vector space with a norm)\nuse the fact that for most \\(u_0\\in \\mathcal{B}\\), \\(\\frac{|L^{n+1} u_0|}{|L^n u_0|}\\rightarrow \\rho(L)\\)\n\n\n\nAlgorithm:\n\nchoose tolerance criterium: \\(\\eta&gt;0\\)\nchoose random initial \\(x_0\\) and define \\(u_0 = \\frac{x_0}{|x_0|}\\)\n\nby construction: \\(|u_0|=1\\)\n\ngiven \\(u_n\\), compute\n\n\\(x_{n+1} = L.u_n\\)\n\\(u_{n+1} = \\frac{x_{n+1}}{|x_{n+1}|}\\)\ncompute \\(\\eta_{n+1} = |u_{n+1} - u_n|\\)\nif \\(\\eta_{n+1}&lt;\\eta\\):\n\nstop and return \\(|x_{n+1}|\\)\nelse iterate with \\(u_{n+1}\\)"
  },
  {
    "objectID": "slides/prep_3/index.html#stability-of-the-backward-operator",
    "href": "slides/prep_3/index.html#stability-of-the-backward-operator",
    "title": "Perturbation Analysis",
    "section": "Stability of the backward operator",
    "text": "Stability of the backward operator\nTo solve the model we use the backard operator: \\[T: \\begin{eqnarray} \\mathbb{R}^{n_x} \\times \\mathbb{R}^{n_s}  & \\rightarrow &  \\mathbb{R}^{n_x} \\times \\mathbb{R}^{n_s}  \\\\X_{t+1} & \\mapsto & X_t \\text{s.t.} F(X_t,X_{t+1})=0\\end{eqnarray}\\]\n\nWhat about its stability?\nRecall: fixed point \\(\\overline{z}\\) of recursive sequence \\(z_n=f(z_{n_1})\\) is stable if \\(|f^{\\prime}(\\overline{z})|&lt;1\\)\n\n\n\n\nWe need to study \\(T^{\\prime}\\) of (\\(X\\)).\n\nbut \\(T\\) maps a matrix to another matrix 🐉😓\nhow do we differentiate it?"
  },
  {
    "objectID": "slides/prep_3/index.html#differentials",
    "href": "slides/prep_3/index.html#differentials",
    "title": "Perturbation Analysis",
    "section": "Differentials",
    "text": "Differentials\n\nConsider a Banach Space \\(\\mathcal{B}\\).\nConsider an operator (i.e. a function): \\(\\mathcal{T}: \\mathcal{B} \\rightarrow \\mathcal{B}\\).\nConsider \\(\\overline{x} \\in \\mathcal{B}\\).\n\\(\\mathcal{T}\\) is differentiable at \\(\\overline{x}\\) if there exists a bounded linear operator \\(L \\in \\mathcal{L}(\\mathcal{B})\\) such that: \\[\\mathcal{T}(x) = \\overline{x} + L.(x-\\overline{x}) + o(|x-\\overline{x}|)\\]\n\nwhen it exists we denote this operator by \\(\\mathcal{T}^{\\prime}(\\overline{x})\\)\n\nRemarks:\n\nBounded operator means: \\(\\sup_{|x|=1} |L.x|&lt;+\\infty\\)\nThis definition of a derivative is usually referred to as Fréchet-derivative"
  },
  {
    "objectID": "slides/prep_3/index.html#examples-of-linear-operators",
    "href": "slides/prep_3/index.html#examples-of-linear-operators",
    "title": "Perturbation Analysis",
    "section": "Examples of linear operators",
    "text": "Examples of linear operators\n\n\\(x\\) vector, A a matrix, \\(T(x) = Ax\\)\n\nthen \\(T(x+u) = Ax + A.u + 0\\)\n\\(T^{\\prime}(x) = A\\) for all x\n\n\\(A\\) a matrix, B a matrix, X a matrix: \\(T(X) = A X B\\)\n\nthen \\(T(X+u) = A X B + A u B + 0\\)\n\\(T^{\\prime}(X).u = A u B\\)\n\n\\(A\\) a matrix, X a matrix: \\(T(X) = A X B\\)\n\nthen \\(T(X+u) = A X B + A u B\\)\n\\(T^{\\prime}(X).u = A u B\\)"
  },
  {
    "objectID": "slides/prep_3/index.html#back-to-the-time-iteration-operator",
    "href": "slides/prep_3/index.html#back-to-the-time-iteration-operator",
    "title": "Perturbation Analysis",
    "section": "Back to the time iteration operator",
    "text": "Back to the time iteration operator\n\n\\(T(X)\\) is implicitly defined by \\(F(T(X), X)=0\\)\n\\(F(X,Y) = (A + B X) + ( C+ D Y) ( E  + F X )\\)\n\nit is linear in \\(X\\) and in \\(Y\\)\n\n\\(F^{\\prime}_X (X, Y).u = (B + (C+DY)F) u\\)\n\na regular matrix multiplication\nits inverse is: \\(F^{\\prime}_X (X, Y)^{-1} = (B + (C+DY)F)^{-1}\\)\n\n\\(F^{\\prime}_Y (X, Y).u = D u (E+FX)\\)\n\na linear operation on matrices"
  },
  {
    "objectID": "slides/prep_3/index.html#the-derivative-of-the-time-iteration-operator",
    "href": "slides/prep_3/index.html#the-derivative-of-the-time-iteration-operator",
    "title": "Perturbation Analysis",
    "section": "The derivative of the time-iteration operator",
    "text": "The derivative of the time-iteration operator\n\nImplicit relation can be differentiated: \\[F^{\\prime}_X (T(X), X) T^{\\prime} (X) + F_Y^{\\prime}(T(X),X) = 0\\]\n\\(F^{\\prime}_X (T(X), X)\\) being a regular matrix, it is (conceptually) easy to invert: \\[T^{\\prime}(X) = -(F^{\\prime}_X (T(X), X))^{-1}F_Y^{\\prime}(T(X),X)\\]\nFinally, we get the explicit formula for the linear operator \\(T^{\\prime}\\) computed at the steady state: \\[T^{\\prime}(\\overline{X}).u = ((B + (C+D \\overline{X})F)^{-1})D u (E+F \\overline{X})\\]\nWe can compute the spectral radius of \\(T^{\\prime}(\\overline{X})\\) using the power iteration method"
  },
  {
    "objectID": "slides/prep_3/index.html#recap",
    "href": "slides/prep_3/index.html#recap",
    "title": "Perturbation Analysis",
    "section": "Recap",
    "text": "Recap\n\nWe compute the derivatives of the model\nTime iteration algorithm, starting from an initial guess \\(X_0\\) and we repeat until convergence: \\[X_{n+1} = (B + (C + D X_n) F)^{-1} (A + (C+DX_n)E)\\]\nWe compute the spectral radius of two operators to ensure the model is well defined and that the solution is the right one.\nbackward stability: derivative of simulation operator \\[\\boxed{\\rho(F + H \\overline{X} )}\\]\nforward stability: derivative of time iteration operator \\[\\boxed{\\rho \\left( u\\mapsto ((B + (C+D \\overline{X})F)^{-1})D u (E+F \\overline{X}) \\right)}\\]"
  },
  {
    "objectID": "slides/rbc.html",
    "href": "slides/rbc.html",
    "title": "Real Business Cycles, with Dolo",
    "section": "",
    "text": "Like the neo-classical growth model\nWith shocks\nWith labour\nWith a decentralized interpretation\n\n\n\n\n\n\n\n\nstates:\n\nproductivity: \\(z_t\\)\ncapital: \\(k_t\\)\n\ntwo independent control variables:\n\nconsumption: \\(c_t \\in [0,y_t], c_t\\geq 0, c_t\\leq y_t\\)\nlabor: \\(n_t\\)\n\nshock:\n\ntfp shock: \\(\\epsilon_t \\sim \\mathcal{N}(0,\\sigma)\\)\n\nobjective: \\[\\max_{\\begin{matrix}c_t, n_t\\\\\\\\c_t \\geq 0, y_t \\geq c_t, n_t \\geq 0, 1 \\geq n_t\\end{matrix}} \\mathbb{E}_0 \\left[ \\sum \\beta^t \\left( U(c_t) + \\chi V(1-n_t) \\right) \\right]\\]\nU and V satisfy Inada conditions, ie \\(U^{\\prime}&gt;0, U^{\\prime \\prime}&lt;0, U^{\\prime}(0)=\\infty\\)\n\n\n\n\ndefinitions:\n\nproduction: \\[y_t  = \\exp(z_t) k_t^{\\alpha} n^{1-\\alpha} + i_t\\]\ninvestment: \\[i_t = y_t - c_t\\]\n\ntransitions: \\[\\begin{eqnarray}\nz_t = (1-\\rho) z_{t-1} + \\epsilon_t\\\\\\\\\nk_t = (1-\\delta) k_{t-1} + i_{t-1}\n\\end{eqnarray}\\]\n\n\n\n\n\n\n\nTwo variables optimization: \\[\\max_{\\begin{matrix}c_1, c_2\\\\\\\\p_1 c_1 + p_2 c_t \\leq B\\end{matrix}} U(c_1, c_2)\\]\nDeterministic opimization (finite horizon) \\[\\max_{\\begin{matrix}c_0, c_1, c_2, ... c_T \\\\\\\\ c_0 + c_1 + \\cdots + c_T \\leq B\\\\\\\\c_0\\geq0, \\cdots c_T \\geq 0 \\end{matrix}} \\sum_{i=1}^{T} \\beta^i U(c_i)\\]\nDeterministic opimization (infinite horizon) \\[\\max_{\\begin{matrix}c_0, c_1, ... \\\\\\\\ c_0 + c_1 + \\cdots \\leq B\\\\\\\\c_0\\geq0, c_1\\geq 0, \\cdots \\end{matrix}} \\sum_{i=1}^{\\infty} \\beta^i U(c_i)\\]\n\n\n\n\n\n\n\n\nexogenous process defines an event tree \\((s)\\)\n\nit is a very useful concept to understand stochastic optimization, complete markets, etc.\nmath for continuous processes a bit involved (filtrations, …), but most intuition can be gained from discrete process\n\n\n\n\n\nhead or tail\n\n\n\n\n\nconsider a discrete process (for instance \\(\\epsilon_t \\in [ \\overline{\\epsilon}, \\underline{\\epsilon}]\\))\n\nan event is defined as the history of the shocks so far\nex: \\((\\overline{\\epsilon} , \\overline{\\epsilon}, \\underline{\\epsilon}, \\overline{\\epsilon})\\)\n\nif \\(s^{\\prime}\\) is the sucessor of \\(s\\) we denote \\(s \\subset s^{\\prime}\\)\n\n\\(s\\) is in the history of \\(s^{\\prime}\\)\ntransition probabilities \\(\\tau(s,s^{\\prime})\\)\n\n\\(1 = \\sum_{s^{\\prime} | s\\subset s^{\\prime}} \\tau(s, s^{\\prime})\\)\n\n\neach node has a given probability \\(p(s)\\). By construction:\n\n\\(p(s^{\\prime}) = p(s) \\tau(s,s^{\\prime})\\)\n\nsometimes, we keep time subscript:\n\nex: \\(s_4 = (\\overline{\\epsilon} , \\overline{\\epsilon}, \\underline{\\epsilon}, \\overline{\\epsilon})\\)\nbut for each \\(t\\) there are many possible \\(s_t\\)\n\n\n\n\n\n\n\n\n\nStochastic optimization (infinite horizon) \\[\\max_{ c_t } \\mathbb{E_0} \\left[ \\sum_{t=1}^{\\infty} \\beta^i U(c_t) \\right]\\]\nWhat it really means (\\(|s|\\) is time of event \\(s\\)) \\[\\max_{ \\forall s,  c(s)} \\sum_{s} p(s) \\beta^{|s|} U(c(s))\\]\nOr: \\[\\max_{ c(s_t) } \\sum_{t}  \\beta^{t} \\sum_{s_t} p(s_t)U(c(s_t))\\]\nThink of it as a regular sum\nWhen you differentiate the lagrangian, you are differentiating w.r.t. all \\(c(s_t)\\), i.e the values of \\(c\\) on each of the nodes.\nExample: cake eating\n\n\n\n\n\n\\[\\max_{\\begin{matrix}c_t, n_t\\\\\\\\c_t \\geq 0\\\\\\\\ y_t \\geq c_t\\\\\\\\n_t \\geq 0\\\\\\\\1 \\geq n_t\\end{matrix}} \\mathbb{E}_0 \\left[ \\sum \\beta^t \\left( U(c_t) + \\chi V(1-n_t) \\right) \\right]\\]\n\nWe know that optimally \\(c_t&gt;0\\), \\(c_t&lt;y_t\\) and \\(n_t&gt;0\\)\n\nequality cases lead to zero production, i.e. infinite marginal utility\n\n\n\n\n\n\n\\[\\max_{\\begin{matrix}c_t, n_t\\\\\\\\c_t \\geq 0\\\\\\\\ k_{t+1} \\geq 0 \\\\\\\\n_t \\geq 0\\\\\\\\1 \\geq n_t \\\\\\\\ y_t \\geq c_t - i_t  \\\\\\\\ k_{t+1} = (1-\\delta) k_t  + i_t \\\\\\\\ y_t = e^{z_t} k_t^{\\alpha} n_t^{1-\\alpha} \\end{matrix}} \\mathbb{E}_0 \\left[ \\sum_t \\beta^t \\left( U(c_t) + \\chi V(1-n_t) \\right) \\right]\\]\n\nWe know that optimally \\(c_t&gt;0\\), and \\(n_t&gt;0\\), \\(k_{t+1}&gt;0\\)\n\nequality cases lead to zero production, i.e. infinite marginal utility\nwe can drop the corresponding constraints\n\nWe assume \\(n_t=1\\) is never binding (this would correspond to unemployment)\n\n\n\n\n\n\\[\\mathcal{L} = \\mathbb{E}\\_0 \\left[ \\sum_t \\beta^t \\left\\\\{ \\begin{matrix} U(c_t) + \\chi V(1-n_t) \\\\\\\\ + \\lambda_t (y_t - c_t) \\\\\\\\  + q_t (k\\_{t+1} - (1-\\delta) k_t - i_{t} ) \\\\\\\\ + \\nu_t (y_t - e^{z_t} k_t^{\\alpha}n_t^{1-\\alpha})  \\end{matrix} \\right\\\\} \\right]\\]\n\nLet’s derive w.r.t. all nonpredetermined values within the sum:\n\n… explain\n\n\n\n\n\n\n\\[\\begin{eqnarray}\nU^{\\prime}(c_t) & = & \\beta \\mathbb{E}\\_t \\left[  U^{\\prime} (c_{t+1}) \\left(\n         (1-\\delta) + \\alpha e^{z\\_{t+1}} k\\_{t+1}^{\\alpha-1} n\\_{t+1}^{1-\\alpha}\n             \\right) \\right] \\\\\\\\\n\\chi V^{\\prime} (1-n_t) & = &  (1-\\alpha) e^{z_t} k_t^{\\alpha} (n_t)^{-\\alpha} U^{\\prime}(c_t)\n\\end{eqnarray}\\]\n\n\n\n\n\nSet \\(U(x) = \\frac{c_t^{1-\\gamma}}{1-\\gamma}\\), \\(V(x) = \\frac{(1-x)^{1-\\eta}}{1-\\eta}\\)\nTry to find the steady state\n\nit is impossible to do so in closed-form\n\nSet \\(\\overline{n} = 0.33\\) and adjust \\(\\chi\\) so that it is a steady-state\n\n\n\n\n\n\n\n\n\n\nSo far, we have assumed, that the same agent decides on consumption and labour supply\nWhat if some decisions are taken in some decentralized markets?\nNew structure:\n\ndecentralized competitive firms\n\nrent capital and workers\nsell goods\n\na representative household\n\nsupplies labour\naccumulates capital and rents it to firms\nconsume goods\n\n\n\n\n\n\n\n\nFirm \\(i\\)\n\nchooses capital \\(k^i\\) and labour \\(n^i\\)\n\nCobb Douglas production: \\(y_i = f(k_i, n_i) = (k_i)^{\\alpha} (n_i)^(1-\\alpha)\\)\nSince there is only one good, its price can be set to \\(1\\)\nFirm takes wages \\(w\\) and rental price of capital \\(r\\) as given: \\[max_{k_i, n_i} \\pi(k_i, n_i) =  f(k_i, n_i) - r  k_i - w n_i\\]\nOptimally:\n\n\\(f_k^{\\prime}(k_i, n_i) = \\alpha k_i^{\\alpha-1} n_i^{1-\\alpha}  = r\\)\n\\(f_n^{\\prime}(k_i, n_i) = (1-\\alpha) k_i^{\\alpha-1} n_i^{-\\alpha}  = w\\)\n\nRemark:\n\ncapital share: \\(\\frac{r k_i}{y_i} = \\alpha\\)\nlabour share: \\(\\frac{w n_i}{y_i} = 1- \\alpha\\)\nprofits are zero\n\n\n\n\n\n\n\nWhat is the production of all firms if total capital is \\(K\\) and total labour is \\(L\\) ?\nNote that for each firm \\[(1 - \\alpha) \\frac{k_i}{l_i} = \\alpha \\frac{w}{r}\\]\nWe can sum over all firms to get: \\[(1-\\alpha){K} = \\alpha \\frac{w}{r}L\\]\nwe can write: \\[y_i = (k_i)^{\\alpha} (n_i)^{1-\\alpha} = k_i \\left( \\frac{k_i}{n_i} \\right)^{1-\\alpha} = k_i (K/L)^{1-\\alpha}\\]\nand sum over all firms: \\[Y = K (K/L)^{1-\\alpha} = K^\\alpha L ^{1-\\alpha}\\]\nThe sum of many cobb douglas-firms is a big cobb-douglas firm !\n\n\n\n\n\n\nOur representative agent takes \\(w_t\\) and \\(r_t\\) as given.\nHe supplies labour and capital, and decides how much to save so as to maximize: \\[\\max_{\\begin{matrix} c_t, n_t \\\\\\\\ c_t \\leq \\pi_t + r_t k_t + w_t n_t - i_t \\\\\\\\ k_{t+1} = (1-\\delta) k_t + i_t \\\\\\\\ c_t \\geq 0 \\end{matrix}} \\sum_t \\beta^t \\left(U(c_t)  + V(n_t) \\right)\\]\n\nResult: \\[\\begin{eqnarray} \\beta\nU^{\\prime}(c_t) & = & \\beta \\mathbb{E}\\_t \\left[  U^{\\prime} (c_{t+1}) \\left( (1-\\delta) + r_{t+1}\\right) \\right] \\\\\\\\\n\\chi V^{\\prime} (1-n_t) & = & w_t U^{\\prime}(c_t)\n\\end{eqnarray}\\]\n\nResult:\n\nexactly the same equations as in the central planner version (in this case)\nthis formulation can be used to study distortionary taxes:\n\nex: labour income tax \\(\\tau\\)\n\n\n\n\n\n\n\n\nOur representative agent takes \\(w_t\\) and \\(r_t\\) as given.\nHe supplies labour and capital, and decides how much to save so as to maximize: \\[\\max_{\\begin{matrix} c_t, n_t \\\\\\\\ c_t \\leq \\pi_t + (1-\\tau) w_t n_t + r_t k_t - i_t + g_t \\\\\\\\ k_{t+1} = (1-\\delta) k_t + i_t \\\\\\\\ c_t \\geq 0 \\end{matrix}} \\sum_t \\beta^t \\left(U(c_t)  + V(n_t) \\right)\\]\nNote the new budget constraint\n\nlabour income is taxed, but a lump-sum subsidy ensures nothing is destroyed\n\\(g_t =\\tau w_t k_t\\) is not taken into account for intertemporal optimization\n\n\nResult: \\[\\begin{eqnarray} \\beta\nU^{\\prime}(c_t) & = & \\beta \\mathbb{E}\\_t \\left[  U^{\\prime} (c_{t+1}) \\left( (1-\\delta) + r_{t+1}\\right) \\right] \\\\\\\\\n\\chi V^{\\prime} (1-n_t) & = & (1-\\tau) w_t U^{\\prime}(c_t)\n\\end{eqnarray}\\]\n\nResult:\n\nexactly the same equations as in the central planner version (in this case)\nthis formulation can be used to study distortionary taxes:\n\nex: labour income tax \\(\\tau\\)"
  },
  {
    "objectID": "slides/rbc.html#advanced-macro-numerical-methods-2021-mie37",
    "href": "slides/rbc.html#advanced-macro-numerical-methods-2021-mie37",
    "title": "Real Business Cycles, with Dolo",
    "section": "",
    "text": "Like the neo-classical growth model\nWith shocks\nWith labour\nWith a decentralized interpretation\n\n\n\n\n\n\n\n\nstates:\n\nproductivity: \\(z_t\\)\ncapital: \\(k_t\\)\n\ntwo independent control variables:\n\nconsumption: \\(c_t \\in [0,y_t], c_t\\geq 0, c_t\\leq y_t\\)\nlabor: \\(n_t\\)\n\nshock:\n\ntfp shock: \\(\\epsilon_t \\sim \\mathcal{N}(0,\\sigma)\\)\n\nobjective: \\[\\max_{\\begin{matrix}c_t, n_t\\\\\\\\c_t \\geq 0, y_t \\geq c_t, n_t \\geq 0, 1 \\geq n_t\\end{matrix}} \\mathbb{E}_0 \\left[ \\sum \\beta^t \\left( U(c_t) + \\chi V(1-n_t) \\right) \\right]\\]\nU and V satisfy Inada conditions, ie \\(U^{\\prime}&gt;0, U^{\\prime \\prime}&lt;0, U^{\\prime}(0)=\\infty\\)\n\n\n\n\ndefinitions:\n\nproduction: \\[y_t  = \\exp(z_t) k_t^{\\alpha} n^{1-\\alpha} + i_t\\]\ninvestment: \\[i_t = y_t - c_t\\]\n\ntransitions: \\[\\begin{eqnarray}\nz_t = (1-\\rho) z_{t-1} + \\epsilon_t\\\\\\\\\nk_t = (1-\\delta) k_{t-1} + i_{t-1}\n\\end{eqnarray}\\]\n\n\n\n\n\n\n\nTwo variables optimization: \\[\\max_{\\begin{matrix}c_1, c_2\\\\\\\\p_1 c_1 + p_2 c_t \\leq B\\end{matrix}} U(c_1, c_2)\\]\nDeterministic opimization (finite horizon) \\[\\max_{\\begin{matrix}c_0, c_1, c_2, ... c_T \\\\\\\\ c_0 + c_1 + \\cdots + c_T \\leq B\\\\\\\\c_0\\geq0, \\cdots c_T \\geq 0 \\end{matrix}} \\sum_{i=1}^{T} \\beta^i U(c_i)\\]\nDeterministic opimization (infinite horizon) \\[\\max_{\\begin{matrix}c_0, c_1, ... \\\\\\\\ c_0 + c_1 + \\cdots \\leq B\\\\\\\\c_0\\geq0, c_1\\geq 0, \\cdots \\end{matrix}} \\sum_{i=1}^{\\infty} \\beta^i U(c_i)\\]\n\n\n\n\n\n\n\n\nexogenous process defines an event tree \\((s)\\)\n\nit is a very useful concept to understand stochastic optimization, complete markets, etc.\nmath for continuous processes a bit involved (filtrations, …), but most intuition can be gained from discrete process\n\n\n\n\n\nhead or tail\n\n\n\n\n\nconsider a discrete process (for instance \\(\\epsilon_t \\in [ \\overline{\\epsilon}, \\underline{\\epsilon}]\\))\n\nan event is defined as the history of the shocks so far\nex: \\((\\overline{\\epsilon} , \\overline{\\epsilon}, \\underline{\\epsilon}, \\overline{\\epsilon})\\)\n\nif \\(s^{\\prime}\\) is the sucessor of \\(s\\) we denote \\(s \\subset s^{\\prime}\\)\n\n\\(s\\) is in the history of \\(s^{\\prime}\\)\ntransition probabilities \\(\\tau(s,s^{\\prime})\\)\n\n\\(1 = \\sum_{s^{\\prime} | s\\subset s^{\\prime}} \\tau(s, s^{\\prime})\\)\n\n\neach node has a given probability \\(p(s)\\). By construction:\n\n\\(p(s^{\\prime}) = p(s) \\tau(s,s^{\\prime})\\)\n\nsometimes, we keep time subscript:\n\nex: \\(s_4 = (\\overline{\\epsilon} , \\overline{\\epsilon}, \\underline{\\epsilon}, \\overline{\\epsilon})\\)\nbut for each \\(t\\) there are many possible \\(s_t\\)\n\n\n\n\n\n\n\n\n\nStochastic optimization (infinite horizon) \\[\\max_{ c_t } \\mathbb{E_0} \\left[ \\sum_{t=1}^{\\infty} \\beta^i U(c_t) \\right]\\]\nWhat it really means (\\(|s|\\) is time of event \\(s\\)) \\[\\max_{ \\forall s,  c(s)} \\sum_{s} p(s) \\beta^{|s|} U(c(s))\\]\nOr: \\[\\max_{ c(s_t) } \\sum_{t}  \\beta^{t} \\sum_{s_t} p(s_t)U(c(s_t))\\]\nThink of it as a regular sum\nWhen you differentiate the lagrangian, you are differentiating w.r.t. all \\(c(s_t)\\), i.e the values of \\(c\\) on each of the nodes.\nExample: cake eating\n\n\n\n\n\n\\[\\max_{\\begin{matrix}c_t, n_t\\\\\\\\c_t \\geq 0\\\\\\\\ y_t \\geq c_t\\\\\\\\n_t \\geq 0\\\\\\\\1 \\geq n_t\\end{matrix}} \\mathbb{E}_0 \\left[ \\sum \\beta^t \\left( U(c_t) + \\chi V(1-n_t) \\right) \\right]\\]\n\nWe know that optimally \\(c_t&gt;0\\), \\(c_t&lt;y_t\\) and \\(n_t&gt;0\\)\n\nequality cases lead to zero production, i.e. infinite marginal utility\n\n\n\n\n\n\n\\[\\max_{\\begin{matrix}c_t, n_t\\\\\\\\c_t \\geq 0\\\\\\\\ k_{t+1} \\geq 0 \\\\\\\\n_t \\geq 0\\\\\\\\1 \\geq n_t \\\\\\\\ y_t \\geq c_t - i_t  \\\\\\\\ k_{t+1} = (1-\\delta) k_t  + i_t \\\\\\\\ y_t = e^{z_t} k_t^{\\alpha} n_t^{1-\\alpha} \\end{matrix}} \\mathbb{E}_0 \\left[ \\sum_t \\beta^t \\left( U(c_t) + \\chi V(1-n_t) \\right) \\right]\\]\n\nWe know that optimally \\(c_t&gt;0\\), and \\(n_t&gt;0\\), \\(k_{t+1}&gt;0\\)\n\nequality cases lead to zero production, i.e. infinite marginal utility\nwe can drop the corresponding constraints\n\nWe assume \\(n_t=1\\) is never binding (this would correspond to unemployment)\n\n\n\n\n\n\\[\\mathcal{L} = \\mathbb{E}\\_0 \\left[ \\sum_t \\beta^t \\left\\\\{ \\begin{matrix} U(c_t) + \\chi V(1-n_t) \\\\\\\\ + \\lambda_t (y_t - c_t) \\\\\\\\  + q_t (k\\_{t+1} - (1-\\delta) k_t - i_{t} ) \\\\\\\\ + \\nu_t (y_t - e^{z_t} k_t^{\\alpha}n_t^{1-\\alpha})  \\end{matrix} \\right\\\\} \\right]\\]\n\nLet’s derive w.r.t. all nonpredetermined values within the sum:\n\n… explain\n\n\n\n\n\n\n\\[\\begin{eqnarray}\nU^{\\prime}(c_t) & = & \\beta \\mathbb{E}\\_t \\left[  U^{\\prime} (c_{t+1}) \\left(\n         (1-\\delta) + \\alpha e^{z\\_{t+1}} k\\_{t+1}^{\\alpha-1} n\\_{t+1}^{1-\\alpha}\n             \\right) \\right] \\\\\\\\\n\\chi V^{\\prime} (1-n_t) & = &  (1-\\alpha) e^{z_t} k_t^{\\alpha} (n_t)^{-\\alpha} U^{\\prime}(c_t)\n\\end{eqnarray}\\]\n\n\n\n\n\nSet \\(U(x) = \\frac{c_t^{1-\\gamma}}{1-\\gamma}\\), \\(V(x) = \\frac{(1-x)^{1-\\eta}}{1-\\eta}\\)\nTry to find the steady state\n\nit is impossible to do so in closed-form\n\nSet \\(\\overline{n} = 0.33\\) and adjust \\(\\chi\\) so that it is a steady-state"
  },
  {
    "objectID": "slides/rbc.html#the-decentralized-story",
    "href": "slides/rbc.html#the-decentralized-story",
    "title": "Real Business Cycles, with Dolo",
    "section": "",
    "text": "So far, we have assumed, that the same agent decides on consumption and labour supply\nWhat if some decisions are taken in some decentralized markets?\nNew structure:\n\ndecentralized competitive firms\n\nrent capital and workers\nsell goods\n\na representative household\n\nsupplies labour\naccumulates capital and rents it to firms\nconsume goods\n\n\n\n\n\n\n\n\nFirm \\(i\\)\n\nchooses capital \\(k^i\\) and labour \\(n^i\\)\n\nCobb Douglas production: \\(y_i = f(k_i, n_i) = (k_i)^{\\alpha} (n_i)^(1-\\alpha)\\)\nSince there is only one good, its price can be set to \\(1\\)\nFirm takes wages \\(w\\) and rental price of capital \\(r\\) as given: \\[max_{k_i, n_i} \\pi(k_i, n_i) =  f(k_i, n_i) - r  k_i - w n_i\\]\nOptimally:\n\n\\(f_k^{\\prime}(k_i, n_i) = \\alpha k_i^{\\alpha-1} n_i^{1-\\alpha}  = r\\)\n\\(f_n^{\\prime}(k_i, n_i) = (1-\\alpha) k_i^{\\alpha-1} n_i^{-\\alpha}  = w\\)\n\nRemark:\n\ncapital share: \\(\\frac{r k_i}{y_i} = \\alpha\\)\nlabour share: \\(\\frac{w n_i}{y_i} = 1- \\alpha\\)\nprofits are zero\n\n\n\n\n\n\n\nWhat is the production of all firms if total capital is \\(K\\) and total labour is \\(L\\) ?\nNote that for each firm \\[(1 - \\alpha) \\frac{k_i}{l_i} = \\alpha \\frac{w}{r}\\]\nWe can sum over all firms to get: \\[(1-\\alpha){K} = \\alpha \\frac{w}{r}L\\]\nwe can write: \\[y_i = (k_i)^{\\alpha} (n_i)^{1-\\alpha} = k_i \\left( \\frac{k_i}{n_i} \\right)^{1-\\alpha} = k_i (K/L)^{1-\\alpha}\\]\nand sum over all firms: \\[Y = K (K/L)^{1-\\alpha} = K^\\alpha L ^{1-\\alpha}\\]\nThe sum of many cobb douglas-firms is a big cobb-douglas firm !\n\n\n\n\n\n\nOur representative agent takes \\(w_t\\) and \\(r_t\\) as given.\nHe supplies labour and capital, and decides how much to save so as to maximize: \\[\\max_{\\begin{matrix} c_t, n_t \\\\\\\\ c_t \\leq \\pi_t + r_t k_t + w_t n_t - i_t \\\\\\\\ k_{t+1} = (1-\\delta) k_t + i_t \\\\\\\\ c_t \\geq 0 \\end{matrix}} \\sum_t \\beta^t \\left(U(c_t)  + V(n_t) \\right)\\]\n\nResult: \\[\\begin{eqnarray} \\beta\nU^{\\prime}(c_t) & = & \\beta \\mathbb{E}\\_t \\left[  U^{\\prime} (c_{t+1}) \\left( (1-\\delta) + r_{t+1}\\right) \\right] \\\\\\\\\n\\chi V^{\\prime} (1-n_t) & = & w_t U^{\\prime}(c_t)\n\\end{eqnarray}\\]\n\nResult:\n\nexactly the same equations as in the central planner version (in this case)\nthis formulation can be used to study distortionary taxes:\n\nex: labour income tax \\(\\tau\\)\n\n\n\n\n\n\n\n\nOur representative agent takes \\(w_t\\) and \\(r_t\\) as given.\nHe supplies labour and capital, and decides how much to save so as to maximize: \\[\\max_{\\begin{matrix} c_t, n_t \\\\\\\\ c_t \\leq \\pi_t + (1-\\tau) w_t n_t + r_t k_t - i_t + g_t \\\\\\\\ k_{t+1} = (1-\\delta) k_t + i_t \\\\\\\\ c_t \\geq 0 \\end{matrix}} \\sum_t \\beta^t \\left(U(c_t)  + V(n_t) \\right)\\]\nNote the new budget constraint\n\nlabour income is taxed, but a lump-sum subsidy ensures nothing is destroyed\n\\(g_t =\\tau w_t k_t\\) is not taken into account for intertemporal optimization\n\n\nResult: \\[\\begin{eqnarray} \\beta\nU^{\\prime}(c_t) & = & \\beta \\mathbb{E}\\_t \\left[  U^{\\prime} (c_{t+1}) \\left( (1-\\delta) + r_{t+1}\\right) \\right] \\\\\\\\\n\\chi V^{\\prime} (1-n_t) & = & (1-\\tau) w_t U^{\\prime}(c_t)\n\\end{eqnarray}\\]\n\nResult:\n\nexactly the same equations as in the central planner version (in this case)\nthis formulation can be used to study distortionary taxes:\n\nex: labour income tax \\(\\tau\\)"
  },
  {
    "objectID": "tutorials/1_Julia_Basics_correction.html",
    "href": "tutorials/1_Julia_Basics_correction.html",
    "title": "Julia Basics",
    "section": "",
    "text": "developped at MIT on top of opensource technologies\n\nlinux / git / llvm\n\nsyntax inspired by Matlab but:\n\nmore consistent\nlots of features from high level languages\n\neverything is JIT-compiled\n\ninterpreted vs compiled treadeoff\n-&gt; very fast\nmost of the base library is written in Julia\n\nopensource/free + vibrant community\n\nSome useful links from QuantEcon:\n\nJulia cheatsheet\nJulia-Matlab comparison\nJulia essentials\nVectors, arrays and matrices\n\nExcellent resources at: julialang - checkout JuliaAcademy, it’s free - ongoing MOOC at MIT\n\n\n\nHow I learnt: interpreted code is slow, so vectorize your coe.\n\nfunction stupid_loop(I,J,K)\n    t = 0.0\n    for i=1:I\n        for j=1:J\n            for k = 1:K\n                t += 1.0\n            end        \n        end\n    end\n    return t\nend\n@time [ stupid_loop(1000,1000,i) for i =1:10]\n\n  0.108801 seconds (66.67 k allocations: 3.520 MiB, 24.75% compilation time)\n\n\n10-element Vector{Float64}:\n 1.0e6\n 2.0e6\n 3.0e6\n 4.0e6\n 5.0e6\n 6.0e6\n 7.0e6\n 8.0e6\n 9.0e6\n 1.0e7\n\n\nCode is translated to LLVM code then to instructions for the processor. Note that processor instructions are shorter than LLVM code.\n\n@code_llvm stupid_loop(10,10,10)\n\n;  @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:1 within `stupid_loop`\ndefine double @julia_stupid_loop_1277(i64 signext %0, i64 signext %1, i64 signext %2) #0 {\ntop:\n;  @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:3 within `stupid_loop`\n; ┌ @ range.jl:5 within `Colon`\n; │┌ @ range.jl:393 within `UnitRange`\n; ││┌ @ range.jl:400 within `unitrange_last`\n     %.inv = icmp sgt i64 %0, 0\n     %. = select i1 %.inv, i64 %0, i64 0\n; └└└\n  br i1 %.inv, label %L17.preheader, label %L94\n\nL17.preheader:                                    ; preds = %top\n  %.inv26 = icmp sgt i64 %1, 0\n  %.24 = select i1 %.inv26, i64 %1, i64 0\n  %.inv27 = icmp sgt i64 %2, 0\n  %.25 = select i1 %.inv27, i64 %2, i64 0\n;  @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:4 within `stupid_loop`\n  %3 = select i1 %.inv26, i1 %.inv27, i1 false\n  br i1 %3, label %L35.preheader.split.us.us.us, label %L94\n\nL81.us.us:                                        ; preds = %L68.us.us.us\n;  @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:9 within `stupid_loop`\n; ┌ @ range.jl:883 within `iterate`\n; │┌ @ promotion.jl:477 within `==`\n    %.not29.us.us = icmp eq i64 %value_phi3.us.us, %.\n; │└\n   %4 = add nuw i64 %value_phi3.us.us, 1\n; └\n  br i1 %.not29.us.us, label %L94, label %L35.preheader.split.us.us.us\n\nL35.preheader.split.us.us.us:                     ; preds = %L81.us.us, %L17.preheader\n  %value_phi3.us.us = phi i64 [ %4, %L81.us.us ], [ 1, %L17.preheader ]\n  %value_phi4.us.us = phi double [ %6, %L81.us.us ], [ 0.000000e+00, %L17.preheader ]\n;  @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:5 within `stupid_loop`\n  br label %L53.preheader.us.us.us\n\nL53.preheader.us.us.us:                           ; preds = %L68.us.us.us, %L35.preheader.split.us.us.us\n  %value_phi8.us.us.us = phi double [ %6, %L68.us.us.us ], [ %value_phi4.us.us, %L35.preheader.split.us.us.us ]\n  %value_phi9.us.us.us = phi i64 [ %5, %L68.us.us.us ], [ 1, %L35.preheader.split.us.us.us ]\n;  @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:7 within `stupid_loop`\n  br label %L53.us.us.us\n\nL68.us.us.us:                                     ; preds = %L53.us.us.us\n;  @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:8 within `stupid_loop`\n; ┌ @ range.jl:883 within `iterate`\n; │┌ @ promotion.jl:477 within `==`\n    %.not28.us.us.us = icmp eq i64 %value_phi9.us.us.us, %.24\n; │└\n   %5 = add nuw i64 %value_phi9.us.us.us, 1\n; └\n  br i1 %.not28.us.us.us, label %L81.us.us, label %L53.preheader.us.us.us\n\nL53.us.us.us:                                     ; preds = %L53.us.us.us, %L53.preheader.us.us.us\n  %value_phi13.us.us.us = phi double [ %6, %L53.us.us.us ], [ %value_phi8.us.us.us, %L53.preheader.us.us.us ]\n  %value_phi14.us.us.us = phi i64 [ %7, %L53.us.us.us ], [ 1, %L53.preheader.us.us.us ]\n;  @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:6 within `stupid_loop`\n; ┌ @ float.jl:383 within `+`\n   %6 = fadd double %value_phi13.us.us.us, 1.000000e+00\n; └\n;  @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:7 within `stupid_loop`\n; ┌ @ range.jl:883 within `iterate`\n; │┌ @ promotion.jl:477 within `==`\n    %.not.us.us.us = icmp eq i64 %value_phi14.us.us.us, %.25\n; │└\n   %7 = add nuw i64 %value_phi14.us.us.us, 1\n; └\n  br i1 %.not.us.us.us, label %L68.us.us.us, label %L53.us.us.us\n\nL94:                                              ; preds = %L81.us.us, %L17.preheader, %top\n  %value_phi23 = phi double [ 0.000000e+00, %top ], [ %6, %L81.us.us ], [ 0.000000e+00, %L17.preheader ]\n;  @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:10 within `stupid_loop`\n  ret double %value_phi23\n}\n\n\n\n@code_native stupid_loop(10,10,10)\n\n    .text\n    .file   \"stupid_loop\"\n    .section    .rodata.cst8,\"aM\",@progbits,8\n    .p2align    3                               # -- Begin function julia_stupid_loop_1312\n.LCPI0_0:\n    .quad   0x3ff0000000000000              # double 1\n    .text\n    .globl  julia_stupid_loop_1312\n    .p2align    4, 0x90\n    .type   julia_stupid_loop_1312,@function\njulia_stupid_loop_1312:                 # @julia_stupid_loop_1312\n; ┌ @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:1 within `stupid_loop`\n    .cfi_startproc\n# %bb.0:                                # %top\n    vxorpd  %xmm0, %xmm0, %xmm0\n; │ @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:3 within `stupid_loop`\n; │┌ @ range.jl:5 within `Colon`\n; ││┌ @ range.jl:393 within `UnitRange`\n; │││┌ @ range.jl:400 within `unitrange_last`\n    testq   %rdi, %rdi\n; │└└└\n    jle .LBB0_9\n# %bb.1:                                # %L17.preheader\n    testq   %rsi, %rsi\n; │ @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:4 within `stupid_loop`\n    jle .LBB0_9\n# %bb.2:                                # %L17.preheader\n    testq   %rdx, %rdx\n    jle .LBB0_9\n# %bb.3:                                # %L35.preheader.split.us.us.us.preheader\n    movq    %rdi, %rax\n    sarq    $63, %rax\n    andnq   %rdi, %rax, %r8\n    movq    %rsi, %rax\n    sarq    $63, %rax\n    andnq   %rsi, %rax, %rcx\n    movq    %rdx, %rax\n    sarq    $63, %rax\n    andnq   %rdx, %rax, %rax\n    vxorpd  %xmm0, %xmm0, %xmm0\n    movl    $1, %esi\n    movabsq $.LCPI0_0, %rdx\n    vmovsd  (%rdx), %xmm1                   # xmm1 = mem[0],zero\n    .p2align    4, 0x90\n.LBB0_5:                                # %L35.preheader.split.us.us.us\n                                        # =&gt;This Loop Header: Depth=1\n                                        #     Child Loop BB0_6 Depth 2\n                                        #       Child Loop BB0_7 Depth 3\n    movl    $1, %edi\n    .p2align    4, 0x90\n.LBB0_6:                                # %L53.preheader.us.us.us\n                                        #   Parent Loop BB0_5 Depth=1\n                                        # =&gt;  This Loop Header: Depth=2\n                                        #       Child Loop BB0_7 Depth 3\n    movq    %rax, %rdx\n    .p2align    4, 0x90\n.LBB0_7:                                # %L53.us.us.us\n                                        #   Parent Loop BB0_5 Depth=1\n                                        #     Parent Loop BB0_6 Depth=2\n                                        # =&gt;    This Inner Loop Header: Depth=3\n; │ @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:6 within `stupid_loop`\n; │┌ @ float.jl:383 within `+`\n    vaddsd  %xmm1, %xmm0, %xmm0\n; │└\n; │ @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:7 within `stupid_loop`\n; │┌ @ range.jl:883 within `iterate`\n; ││┌ @ promotion.jl:477 within `==`\n    decq    %rdx\n; │└└\n    jne .LBB0_7\n# %bb.8:                                # %L68.us.us.us\n                                        #   in Loop: Header=BB0_6 Depth=2\n; │ @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:8 within `stupid_loop`\n; │┌ @ range.jl:883 within `iterate`\n    leaq    1(%rdi), %rdx\n; ││┌ @ promotion.jl:477 within `==`\n    cmpq    %rcx, %rdi\n    movq    %rdx, %rdi\n; │└└\n    jne .LBB0_6\n# %bb.4:                                # %L81.us.us\n                                        #   in Loop: Header=BB0_5 Depth=1\n; │ @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:9 within `stupid_loop`\n; │┌ @ range.jl:883 within `iterate`\n    leaq    1(%rsi), %rdx\n; ││┌ @ promotion.jl:477 within `==`\n    cmpq    %r8, %rsi\n    movq    %rdx, %rsi\n; │└└\n    jne .LBB0_5\n.LBB0_9:                                # %L94\n; │ @ /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:10 within `stupid_loop`\n    retq\n.Lfunc_end0:\n    .size   julia_stupid_loop_1312, .Lfunc_end0-julia_stupid_loop_1312\n    .cfi_endproc\n; └\n                                        # -- End function\n    .section    \".note.GNU-stack\",\"\",@progbits\n\n\n\n\n\n\n\nAssignement operator is = (equality is ==, identity is ===)\n\n# Assign the value 10 to the variable x\nx = 10\n\n10\n\n\n\nx\n\n10\n\n\n\n2 == 3\n\nfalse\n\n\n\n# Variable names can have Unicode characters\n# To get ϵ in the REPL, type \\epsilon&lt;TAB&gt;\nσ = 34\n🦆 = 23\n🦈 = σ + 🦆\nϵ = 1e-4\n\n0.0001\n\n\nDefault semantic is pass-by-reference:\n\na = [1,2,3,4]\nb = a\na[1] = 10\nb\n\nTo work on a copy: copy or deepcopy\n\na = [1,2,3,4]\nb = copy(a)\na[1]=10\nb\n\n4-element Vector{Int64}:\n 1\n 2\n 3\n 4\n\n\n\na .== b\n\n4-element BitVector:\n 0\n 1\n 1\n 1\n\n\n\nc = b\n\n4-element Vector{Int64}:\n 1\n 2\n 3\n 4\n\n\n\nb = [1,2,3,4]\n\n4-element Vector{Int64}:\n 1\n 2\n 3\n 4\n\n\n\na .== b\n\n4-element BitVector:\n 1\n 1\n 1\n 1\n\n\n\nc === b\n\nfalse\n\n\n\n\n\n\n# for any object `typeof` returns the type\n?any\n\nUndefVarError: UndefVarError: help not defined\n  Welcome to Julia 1.8.4. The full manual is available at\n\n  https://docs.julialang.org\n\n  as well as many great tutorials and learning resources:\n\n  https://julialang.org/learning/\n\n  For help on a specific function or macro, type ? followed by its name, e.g.\n  ?cos, or ?@time, and press enter. Type ; to enter shell mode, ] to enter\n  package mode.\n\n  To exit the interactive session, type CTRL-D (press the control key together\n  with the d key), or type exit().\n\n\n\ntypeof(a)\n\n\nVector{Int64} (alias for Array{Int64, 1})\n\n\n\n\n\n\n\ny = 2 + 2\n\n4\n\n\n\n-y\n\n-4\n\n\n\n0.34*23\n\n7.82\n\n\n\n3//4 + 2//3\n\n17//12\n\n\n\n# Scalar multiplication doesn't require *\n3(4 - 2)\n\n6\n\n\n\nx = 4\n2x\n\n\ntypeof(x)\n\n\nsizeof(a)\n\n\n\n\nEquality\n\n0 == 1\n\nfalse\n\n\n\n2 != 3\n\ntrue\n\n\n\n3 &lt;= 4\n\ntrue\n\n\nIdentity\n\na = [34, 35]\nb = [34, 35]\nc = a\n\n\nc === a\n\n\nb === a\n\nBoolean operator\n\ntrue && false\n\nfalse\n\n\n\ntrue || false\n\ntrue\n\n\n\n!true\n\nfalse\n\n\n\n\n\n\n# Strings are written using double quotes\nstr = \"This is a string\"\n\n\"This is a string\"\n\n\n\nch = '🦆' # this is a character\n\n'🦆': Unicode U+1F986 (category So: Symbol, other)\n\n\n\n# Strings can also contain Unicode characters\nfancy_str = \"α is a string\"\n\n\n# String interpolation using $\n# The expression in parentheses is evaluated and the result is \n# inserted into the string\na = 2+2\n\"2 + 2 = $(a)\"\n\n\"2 + 2 = 4\"\n\n\n\nprintln(\"It took me $(a) iterations\")\n\nIt took me 4 iterations\n\n\n\n# String concatenation using *\n\"hello\" * \"world\"\n\n\"helloworld\"\n\n\n\nprintln(\"hello \", \"world\")\n\nhello world\n\n\n\n\n\nJulia has one-dimensional arrays. They are also called Vector.\n\nA = [1, 2]\n\n2-element Vector{Int64}:\n 1\n 2\n\n\nAll elements have the type:\n\nA = [1, 1.4]\n\n2-element Vector{Float64}:\n 1.0\n 1.4\n\n\n\ntypeof(A) == Vector{Int64}\n\nfalse\n\n\n\nA''\n\n2-element Vector{Float64}:\n 1.0\n 1.4\n\n\nTo get the size of an array:\n\nsize(A)\n\n(2,)\n\n\nArrays are mutable\n\nA[1] = 10\n\n10\n\n\n\nA\n\n2-element Vector{Float64}:\n 10.0\n  1.4\n\n\nJulia has one-based indexing: you refer to the first element as 1 (\\(\\neq\\) zero-based indexing in C or Python)\n\nA[2]\n\n1.4\n\n\nArrays are mutable and their size can be changed too:\n\npush!(A, 29)\nA\n\n6-element Vector{Float64}:\n 10.0\n  1.4\n 29.0\n 29.0\n 29.0\n 29.0\n\n\n\nA\n\n3-element Array{Float64,1}:\n 10.0\n  1.4\n 29.0\n\n\nTwo comments: - the push! operation is fast - ! is a julia convention to express the fact that push! mutates its first argument\n\n\n\n\nsize(A)  # is a tuple\n\n(6,)\n\n\n\n# you can create tuples with (,,,)\nt = (1,2,3,4)\n\n(1, 2, 3, 4)\n\n\n\nt\n\n(1, 2, 3, 4)\n\n\ntuples differ from arrays in two ways: - they are immutable - they can contain non-homogenous objects\n\nt[1]\n\n1\n\n\n\nt[1] = 2\n\nMethodError: MethodError: no method matching setindex!(::NTuple{4, Int64}, ::Int64, ::Int64)\n\n\n\ntypeof((1, \"1\", [1]))\n\nTuple{Int64, String, Vector{Int64}}\n\n\n2d arrays are also called matrices… and can be used for matrix multiplications.\n\n[3 4; 5 6]\n\n2×2 Matrix{Int64}:\n 3  4\n 5  6\n\n\n\na1 = [1,2,3,4]\na2 = [1,2,3,4]  .+ 4\n[a1 ;; a2]\n# cat(a1, a2; dims=2)\n\n4×2 Matrix{Int64}:\n 1  5\n 2  6\n 3  7\n 4  8\n\n\n\nb = [1 0.6 0]\n\n1×3 Array{Float64,2}:\n 1.0  0.6  0.0\n\n\n\nB = [0.1 0.2 0.3; 4 5 6]\n\nOther ways to construct arrays:\n\n# zero array\nt = zeros(2,3)\nt[1,2] = 23.2\nt\n\n2×3 Matrix{Float64}:\n 0.0  23.2  0.0\n 0.0   0.0  0.0\n\n\n\n# random array (uniform distribution)\nt= rand(3,3)\nt\n\n3×3 Matrix{Float64}:\n 0.151296  0.390327  0.239194\n 0.726286  0.371063  0.133779\n 0.037311  0.183624  0.72499\n\n\n\n# random array (normal distribution)\nt= randn(3,3)\nt\n\n3×3 Array{Float64,2}:\n -0.149832     0.973627  -0.407871\n -0.00251947  -1.46936   -0.141511\n  0.676479    -0.774655   0.349923\n\n\nVectorized operations take a ., even comparisons (pointwise operations)\n\nB = [1 2;3 4]\n\n2×2 Matrix{Int64}:\n 1  2\n 3  4\n\n\n\nB*B\n\n2×2 Matrix{Int64}:\n  7  10\n 15  22\n\n\n\nB .* B\n\n2×2 Matrix{Int64}:\n 1   4\n 9  16\n\n\n\nf(x) = x^2+1\n\nf (generic function with 1 method)\n\n\n\nf(43)\n\n1850\n\n\n\nf.(B)\n\n2×2 Matrix{Int64}:\n  2   5\n 10  17\n\n\nElements are always accessed with square brackets:\n\nB = [1 2 3; 4 5 6]\n\n2×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n\n\n\nYou get element $B_{ij}$ with `B[i,j]`\n\n\nB[1,2]\n\n2\n\n\nYou select a whole row/column with :\n\nB\n\n2×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n\n\n\nB[:,1]\n\n2-element Vector{Int64}:\n 1\n 4\n\n\n\nB[1,:]\n\n3-element Vector{Int64}:\n 1\n 2\n 3\n\n\n\nB[:,1:2]\n\n2×2 Matrix{Int64}:\n 1  2\n 4  5\n\n\n\nB[:,1:end-1]\n\n2×2 Matrix{Int64}:\n 1  2\n 4  5\n\n\n\n\n\nConditions\n\nx = 0\nif x&lt;0\n    # block\n    println(\"x is negative\")\nelseif (x &gt; 0) # optional and unlimited\n    println(\"x is positive\")\nelse         # optional\n    println(\"x is zero\")\nend\n\nx is zero\n\n\nWhile\n\ni = 3\nwhile i &gt; 0\n    println(i)\n    i -= 1 # decrement\nend\n\n3\n2\n1\n\n\nFor loops: your iterate over any iterable object: - range i1:i2 - vector - tuple\n\n# Iterate through ranges of numbers\nfor i ∈ (1:3)\n    println(i)\nend\n\n1\n2\n3\n\n\n\n# Iterate through arrays\ncities = [\"Boston\", \"New York\", \"Philadelphia\"]\nfor city in cities\n    println(city)\nend\n\nBoston\nNew York\nPhiladelphia\n\n\n\ncities\n\n3-element Vector{String}:\n \"Boston\"\n \"New York\"\n \"Philadelphia\"\n\n\n\nstates = [\"Massachussets\", \"New York\", \"Pennsylvania\"]\n\n3-element Vector{String}:\n \"Massachussets\"\n \"New York\"\n \"Pennsylvania\"\n\n\n\ntwo_by_two_iterable = zip(cities, states)\n\nzip([\"Boston\", \"New York\", \"Philadelphia\"], [\"Massachussets\", \"New York\", \"Pennsylvania\"])\n\n\n\ncollect(two_by_two_iterable)\n\n3-element Vector{Tuple{String, String}}:\n (\"Boston\", \"Massachussets\")\n (\"New York\", \"New York\")\n (\"Philadelphia\", \"Pennsylvania\")\n\n\n\n[two_by_two_iterable...]\n\n3-element Vector{Tuple{String, String}}:\n (\"Boston\", \"Massachussets\")\n (\"New York\", \"New York\")\n (\"Philadelphia\", \"Pennsylvania\")\n\n\n\n# Iterate through arrays of tuples using zip\nfor kw in zip(cities, states)\n    println(kw)\nend\n\n(\"Boston\", \"Massachussets\")\n(\"New York\", \"New York\")\n(\"Philadelphia\", \"Pennsylvania\")\n\n\n\n# Iterate through arrays of tuples using zip\nfor (city, state) in zip(cities, states)\n    println(\"$city, $state\")\nend\n\nBoston, Massachussets\nNew York, New York\nPhiladelphia, Pennsylvania\n\n\n\n# Iterate through arrays and their indices using enumerate\nfor (i, city) in enumerate(cities)\n    println(\"City $i is $city\")\nend\n\nCity 1 is Boston\nCity 2 is New York\nCity 3 is Philadelphia\n\n\n\nt = (;a = 2, b = 3)\nt[1]\nt.a\n\n2\n\n\n\n\n\n\n[1:10. ...] # unpack operator\n\n10-element Vector{Float64}:\n  1.0\n  2.0\n  3.0\n  4.0\n  5.0\n  6.0\n  7.0\n  8.0\n  9.0\n 10.0\n\n\n\n[i^2 for i  in 1:10] # collect with comprehension syntax\n\n10-element Vector{Int64}:\n   1\n   4\n   9\n  16\n  25\n  36\n  49\n  64\n  81\n 100\n\n\n\n[i^2 for i=1:100000000 if mod(i,2)==0] ;\n\n\ngen = (i^2 for i=1:100000000 if mod(i,2)==0)\n\nBase.Generator{Base.Iterators.Filter{var\"#42#44\", UnitRange{Int64}}, var\"#41#43\"}(var\"#41#43\"(), Base.Iterators.Filter{var\"#42#44\", UnitRange{Int64}}(var\"#42#44\"(), 1:100000000))\n\n\n\nsum(gen)\n\n338960700901149440\n\n\n\n\n\n\n\n\nA composite type is a collection of named fields that can be treated as a single value. They bear a passing resemblance to MATLAB structs.\nAll fields must be declared ahead of time. The double colon, ::, constrains a field to contain values of a certain type. This is optional for any field.\n\n# Type definition with 4 fields\nstruct ParameterFree\n    value  \n    transformation  \n    tex_label\n    description \nend\n\n\npf = ParameterFree(\"1\", x-&gt;x^2, \"\\\\sqrt{1+x^2}\", (\"a\",1))\n\nParameterFree(\"1\", var\"#9#10\"(), \"\\\\sqrt{1+x^2}\", (\"a\", 1))\n\n\n\npf.value\n\n\"1\"\n\n\nTwo reasons to create structures: - syntactic shortcut (you access the fields with .) - specify the types of the fields\n\n# Type definition\nstruct Parameter\n    value ::Float64\n    transformation ::Function # Function is a type!\n    tex_label::String\n    description::String\nend\n\n\np = Parameter(\"1\", x-&gt;x^2, \"\\\\sqrt{1+x^2}\", (\"a\",1))\n\nMethodError: MethodError: Cannot `convert` an object of type String to an object of type Float64\nClosest candidates are:\n  convert(::Type{T}, !Matched::T) where T&lt;:Number at number.jl:6\n  convert(::Type{T}, !Matched::Number) where T&lt;:Number at number.jl:7\n  convert(::Type{T}, !Matched::Base.TwicePrecision) where T&lt;:Number at twiceprecision.jl:273\n  ...\n\n\n\np = Parameter(0.43, x-&gt;x^2, \"\\\\sqrt{1+x^2}\", \"This is a description\")\n\nParameter(0.43, var\"#13#14\"(), \"\\\\sqrt{1+x^2}\", \"This is a description\")\n\n\n\np.value\n\n0.43\n\n\nWhen a type with \\(n\\) fields is defined, a constructor (function that creates an instance of that type) that takes \\(n\\) ordered arguments is automatically created. Additional constructors can be defined for convenience.\n\n# Creating an instance of the Parameter type using the default\n# constructor\nβ = Parameter(0.9, identity, \"\\\\beta\", \"Discount rate\")\n\nParameter(0.9, identity, \"\\\\beta\", \"Discount rate\")\n\n\n\nfunction Parameter(value)\n    return Parameter(value, x-&gt;x, \"x\", \"Anonymous\")\nend\n\nParameter\n\n\n\nParameter(0.4)\n\nParameter(0.4, var\"#15#16\"(), \"x\", \"Anonymous\")\n\n\n\nParameter(value, transformation, tex) = Parameter(value, transformation, tex, \"no description\")\n\nParameter\n\n\n\nmethods( Parameter )\n\n# 4 methods for type constructor: Parameter(value::Float64, transformation::Function, tex_label::String, description::String) in Main at /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:3  Parameter(value) in Main at /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:1  Parameter(value, transformation, tex) in Main at /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:1  Parameter(value, transformation, tex_label, description) in Main at /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:3 \n\n\n\n# Alternative constructors end with an appeal to the default\n# constructor\nfunction Parameter(value::Float64, tex_label::String)\n    transformation = identity\n    description = \"No description available\"\n    return Parameter(value, transformation, tex_label, description)\nend\n\nα = Parameter(0.5, \"\\alpha\")\n\nParameter(0.5, identity, \"\\alpha\", \"No description available\")\n\n\nNow the function Parameter has two different methods with different signatures:\n\nmethods(Parameter)\n\n# 4 methods for type constructor: Parameter(value::Float64, transformation::Function, tex_label::String, description::String) in Main at In[1]:3  Parameter(value::Float64, tex_label::String) in Main at In[8]:4  Parameter(value, transformation, tex) in Main at In[5]:1  Parameter(value, transformation, tex_label, description) in Main at In[1]:3 \n\n\nWe have seen that a function can have several implementations, called methods, for different number of arguments, or for different types of arguments.\n\nfun(x::Int64, y::Int64) = x^3 + y\n\nfun (generic function with 1 method)\n\n\n\nfun(x::Float64, y::Int64) = x/2 + y\n\nfun (generic function with 2 methods)\n\n\n\nfun(2, 2)\n\n10\n\n\n\nfun(2.0, 2)\n\n3.0\n\n\n\nα.tex_label\n\n\"\\alpha\"\n\n\n\n# Access a particular field using .\nα.value\n\n0.5\n\n\n\n# Fields are modifiable and can be assigned to, like \n# ordinary variables\nα.value = 0.75\n\nErrorException: setfield!: immutable struct of type Parameter cannot be changed\n\n\n\n\n\n\nby default structures in Julia are non-mutable\n\np.value = 3.0\n\nErrorException: setfield!: immutable struct of type Parameter cannot be changed\n\n\n\nmutable struct Params\n    x:: Float64\n    y:: Float64\nend\n\n\npos = Params(0.4, 0.2)\n\nParams(0.4, 0.2)\n\n\n\npos.x = \"pos\"\n\nMethodError: MethodError: Cannot `convert` an object of type String to an object of type Float64\nClosest candidates are:\n  convert(::Type{T}, !Matched::T) where T&lt;:Number at number.jl:6\n  convert(::Type{T}, !Matched::Number) where T&lt;:Number at number.jl:7\n  convert(::Type{T}, !Matched::Base.TwicePrecision) where T&lt;:Number at twiceprecision.jl:273\n  ...\n\n\n\n\n\nParameterized types are data types that are defined to handle values identically regardless of the type of those values.\nArrays are a familiar example. An Array{T,1} is a one-dimensional array filled with objects of any type T (e.g. Float64, String).\n\ntypeof( [1,2,3])\n\n\nVector{Int64} (alias for Array{Int64, 1})\n\n\n\n\n# Defining a parametric point\nstruct Duple{T} # T is a parameter to the type Duple\n    x::T\n    y::T\nend\n\n\nDuple(3, 3)\n\nDuple{Int64}(3, 3)\n\n\n\nDuple(1//2, 2//3)\n\nDuple{Rational{Int64}}(1//2, 2//3)\n\n\n\nDuple(3, -1.0)\n\nMethodError: MethodError: no method matching Duple(::Int64, ::Float64)\nClosest candidates are:\n  Duple(::T, !Matched::T) where T at /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:3\n\n\n\nstruct Truple{T}\n    x::Duple{T}\n    z::T\nend\n\nThis single declaration defines an unlimited number of new types: Duple{String}, Duple{Float64}, etc. are all immediately usable.\n\nsizeof(3.0)\n\n8\n\n\n\nsizeof( Truple(Duple(3.0, -15.0), 3.0) )\n\n24\n\n\n\n# What happens here?\nDuple(1.5, 3)\n\n\nstruct Truple3{T,S}\n    x::Tuple{T,S}\n    z::S\nend\n\nWe can also restrict the type parameter T:\n\ntypeof(\"S\") &lt;: Number\n\nfalse\n\n\n\ntypeof(4) &lt;: Number\n\ntrue\n\n\n\n# T can be any subtype of Number, but nothing else\nstruct PlanarCoordinate{T&lt;:Number}\n    x::T\n    y::T\nend\n\n\nPlanarCoordinate(\"4th Ave\", \"14th St\")\n\nMethodError: MethodError: no method matching PlanarCoordinate(::String, ::String)\n\n\n\nPlanarCoordinate(2//3, 8//9)\n\nPlanarCoordinate{Rational{Int64}}(2//3, 8//9)\n\n\nArrays are an exemple of mutable, parameterized types\n\nx = convert(Int8, 4)\n\n4\n\n\n\nfactorial(BigInt(123))\n\n12146304367025329675766243241881295855454217088483382315328918161829235892362167668831156960612640202170735835221294047782591091570411651472186029519906261646730733907419814952960000000000000000000000000000\n\n\n\n\n\nYou can write all your code without thinking about types at all. If you do this, however, you’ll be missing out on some of the biggest benefits of using Julia.\nIf you understand types, you can:\n\nWrite faster code\nWrite expressive, clear, and well-structured programs (keep this in mind when we talk about functions)\nReason more clearly about how your code works\n\nEven if you only use built-in functions and types, your code still takes advantage of Julia’s type system. That’s why it’s important to understand what types are and how to use them.\n\n# Example: writing type-stable functions\nfunction sumofsins_unstable(n::Integer)  \n    sum = 0\n    for i in 1:n  \n        sum += sin(3.4)  \n    end  \n    return sum \nend  \n\nfunction sumofsins_stable(n::Integer)  \n    sum = 0.0\n    for i in 1:n  \n        sum += sin(3.4)  \n    end  \n    return sum \nend\n\n# Compile and run\nsumofsins_unstable(Int(1e5))\nsumofsins_stable(Int(1e5))\n\n-25554.110202663698\n\n\n\n@time sumofsins_unstable(Int(1e5))\n\n  0.000237 seconds\n\n\n-25554.110202663698\n\n\n\n@time sumofsins_stable(Int(1e5))\n\n  0.000119 seconds\n\n\n-25554.110202663698\n\n\nIn sumofsins_stable, the compiler is guaranteed that sum is of type Float64 throughout; therefore, it saves time and memory. On the other hand, in sumofsins_unstable, the compiler must check the type of sum at each iteration of the loop. Let’s look at the LLVM intermediate representation.\n\n@code_warntype sumofsins_stable(Int(1e5))\n\nMethodInstance for sumofsins_stable(::Int64)\n  from sumofsins_stable(n::Integer) in Main at /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:10\nArguments\n  #self#::Core.Const(sumofsins_stable)\n  n::Int64\nLocals\n  @_3::Union{Nothing, Tuple{Int64, Int64}}\n  sum::Float64\n  i::Int64\nBody::Float64\n1 ─       (sum = 0.0)\n│   %2  = (1:n)::Core.PartialStruct(UnitRange{Int64}, Any[Core.Const(1), Int64])\n│         (@_3 = Base.iterate(%2))\n│   %4  = (@_3 === nothing)::Bool\n│   %5  = Base.not_int(%4)::Bool\n└──       goto #4 if not %5\n2 ┄ %7  = @_3::Tuple{Int64, Int64}\n│         (i = Core.getfield(%7, 1))\n│   %9  = Core.getfield(%7, 2)::Int64\n│   %10 = sum::Float64\n│   %11 = Main.sin(3.4)::Core.Const(-0.2555411020268312)\n│         (sum = %10 + %11)\n│         (@_3 = Base.iterate(%2, %9))\n│   %14 = (@_3 === nothing)::Bool\n│   %15 = Base.not_int(%14)::Bool\n└──       goto #4 if not %15\n3 ─       goto #2\n4 ┄       return sum\n\n\n\n\n@code_warntype sumofsins_unstable(Int(1e5))\n\nMethodInstance for sumofsins_unstable(::Int64)\n  from sumofsins_unstable(n::Integer) in Main at /workspaces/mie37/notebooks/1_Julia_Basics.ipynb:2\nArguments\n  #self#::Core.Const(sumofsins_unstable)\n  n::Int64\nLocals\n  @_3::Union{Nothing, Tuple{Int64, Int64}}\n  sum::Union{Float64, Int64}\n  i::Int64\nBody::Union{Float64, Int64}\n1 ─       (sum = 0)\n│   %2  = (1:n)::Core.PartialStruct(UnitRange{Int64}, Any[Core.Const(1), Int64])\n│         (@_3 = Base.iterate(%2))\n│   %4  = (@_3 === nothing)::Bool\n│   %5  = Base.not_int(%4)::Bool\n└──       goto #4 if not %5\n2 ┄ %7  = @_3::Tuple{Int64, Int64}\n│         (i = Core.getfield(%7, 1))\n│   %9  = Core.getfield(%7, 2)::Int64\n│   %10 = sum::Union{Float64, Int64}\n│   %11 = Main.sin(3.4)::Core.Const(-0.2555411020268312)\n│         (sum = %10 + %11)\n│         (@_3 = Base.iterate(%2, %9))\n│   %14 = (@_3 === nothing)::Bool\n│   %15 = Base.not_int(%14)::Bool\n└──       goto #4 if not %15\n3 ─       goto #2\n4 ┄       return sum\n\n\n\n\n\n\nSo far we have defined functions over argument lists of any type. Methods allow us to define functions “piecewise”. For any set of input arguments, we can define a method, a definition of one possible behavior for a function.\n\n# Define one method of the function print_type\nfunction print_type(x::Number)\n    println(\"$x is a number\")\nend\n\nprint_type (generic function with 1 method)\n\n\n\n# Define another method\nfunction print_type(x::String)\n    println(\"$x is a string\")\nend\n\nprint_type (generic function with 2 methods)\n\n\n\n# Define yet another method\nfunction print_type(x::Number, y::Number)\n    println(\"$x and $y are both numbers\")\nend\n\nprint_type (generic function with 3 methods)\n\n\n\n# See all methods for a given function\nmethods(print_type)\n\n# 3 methods for generic function print_type: print_type(x::String) in Main at In[53]:3  print_type(x::Number) in Main at In[51]:3  print_type(x::Number, y::Number) in Main at In[54]:3 \n\n\nJulia uses multiple dispatch to decide which method of a function to execute when a function is applied. In particular, Julia compares the types of all arguments to the signatures of the function’s methods in order to choose the applicable one, not just the first (hence “multiple”).\n\nprint_type(5)\n\n5 is a number\n\n\n\nprint_type(\"foo\")\n\nfoo is a string\n\n\n\nprint_type([1, 2, 3])\n\nMethodError: MethodError: no method matching print_type(::Array{Int64,1})\nClosest candidates are:\n  print_type(!Matched::String) at In[53]:3\n  print_type(!Matched::Number) at In[51]:3\n  print_type(!Matched::Number, !Matched::Number) at In[54]:3\n\n\n\n\nJulia supports a short function definition for one-liners\n\nf(x::Float64) = x^2.0\nf(x::Int64) = x^3\n\nf (generic function with 2 methods)\n\n\nAs well as a special syntax for anonymous functions\n\nu -&gt; u^2\n\n#17 (generic function with 1 method)\n\n\n\nmap(u-&gt;u^2, [1,2,3,4])\n\n4-element Vector{Int64}:\n  1\n  4\n  9\n 16\n\n\n\nfunction fun(arg1 ; add=0.0)\n    x = arg1 + add\n    return x +add\nend\n\nfun (generic function with 3 methods)\n\n\n\n\n\n\n\nfun(1; add=12)\n\n25\n\n\n\n\n\n\nt = (1,2,4)\n\n(1, 2, 4)\n\n\n\na,b,c = t\n\n(1, 2, 4)\n\n\n\n[(1:10)...]\n\n10-element Vector{Int64}:\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n\n\n\ncat([4,3], [0,1]; dims=1)\n\n4-element Array{Int64,1}:\n 4\n 3\n 0\n 1\n\n\n\nl = [[4,3], [0,1], [0, 0], [1, 1]]\n# how do I concatenate it ?\n\ncat(l...; dims=1) ### see python's f(*s)\n\n8-element Array{Int64,1}:\n 4\n 3\n 0\n 1\n 0\n 0\n 1\n 1\n\n\n\n\n\nAs we’ve seen, you can use Julia just like you use MATLAB and get faster code. However, to write faster and better code, attempt to write in a “Julian” manner:\n\nDefine composite types as logically needed\nWrite type-stable functions for best performance\nTake advantage of multiple dispatch to write code that looks like math\nAdd methods to existing functions\n\n\n\n\nHow is Julia so fast? Julia is just-in-time (JIT) compiled, which means (according to this StackExchange answer):\n\nA JIT compiler runs after the program has started and compiles the code (usually bytecode or some kind of VM instructions) on the fly (or just-in-time, as it’s called) into a form that’s usually faster, typically the host CPU’s native instruction set. A JIT has access to dynamic runtime information whereas a standard compiler doesn’t and can make better optimizations like inlining functions that are used frequently.\n\n\nThis is in contrast to a traditional compiler that compiles all the code to machine language before the program is first run.\n\nIn particular, Julia uses type information at runtime to optimize how your code is compiled. This is why writing type-stable code makes such a difference in speed!\n\n\n\nTaken from QuantEcon’s Julia Essentials and Vectors, Arrays, and Matrices lectures.\n\nConsider the polynomial \\[p(x) = \\sum_{i=0}^n a_0 x^0\\] Using enumerate, write a function p such that p(x, coeff) computes the value of the polynomial with coefficients coeff evaluated at x.\n\n\n\n\nppp (generic function with 1 method)\n\n\n\nWrite a function solve_discrete_lyapunov that solves the discrete Lyapunov equation \\[S = ASA' + \\Sigma \\Sigma'\\] using the iterative procedure \\[S_0 = \\Sigma \\Sigma'\\] \\[S_{t+1} = A S_t A' + \\Sigma \\Sigma'\\] taking in as arguments the \\(n \\times n\\) matrix \\(A\\), the \\(n \\times k\\) matrix \\(\\Sigma\\), and a number of iterations."
  },
  {
    "objectID": "tutorials/1_Julia_Basics_correction.html#additional-exercises",
    "href": "tutorials/1_Julia_Basics_correction.html#additional-exercises",
    "title": "Julia Basics",
    "section": "",
    "text": "Taken from QuantEcon’s Julia Essentials and Vectors, Arrays, and Matrices lectures.\n\nConsider the polynomial \\[p(x) = \\sum_{i=0}^n a_0 x^0\\] Using enumerate, write a function p such that p(x, coeff) computes the value of the polynomial with coefficients coeff evaluated at x.\n\n\n\n\nppp (generic function with 1 method)\n\n\n\nWrite a function solve_discrete_lyapunov that solves the discrete Lyapunov equation \\[S = ASA' + \\Sigma \\Sigma'\\] using the iterative procedure \\[S_0 = \\Sigma \\Sigma'\\] \\[S_{t+1} = A S_t A' + \\Sigma \\Sigma'\\] taking in as arguments the \\(n \\times n\\) matrix \\(A\\), the \\(n \\times k\\) matrix \\(\\Sigma\\), and a number of iterations."
  },
  {
    "objectID": "tutorials/3_perturbation_neoclassical.html",
    "href": "tutorials/3_perturbation_neoclassical.html",
    "title": "Perturbation of Neoclassical Model",
    "section": "",
    "text": "Our goal here is to compute a linear approximation of solution to the neoclassical model, close ot the steady-state.\n\nWarm-up: install the ForwardDiff library. Use it to differentiate the function below. Check the jacobian function.\nNote: the signature of function f needs to be fixed first to allow for dual numbers as arguments.\n\n# function f(x::Vector{T}) where T &lt;: Number\nfunction f(x::Vector{&lt;:Number}) # equivalent\n    a = x[1]\n    b = x[2]\n    x1 = a+b\n    x2 = a*exp(b)\n    return [x1,x2]\nend\n\nf (generic function with 4 methods)\n\n\n\nusing ForwardDiff\n\n\nForwardDiff.jacobian(f, [0.2, 0.4])\n\n2×2 Matrix{Float64}:\n 1.0      1.0\n 1.49182  0.298365\n\n\nCreate a NamedTuple to hold the model parameters.\n\nparameters = (;\n    α=0.3,\n    β=0.96,\n    γ=4.0,\n    δ=0.1,\n    ρ=0.9\n)\n\n(α = 0.3, β = 0.96, γ = 4.0, δ = 0.1, ρ = 0.9)\n\n\nDefine two functions: - transition(z::Number, k::Number, i::Number, p)::Tuple{Number} which returns productivity and capital at date t+1 as a function of productivity, capital and investment at date t - arbitrage(z::Number, k::Number, i::Number, Z::Number, K::Number, I::Number, p)::Number which returns the residual of the euler equation (lower case variable for date t, upper case for date t+1)\n\nfunction transition(z::Number, k::Number, i::Number, p)\n\n        Z = p.ρ * z\n        K = (1-p.δ) * k + i\n\n        (;Z, K)\n\nend\n\ntransition (generic function with 1 method)\n\n\n\nfunction arbitrage(z::Number, k::Number, i::Number, Z::Number, K::Number, I::Number, p)\n\n    # positional unpacking (error-prone)\n    # α, β, γ, δ, ρ = p\n    \n    (;α, β, γ, δ, ρ) = p\n\n    # define auxiliary variables today\n    y = exp(z)k^α\n    c = y - i\n\n    # define auxiliary variables tomorrow\n    Y = exp(Z)K^α\n    C = Y - I\n\n    residual = β*(C/c)^(-γ)*( (1-δ) + α*K^(α-1)*exp(Z)) - 1\n\n    return residual\n\n\nend\n\narbitrage (generic function with 1 method)\n\n\nUsing multiple dispatch, define two variants of the same functions, that take vectors as input and output arguments: - arbitrage(s::Vector{T}, x::Vector{T}, S::Vector{T}, X::Vector{T}, p) where T&lt;:Number - transition(s::Vector{T}, x::Vector{T}, p) where T&lt;:Number\n\n# this returns a number\n# arbitrage(s::Vector{T}, x::Vector{T}, S::Vector{T}, X::Vector{T}, p) where T&lt;:Number = arbitrage(s[1],s[2],x[1],S[1],S[2],X[1],p)\n\n\n[2.4]   # create a vector from  a number\n\n1-element Vector{Float64}:\n 2.4\n\n\n\narbitrage(s::Vector{T}, x::Vector{T}, S::Vector{T}, X::Vector{T}, p) where T&lt;:Number = [\n    arbitrage(s[1],s[2],x[1],S[1],S[2],X[1],p)\n]\n\narbitrage (generic function with 2 methods)\n\n\n\n# this returns a tuple\n# transition(s::Vector{T}, x::Vector{T}, p) where T&lt;: Number = transition(s[1], s[2], x[1], p)\n\n\nt = (1,2,3)\n\n(1, 2, 3)\n\n\n\n# to convert into a tuple into a vector\n[t...]\n\n3-element Vector{Int64}:\n 1\n 2\n 3\n\n\n\ntransition(s::Vector{T}, x::Vector{T}, p) where T&lt;: Number = [transition(s[1], s[2], x[1], p)...]\n\ntransition (generic function with 2 methods)\n\n\nWrite a function steady_state(p)::Tuple{Vector,Vector} which computes the steady-state of the model computed by hand. It returns two vectors, one for the states, one for the controls. Check that the steady-state satisfies the model equations.\n\nfunction steady_state(p)\n    (;α, β, γ, δ, ρ) = p\n\n    # ...\n    z = 0.0\n\n    k = ((1/β - (1-δ))/α)^ (1/(α-1))\n    i = δ*k\n\n    s = [z,k] # vector of states\n    x = [i]  # vector controls\n\n    return (;\n        s,\n        x\n    )\n\n\nend\n\nsteady_state (generic function with 1 method)\n\n\n\nq = steady_state(parameters)\n\n(s = [0.0, 2.920822149964071], x = [0.29208221499640713])\n\n\n\n# check the steady-state is correct using the functions representing the model\n\n\nmethods(transition)\n\n# 2 methods for generic function transition from \u001b[35mMain\u001b[39m: transition(z::Number, k::Number, i::Number, p) in Main at /home/pablo/Teaching/ensae/mie37/tutorials/3_perturbation_neoclassical.ipynb:1  transition(s::Vector{T}, x::Vector{T}, p) where T&lt;:Number in Main at /home/pablo/Teaching/ensae/mie37/tutorials/3_perturbation_neoclassical.ipynb:1 \n\n\n\n@assert maximum(transition(q.s, q.x, parameters) - q.s) == 0.0\n\n\n@assert maximum(arbitrage(q.s, q.x, q.s, q.x, parameters)) == 0.0\n\nThe first order system satisfies: \\[\\begin{align}A s_t + B x_t + C s_{t+1} + D x_{t+1} & = & 0 \\\\\\\\\ns_{t+1} & = & E s_t + F x_t\n\\end{align}\\]\nDefine a structure PerturbedModel to hold matrices A,B,C,D,E,F.\n\nstruct PerturbedModel\n    A::Matrix\n    B::Matrix\n    C::Matrix\n    D::Matrix\n    E::Matrix\n    F::Matrix\n\nend\n\nWrite a function first_order_model(s::Vector, x::Vector, p)::PerturbedModel, which returns the first order model, given the steady-state and the calibration. Suggestion: use ForwardDiff.jl library.\n\n# we need to loosen the constraint on the arbitrage arguments:\n\n# brutal\narbitrage(s, x, S, X, p) where T&lt;:Number = [\n    arbitrage(s[1],s[2],x[1],S[1],S[2],X[1],p)\n]\n\n\n# more precise\n# arbitrage(s::Vector{&lt;:Number}, x::Vector{&lt;:Number}, S::Vector{&lt;:Number}, X::Vector{&lt;:Number}, p) = [\n#     arbitrage(s[1],s[2],x[1],S[1],S[2],X[1],p)\n# ]\n\nWARNING: method definition for arbitrage at /home/pablo/Teaching/ensae/mie37/tutorials/3_perturbation_neoclassical.ipynb:4 declares type variable T but does not use it.\n\n\narbitrage (generic function with 3 methods)\n\n\n\narbitrage(s,x,s,x,parameters)\n\nUndefVarError: UndefVarError: `s` not defined\n\n\n\ntransition(s, x, p) where T&lt;: Number = [transition(s[1], s[2], x[1], p)...]\n\nWARNING: method definition for transition at /home/pablo/Teaching/ensae/mie37/tutorials/3_perturbation_neoclassical.ipynb:1 declares type variable T but does not use it.\n\n\ntransition (generic function with 3 methods)\n\n\n\nusing ForwardDiff\n\n\nfunction first_order_model(s, x, parameters)\n\n    A = ForwardDiff.jacobian(  u-&gt;arbitrage(u, x, s, x, parameters), s    )\n    B = ForwardDiff.jacobian(  u-&gt;arbitrage(s, u, s, x, parameters), x    )\n    C = ForwardDiff.jacobian(  u-&gt;arbitrage(s, x, u, x, parameters), s    )\n    D = ForwardDiff.jacobian(  u-&gt;arbitrage(s, x, s, u, parameters), x    )\n    E = ForwardDiff.jacobian(  u-&gt;transition(u, x, parameters), s    )\n    F = ForwardDiff.jacobian(  u-&gt;transition(s, u, parameters), x    )\n\n    return PerturbedModel(A,B,C,D,E,F)\n\nend\n\nfirst_order_model (generic function with 1 method)\n\n\n\n@time model = first_order_model(q.s, q.x, parameters)\n\n  1.343581 seconds (7.27 M allocations: 474.892 MiB, 7.63% gc time, 99.95% compilation time)\n\n\nPerturbedModel([5.074626865671642 0.5212190203776081], [-3.679193085018409;;], [-4.938626865671642 -0.5538125831185546], [3.679193085018409;;], [0.9 0.0; 0.0 0.9], [0.0; 1.0;;])\n\n\nWe look for a linear solution \\(x_t = X s_t\\) . Write the matrix equation which X must satisfy. Write a function residual(X::Array, M::PerturbedModel) which computes the residual of this equation for a given X.\n\nfunction residual(X::Matrix, M::PerturbedModel)\n    (;A,B,C,D,E,F) = M # keyword unpacking\n    return A + B*X + (C+D*X)*(E+F*X)\nend\n\nresidual (generic function with 1 method)\n\n\n\nX0 = zeros(1, 2)\nresidual(X0, model)\n\n1×2 Matrix{Float64}:\n 0.629863  0.0227877\n\n\nWrite a function T(X, M::PerturbedModel) which implements the time iteration step.\n\nfunction T(X::Matrix, M::PerturbedModel)\n    (;A,B,C,D,E,F) = M # keyword unpacking\n\n    C_DX = (C+D*X)\n\n    return -(B+C_DX*F) \\ (A+C_DX*E)\n    # return  -solve(B+C_DX*F ,   (A+C_DX*E))\n    # return  -inv(B+C_DX*F)*(A+C_DX*E)) # not ok\nend\n\nT (generic function with 1 method)\n\n\n\nT(X0, model)\n\n1×2 Matrix{Float64}:\n 0.148798  0.00538334\n\n\nWrite function linear_time_iteration(X_0::Matrix, m::PerturbedModel)::Matrix which implements the time iteration algorithm. Apply it to X0 = rand(1,2) and check that the result satisfies the first order model.\n\nA = rand(10000, 10000);\nB = rand(10000, 10000);\n\n\ndistance(A,B) = sum(abs(e1-e2) for (e1, e2) in zip(A,B))\n\ndistance (generic function with 1 method)\n\n\n\nfunction linear_time_iteration(X_0, M; N=5, τ_η=1e-8, verbose=true)\n\n    η_0 = 1.0\n\n    for n in 1:N\n\n        X = T(X_0, M)\n\n        # successive approximation error\n        η = distance(X, X_0)\n\n\n        # ratio of successive approximation errors\n        λ = η/η_0\n\n        if verbose\n            println(n, \" : \", η, \" : \", λ)\n        end\n\n        # η_0 will be the value from last iteration\n        η_0 = η\n\n        if η&lt;τ_η\n            return X\n        end\n\n        X_0 = X\n    end\n\n    error(\"No convergence\")\n\nend\n\nlinear_time_iteration (generic function with 1 method)\n\n\n\n@time sol = linear_time_iteration(X0, model; N=500)\n\n1 : 0.15418131543048902 : 0.15418131543048902\n2 : 0.12190031209691013 : 0.7906296022741327\n3 : 0.0971923112531961 : 0.7973097819136732\n4 : 0.07801352484927856 : 0.802671773552593\n5 : 0.06295682833902616 : 0.8069988948795506\n6 : 0.05102689044058986 : 0.8105060529067174\n7 : 0.04150316170984929 : 0.8133586301554283\n8 : 0.033853524549360574 : 0.815685435871905\n9 : 0.027678228788813052 : 0.8175878038476156\n10 : 0.022672513753932016 : 0.8191461211960124\n11 : 0.018601088097577975 : 0.8204246030880477\n12 : 0.01528032593947912 : 0.8214748438006029\n13 : 0.01256560026933672 : 0.8223384971698489\n14 : 0.010342108838667052 : 0.8230493264937326\n15 : 0.008518120644127804 : 0.8236347902547955\n16 : 0.007019930424960394 : 0.8241172810577381\n17 : 0.005788038650448812 : 0.8245151020113518\n18 : 0.004774224564889556 : 0.8248432419364298\n19 : 0.0039392795027168095 : 0.8251139947808338\n20 : 0.003251234928149705 : 0.8253374572450166\n21 : 0.0026839657341018452 : 0.8255219304097795\n22 : 0.0022160813815156506 : 0.8256742451509851\n23 : 0.0018300400639542705 : 0.8258000266680848\n24 : 0.001511437244487067 : 0.8259039101150711\n25 : 0.0012484316214957068 : 0.8259897167741055\n26 : 0.001031280172156878 : 0.8260605982739636\n27 : 0.0008519603042240476 : 0.8261191548386015\n28 : 0.0007038619422192541 : 0.8261675323715003\n29 : 0.000581536017211115 : 0.826207502251863\n30 : 0.00048048862532256223 : 0.8262405269872226\n31 : 0.00039701228622349843 : 0.8262678142629821\n32 : 0.0003280474254938187 : 0.8262903614754736\n33 : 0.0002710685376324101 : 0.8263089924402341\n34 : 0.00022399054337329805 : 0.8263243876611255\n35 : 0.00018509169812225973 : 0.8263371093028231\n36 : 0.00015295008455855352 : 0.8263476218016245\n37 : 0.00012639126731726208 : 0.826356308870663\n38 : 0.00010444512845603215 : 0.826363487549012\n39 : 8.631026020181412e-5 : 0.8263694197872312\n40 : 7.132458275916145e-5 : 0.8263743220375822\n41 : 5.894109266629463e-5 : 0.8263783731524711\n42 : 4.870784159012598e-5 : 0.8263817209140318\n43 : 4.0251404707945804e-5 : 0.8263844874642432\n44 : 3.3263228473082856e-5 : 0.8263867736898273\n45 : 2.7488354905323004e-5 : 0.8263886630116805\n46 : 2.2716107776505484e-5 : 0.826390224323923\n47 : 1.8772398710901333e-5 : 0.8263915145849502\n48 : 1.551337101909217e-5 : 0.8263925808311001\n49 : 1.2820148383725638e-5 : 0.826393461997911\n50 : 1.0594496141231452e-5 : 0.8263941901546545\n51 : 8.755236434329627e-6 : 0.8263947919388228\n52 : 7.235286145202552e-6 : 0.8263952892046078\n53 : 5.979209359931875e-6 : 0.8263957001751017\n54 : 4.94119493606518e-6 : 0.8263960397803294\n55 : 4.083385313793236e-6 : 0.8263963204505664\n56 : 3.374495545591105e-6 : 0.8263965524371217\n57 : 2.788672131517206e-6 : 0.8263967439994704\n58 : 2.304550011482387e-6 : 0.826396902467187\n59 : 1.9044732927631092e-6 : 0.8263970333792274\n60 : 1.5738512852726816e-6 : 0.8263971415368372\n61 : 1.300626344003658e-6 : 0.8263972309037538\n62 : 1.074834105267708e-6 : 0.8263973048239941\n63 : 8.882400730839124e-7 : 0.826397365631303\n64 : 7.340393016162794e-7 : 0.8263974164864485\n65 : 6.066082128101946e-7 : 0.8263974578397988\n66 : 5.012995060102443e-7 : 0.8263974925230678\n67 : 4.1427266909629945e-7 : 0.826397521101554\n68 : 3.4235391643128166e-7 : 0.8263975443470543\n69 : 2.8292044249381143e-7 : 0.8263975637930232\n70 : 2.338047691008427e-7 : 0.8263975803231571\n71 : 1.9321569839914066e-7 : 0.8263975929242252\n72 : 1.596729903574623e-7 : 0.8263976047516254\n73 : 1.3195337798116435e-7 : 0.826397612305991\n74 : 1.0904595768024272e-7 : 0.8263976212553532\n75 : 9.011532065353323e-8 : 0.8263976269324892\n76 : 7.44710876507404e-8 : 0.826397632618539\n77 : 6.154273075875683e-8 : 0.8263976356486713\n78 : 5.085876750646201e-8 : 0.8263976407843324\n79 : 4.202956567153637e-8 : 0.8263976445397774\n80 : 3.473313383434151e-8 : 0.8263976388855188\n81 : 2.870338035310116e-8 : 0.8263976550460705\n82 : 2.372040580275736e-8 : 0.8263976406595807\n83 : 1.9602487667802482e-8 : 0.8263976523337474\n84 : 1.619944979894261e-8 : 0.8263976528627315\n85 : 1.33871871400848e-8 : 0.8263976435149435\n86 : 1.1063140292755236e-8 : 0.8263976724153838\n87 : 9.142552898772083e-9 : 0.8263976282357315\n  0.188574 seconds (380.90 k allocations: 25.696 MiB, 5.04% gc time, 99.17% compilation time)\n\n\n1×2 Matrix{Float64}:\n 0.768674  0.0278097\n\n\n\nresidual(sol, model)\n\n1×2 Matrix{Float64}:\n 3.01193e-8  1.08968e-9\n\n\nCheck blanchard Kahn Conditions\n\n# check that solution is not diverging\n# let's check the transition matrix has spectral radius smaller than 1\n\n\nusing LinearAlgebra\n\n\nfunction bk_check(X, M)\n    (;A,B,C,D,E,F) = M # keyword unpacking\n\n    P = E+F*X\n    maximum(abs,eigvals(P))\n\n    # can check the solution is unique by computing the first \"rejected\" eigenvalue\n\n\nend\n\nbk_check (generic function with 1 method)\n\n\n\nbk_check(sol, model)\n\n4.13068831324392\n\n\nDefine two linear operators L_S(U::Union{Vector, Matrix}, X_0::Matrix, m::PerturbedModel)::Matrix and L_T(U::Matrix, X_0::Matrix, m::PerturbedModel)::Matrix which implement the derivatives of the simulation and the time-iteration operator respectively.\nImplement a function spectral_radius(f::Function)::Float64 which implements the power iteration method to compute the biggest eigenvalues of the two previously defined operators. Check that Blanchard-Kahn conditions are met.\nWrite a function simulate(s0::Vector, X::Matrix, p, T::Int64)::Tuple{Matrix, Matrix} to simulate the model over \\(T\\) periods (by using the formula \\(\\Delta s_t = (E + F X) \\Delta s_{t-1}\\). Return a matrix for the states (one line per date) and another matrix for the controls. Bonus: add a keyword option to compute variables levels or log-deviations. If possible, return a DataFrame object.\n\nP = model.E + model.F*sol\n\n2×2 Matrix{Float64}:\n 0.9       0.0\n 0.768674  0.92781\n\n\nMake some nice plots."
  },
  {
    "objectID": "tutorials/2_solow_pablo.html",
    "href": "tutorials/2_solow_pablo.html",
    "title": "Convergence of Sequences",
    "section": "",
    "text": "Tutorial: Convergence\n\nSolow Model\nA representative agent uses capital \\(k_t\\) to produce \\(y_t\\) using the following production function:\n\\[y_t = k_t^{\\alpha}\\]\nHe chooses to consume an amount \\(c_t \\in ]0, y_t]\\) and invests what remains:\n\\[i_t = y_t - c_t\\]\nHe accumulates capital \\(k_t\\) according to:\n\\[k_{t+1} = \\left( 1-\\delta \\right) k_{t} + i_{t}\\]\nwhere \\(\\delta\\) is the depreciation rate and \\(i_t\\) is the amount invested.\nThe goal of the representative agent is to maximize:\n\\[\\sum_{t\\geq 0} \\beta^t U(c_t)\\]\nwhere \\(U(x)=\\frac{x^{1-\\gamma}}{1-\\gamma}\\) and \\(\\beta&lt;1\\) is the discount factor.\nFor now, we ignore the objective and assume that the saving rate \\(s=\\frac{c_t}{y_t}\\) is constant over time.\n\n# # how to represent the model?\n\n# struct Model\n#     α\n#     β\n#     γ\n#     δ\n# end\n\n# model = Model(0.3, 0.9, 4, 0.1)\n\nModel(0.3, 0.9, 4, 0.1)\n\n\n\n# model_2 = recalibrate(model; α=0.3)\n\nModel(0.3, 0.9)\n\n\nCreate a NamedTuple to hold parameter values \\(\\beta=0.96\\), \\(\\delta=0.1\\), \\(\\alpha=0.3\\), \\(\\gamma=4\\).\n\nmodel = (;α=0.3, β=0.1, γ=4.0, δ=0.1  )\n\n(α = 0.3, β = 0.1, γ = 4.0, δ = 0.1)\n\n\n\nmodel.α\n\n0.3\n\n\n\nmodel_2 = merge(model, (;α=0.4))\n\n(α = 0.4, β = 0.1, γ = 4.0, δ = 0.1)\n\n\n\n# why not a dictionary\ntypeof(model) # each named typle has its own type (based on names)\n\nNamedTuple{(:α, :β, :γ, :δ), NTuple{4, Float64}}\n\n\nWrite down the formula of function \\(f\\) such that \\(k_{t+1}\\): \\(k_{t+1} = f(k_t)\\).\nThe equation for capital transition is: \\(...\\)\nDefine a function f(k::Float64, p::NamedTuple)::Float64 to represent \\(f\\) for a given calibration\n\nfunction f(k, model; s=0.3)\n\n    # α = model.α\n    # β = model.β\n    # γ = model.γ\n    # δ = model.δ\n\n    # specialized syntax to \"unpack\" values from namedtuples\n    (;α,β,γ,δ) = model\n\n    y = k^α\n    i = s*y\n    K = (1-δ)*k + i\n\n    return K\n\nend\n\nf (generic function with 1 method)\n\n\n\nf(0.5, model; s=0.4)\n\n0.7749009585424942\n\n\nWrite a function simulate(k0::Float64, T::Int, p::NamedTuple)::Vector{Float64} to compute the simulation over T periods starting from initial capital level k0.\n\n# let' s add saving rate as named argumetn\n\nfunction simulate(k0, model; s=0.4, T=100)\n    \n    res = [k0]\n    for t=1:T\n        k = res[end]\n        K = f(k, model; s=s)\n        push!(res, K)\n    end\n\n    return res\n\nend\n\nsimulate (generic function with 2 methods)\n\n\n\nsim = simulate(0.5, model)\n\n101-element Vector{Float64}:\n 0.5\n 0.7749009585424942\n 1.0679497992469396\n 1.3691220146661789\n 1.6717439771875893\n 1.9712406953317936\n 2.2644391998184954\n 2.5491450744662236\n 2.8238676158995952\n 3.087632556067258\n ⋮\n 7.234413529429885\n 7.235209646662481\n 7.2359500610507625\n 7.236638668366576\n 7.23727909214093\n 7.237874702658239\n 7.238428634629446\n 7.238943803635337\n 7.2394229214251595\n\n\n\nsimulate(k0, model, T; s=0.4) = simulate(k0, model; s=s, T=T)\n\nsimulate (generic function with 2 methods)\n\n\n\nmethods(simulate)\n\n# 2 methods for generic function simulate from \u001b[35mMain\u001b[39m: simulate(k0, model; s, T) in Main at /home/pablo/Teaching/ensae/mie37/tutorials/2_solow_pablo.ipynb:3  simulate(k0, model, T; s) in Main at /home/pablo/Teaching/ensae/mie37/tutorials/2_solow_pablo.ipynb:1 \n\n\nMake a nice plot to illustrate the convergence. Do we get convergence from any initial level of capital?\n\n# different libraries. Main options:\n# Plots.jl -&gt; different backends, including matplotlib\n# Makie.jl -&gt; fast with easy animations\n\n\nusing Plots\n\n\nplot(sim)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsim_1 = simulate(0.5, model; s=0.3)\nsim_2 = simulate(0.5, model; s=0.4)\nsim_3 = simulate(0.5, model; s=0.5)\n\n101-element Vector{Float64}:\n 0.5\n 0.8561261981781177\n 1.2477475382753753\n 1.6573008927807404\n 2.073393171590884\n 2.4883176067712327\n 2.8967527254553693\n 3.2950061580751355\n 3.680539839343968\n 4.051654372933684\n ⋮\n 9.949900641171165\n 9.951039677408726\n 9.952099018857133\n 9.95308423905062\n 9.954000522065433\n 9.954852689688693\n 9.95564522669805\n 9.956382304382648\n 9.957067802427053\n\n\n\npl = plot(title=\"Convergence in Solow Model\")\nplot!(pl, sim_1; label=\"s=0.3\")\nplot!(pl, sim_2; label=\"s=0.4\")\nplot!(pl, sim_3; label=\"s=0.5\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSuppose you were interested in using f to compute the steady-state. What would you propose to measure convergence speed? To speed-up convergence? Implement these ideas."
  },
  {
    "objectID": "pushups/1_epidemiology.html",
    "href": "pushups/1_epidemiology.html",
    "title": "Epidemiology Models",
    "section": "",
    "text": "H.W. Heathcote: epidemiologic models are deterministic models for infectious diseases which are spread by direct person-to-person contact in a population.\nThis kind of models has been used since by a few decades by economist, for matters that have nothing to do with health.\n\ndiffusion of information, or opinions on social medias\nasset prices and fads\nexpectation formation for macroeconomic outcomes (ex: The Epidemiology of Macroeconomic Expectations by Chris Carroll)\n\nEpidemiologic models have two features that depart from standard economic models:\n\nAgent’s behaviour does not take the full system into account, an is irrational in the sense that it isn’t forward looking. Instead, an agent is given a behavioural heuristic.\nThe transitions of the whole system can be determined without solving for complex interactions first.\n\nUnderstanding why these two assumptions are very costly for economists will keep us busy during a big part of the course. Here we just consider two simple models as small programming exercises.\n\nSimple SIR model\nThere is a continuum of agents of mass \\(1\\). Each agent can be either “Susceptible” (S), “Infected” (I) or “Recovered” (R). In each period, one agent meets another agent drawn randomly. During a meeting Susceptible agents who meet an infected agent, will always catch the disease (or the fad) but are not contagious. Infected agents, have a probability \\(\\pi\\) of being recovered. Nothing happens to Recovered agents who meet other people. No distinction is made between recovering as a healthy or a dead person.\nWe’re interested in the evolution in the number infected persons, both the speed of infection and the total amount of infected people in every period.\nWrite down the transition equations for \\(n_I\\), the number of infected people, for \\(n_R\\) the number of recovered people and \\(n_S\\) the number of susceptible people.\nCompute the transition function f for the vector state \\(s_t\\) returning \\(s_{t+1}\\).\nCompute the transitions over \\(T\\) periods. Plot the result using Plots.jl. (bonus: check against closed form solution)\nWe now assume a Susceptible person who meets an infected one has a probability \\(\\mu\\) of catching the disease. Update the transition function \\(f\\) and write a function simulate of \\(\\mu\\), \\(\\pi\\) which returns the simulation. Compare different values of the parameters. How would you interpret “social distancing”? How would you choose parameters \\(\\Pi\\) and \\(\\mu\\)\n\n\nA Spatial SIR model\nWe now consider another version of the model where agents evolve in the space \\(\\mathcal{S}=[0,1]\\times[0,1]\\). There are \\(N\\in\\mathbb{N}\\) agent. At any date, each agent \\(n \\in [0,1]\\) is located at \\((x_n,y_n)\\in \\mathcal{S}\\).\nEach agent moves follows a random walk bounded by \\(\\mathcal{S}\\): \\[x_t = \\min(\\max( x_{t-1} + \\epsilon_t, 0), 1)\\] \\[y_t = \\min(\\max( y_{t-1} + \\eta_t, 0), 1)\\] where \\(\\epsilon_t\\) and \\(\\eta_t\\) are both normally distributed with standard deviation \\(\\sigma\\).\nAt any date, the individual state of an agent is \\(s_t=(x_t, y_t, h_t)\\) where \\(h_t\\) is either “S”, “I” or “R”. \\(v_t\\) denotes the states of all agents (for instance \\(v_t=(s_{n,t})_n\\). The health status of each agent is updated in the following way:\n\nAgents \\(R\\) stay \\(R\\).\nAgents \\(I\\) have probability \\(\\pi\\) to become \\(R\\). They stay \\(I\\) otherwise.\nAn agent of type \\(S\\) in position \\((x,y)\\) has a probability \\(prob(x,y,S)\\) to be infected that is \\(\\mu\\) if there is another infected agent within a radius \\(r&gt;0\\).\n\nDefine a type Agent, which holds the type of an agent. The state of the whole system will be held in a Vector[Agent] type.\nWrite a function spatial_transition(S::Vector{Agent})::Vector{Agent} to compute the transition of the positions. Write another function random_guess(T=100) which simulates for \\(T\\) periods in order to find a good initial guess.\nWrite a function show_population to plot all agents with different colors for different health status.\nWrite a function evolve(S::Vector[Agent])::Vector[Agent] which takes the population in a given state and returns the same population with updated health status.\nWrite a function simulate(S0::Vector[Agent], k=1) to simulate the economy starting from an initially random position with k infected individuals. The returned object should be of type Vector[Vector[Agent]].\nCompute statistics along a simulated path for \\(n_I\\), \\(n_S\\), \\(n_R\\). Plot and compare with the basic SIR model\n\n\nAdditional questions\nHave fun by trying to answer one of these questions:\n\nchange probability of infection so that it depends on the number of infected people in the vincinity (with some suitable functional formulation for)\ncompute an animation of the transition\ncompute an interactive visualisation (with Interact.jl if available)",
    "crumbs": [
      "Pushups",
      "Epidemiology Models"
    ]
  }
]