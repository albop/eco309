[
  {
    "objectID": "docs/pushups/1_epidemiology_correction.out.html",
    "href": "docs/pushups/1_epidemiology_correction.out.html",
    "title": "Epidemiology Models",
    "section": "",
    "text": "Epidemiology Models\nH.W. Heathcote: epidemiologic models are deterministic models for infectious diseases which are spread by direct person-to-person contact in a population.\nThis kind of models has been used since by a few decades by economist, for matters that have nothing to do with health.\n\ndiffusion of information, or opinions on social medias\nasset prices and fads\nexpectation formation for macroeconomic outcomes (ex: The Epidemiology of Macroeconomic Expectations by Chris Carroll)\n\nEpidemiologic models have two features that depart from standard economic models:\n\nAgent’s behaviour does not take the full system into account, an is irrational in the sense that it isn’t forward looking. Instead, an agent is given a behavioural heuristic.\nThe transitions of the whole system can be determined without solving for complex interactions first.\n\nUnderstanding why these two assumptions are very costly for economists will keep us busy during a big part of the course. Here we just consider two simple models as small programming exercises.\n\nSimple SIR model\nThere is a continuum of agents of mass \\(1\\). Each agent can be either “Susceptible” (S), “Infected” (I) or “Recovered” (R). In each period, one agent meets another agent drawn randomly. During a meeting Susceptible agents who meet an infected agent, will always catch the disease (or the fad) but are not contagious. Infected agents, have a probability \\(\\pi\\) of being recovered. Nothing happens to Recovered agents who meet other people. No distinction is made between recovering as a healthy or a dead person.\nWe’re interested in the evolution in the number infected persons, both the speed of infection and the total amount of infected people in every period.\nWrite down the transition equations for \\(n_I\\), the number of infected people, for \\(n_R\\) the number of recovered people and \\(n_S\\) the number of susceptible people.\nHere are the transitions :\n\n\\(n_{S,t} = n_{S,t-1} (1-n_{I,t-1})\\)\n\\(n_{I,t} = n_{S,t-1} n_{I,t} + n_{I,t-1} (1-\\pi)\\)\n\\(n_{R,t} = n_{I,t-1} \\pi + n_{R,t-1}\\)\n\nCompute the transition function f for the vector state \\(s_t\\) returning \\(s_{t+1}\\).\n\n\"Compute new state from old state `s`\"\nfunction f(s::Vector{Float64}; π=0.1)::Vector{Float64}\n    \n    # comments\n    n_S, n_I, n_R = s\n    # equivalent to \n    # n_S = s[1]\n    # n_I = s[2]\n    # n_R = s[3]\n\n    N_S = n_S*(1-n_I)\n    N_I = n_S*n_I + n_I*(1-π)\n    N_R = n_I*π + n_R\n\n    return [N_S, N_I, N_R]\n\nend\n\nf\n\n\n\nv = f([0.2, 0.5, 0.3])\n\n3-element Vector{Float64}:\n 0.1\n 0.55\n 0.35\n\n\n\n# check that vector v sums to 1\nv[1] + v[2] + v[3] == 1.0\n\ntrue\n\n\n\nsum(v) == 1.0\n\ntrue\n\n\n\n# two kinds of optional arguments:\n\n# named arguments separated by semi-colon\n# like python\nfunction fun(a,b ; pi=3.14, beta=0.96)\n    nothing\nend\n\n# optional argument\nfunction gun(a,b,pi=3)\nend\n\n# equivalent to\nfunction gun(a,b)\nend\nfunction gun(a,b,pi)(1-n_I)\nend\n\n\n### MESSAGE\n\n# use semi-colon for named arguments\n\nCompute the transitions over \\(T\\) periods. Plot the result using Plots.jl. (bonus: check against closed form solution)\n\nfunction simulate(s0; π=0.1, T=20)\n\n    simul = [s0]\n\n    for i ∈ 1:T  # \\in you can also use `in` or `=`\n        s = simul[end]\n        s1 = f(s; π=π)\n        push!(simul, s1)\n    end\n\n    return simul\n\nend\n\nsimulate (generic function with 1 method)\n\n\n\nusing Plots\n\n\ns0 = [0.9, 0.1, 0.0]\nsim = simulate(s0)\n\n21-element Vector{Vector{Float64}}:\n [0.9, 0.1, 0.0]\n [0.81, 0.18000000000000002, 0.010000000000000002]\n [0.6642, 0.3078000000000001, 0.028000000000000004]\n [0.45975923999999996, 0.48146076000000015, 0.05878000000000001]\n [0.23840320689257752, 0.6546707171074226, 0.10692607600000004]\n [0.08232760847550455, 0.7452792438137533, 0.17239314771074232]\n [0.02097055068588577, 0.7321083772219967, 0.24692107209211767]\n [0.005617834853790308, 0.6742502553318925, 0.32013190981431733]\n [0.0018300082692097876, 0.6106130563832839, 0.38755693534750657]\n [0.0007125813267409158, 0.5506691776874244, 0.44861824098583497]\n ⋮\n [8.931225220166544e-5, 0.40197066326707453, 0.5979400244807241]\n [5.341134694628574e-5, 0.3618094978456225, 0.6381370908074316]\n [3.408661432839177e-5, 0.32564787279367813, 0.6743180405919939]\n [2.298638088161248e-5, 0.29309418574775714, 0.7068828278713617]\n [1.624920629382846e-5, 0.2637915043475692, 0.7361922464461375]\n [1.196280372112546e-5, 0.23741664031538498, 0.7625713968808944]\n [9.122635052903468e-6, 0.2136778164525147, 0.7863130609124329]\n [7.173330314505884e-6, 0.19231198411200165, 0.8076808425576844]\n [5.793812929032488e-6, 0.17308216521818695, 0.8269120409688845]\n\n\n\n[e[1] for e in sim]; # vector of susceptible people\n\n\npl = plot([e[1] for e in sim]; title=\"Evolution of Disease\", xlabel=\"\\$t\\$\", label=\"\\$n_{S,t}\\$\")\n# \"\\$t\\$\" is needed because in \"$t$\" the dollar sign would be interpreted as interpolation command\nplot!(pl, [e[2] for e in sim], label=\"\\$n_{I,t}\\$\")\nplot!(pl, [e[3] for e in sim], label=\"\\$n_{R,t}\\$\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns0 = [0.99, 0.01, 0.0]\nsim1 = simulate(s0;)\npl = plot([e[1] for e in sim1]; title=\"Evolution of Disease\", xlabel=\"\\$t\\$\", label=\"\\$n_{S,t}\\$\")\n# \"\\$t\\$\" is needed because in \"$t$\" the dollar sign would be interpreted as interpolation command\nplot!(pl, [e[2] for e in sim1], label=\"\\$n_{I,t}\\$\")\nplot!(pl, [e[3] for e in sim1], label=\"\\$n_{R,t}\\$\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe now assume a Susceptible person who meets an infected one has a probability \\(\\mu\\) of catching the disease. Update the transition function \\(f\\) and write a function simulate of \\(\\mu\\), \\(\\pi\\) which returns the simulation. Compare different values of the parameters. How would you interpret “social distancing”? How would you choose parameters \\(\\Pi\\) and \\(\\mu\\)\n\n\"Compute new state from old state `s`\"\nfunction f(s::Vector{Float64}; π=0.1, μ=1.0)::Vector{Float64}\n    \n    # comments\n    n_S, n_I, n_R = s\n    # equivalent to \n    # n_S = s[1]\n    # n_I = s[2]\n    # n_R = s[3]\n\n    N_S = n_S - n_S*n_I*μ\n    N_I = n_S*n_I*μ + n_I*(1-π)\n    N_R = n_I*π + n_R\n\n    return [N_S, N_I, N_R]\n\nend\n\nf\n\n\n\nfunction simulate(s0; π=0.1, T=20, μ=1.0)\n\n    simul = [s0]\n\n    for i ∈ 1:T  # \\in you can also use `in` or `=`\n        s = simul[end]\n        s1 = f(s; π=π, μ=μ)\n        push!(simul, s1)\n    end\n\n    return simul\n\nend\n\nsimulate (generic function with 1 method)\n\n\n\ns0 = [0.99, 0.01, 0.0]\nsim0 = simulate(s0;)\npl0 = plot([e[1] for e in sim0]; title=\"Evolution with \\$\\\\mu=1.0\\$\", xlabel=\"\\$t\\$\", label=\"\\$n_{S,t}\\$\")\n# \"\\$t\\$\" is needed because in \"$t$\" the dollar sign would be interpreted as interpolation command\nplot!(pl0, [e[2] for e in sim0], label=\"\\$n_{I,t}\\$\")\nplot!(pl0, [e[3] for e in sim0], label=\"\\$n_{R,t}\\$\")\n\ns0 = [0.99, 0.01, 0.0]\nsim1 = simulate(s0; μ=0.5)\npl1 = plot([e[1] for e in sim1]; title=\"Evolution  \\$\\\\mu=0.5\\$\", xlabel=\"\\$t\\$\", label=\"\\$n_{S,t}\\$\")\n# \"\\$t\\$\" is needed because in \"$t$\" the dollar sign would be interpreted as interpolation command\nplot!(pl1, [e[2] for e in sim1], label=\"\\$n_{I,t}\\$\")\nplot!(pl1, [e[3] for e in sim1], label=\"\\$n_{R,t}\\$\")\n\nplot(pl0, pl1)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA Spatial SIR model\nWe now consider another version of the model where agents evolve in the space \\(\\mathcal{S}=[0,1]\\times[0,1]\\). There are \\(N\\in\\mathbb{N}\\) agent. At any date, each agent \\(n \\in [0,1]\\) is located at \\((x_n,y_n)\\in \\mathcal{S}\\).\nEach agent moves follows a random walk bounded by \\(\\mathcal{S}\\): \\[x_t = \\min(\\max( x_{t-1} + \\epsilon_t, 0), 1)\\] \\[y_t = \\min(\\max( y_{t-1} + \\eta_t, 0), 1)\\] where \\(\\epsilon_t\\) and \\(\\eta_t\\) are both normally distributed with standard deviation \\(\\sigma\\).\nAt any date, the individual state of an agent is \\(s_t=(x_t, y_t, h_t)\\) where \\(h_t\\) is either “S”, “I” or “R”. \\(v_t\\) denotes the states of all agents (for instance \\(v_t=(s_{n,t})_n\\). The health status of each agent is updated in the following way:\n\nAgents \\(R\\) stay \\(R\\).\nAgents \\(I\\) have probability \\(\\pi\\) to become \\(R\\). They stay \\(I\\) otherwise.\nAn agent of type \\(S\\) in position \\((x,y)\\) has a probability \\(prob(x,y,S)\\) to be infected that is \\(\\mu\\) if there is another infected agent within a radius \\(r&gt;0\\).\n\nDefine a type Agent, which holds the type of an agent. The state of the whole system will be held in a Vector[Agent] type.\nWrite a function spatial_transition(S::Vector{Agent})::Vector{Agent} to compute the transition of the positions. Write another function random_guess(T=100) which simulates for \\(T\\) periods in order to find a good initial guess.\nWrite a function show_population to plot all agents with different colors for different health status.\nWrite a function evolve(S::Vector[Agent])::Vector[Agent] which takes the population in a given state and returns the same population with updated health status.\nWrite a function simulate(S0::Vector[Agent], k=1) to simulate the economy starting from an initially random position with k infected individuals. The returned object should be of type Vector[Vector[Agent]].\nCompute statistics along a simulated path for \\(n_I\\), \\(n_S\\), \\(n_R\\). Plot and compare with the basic SIR model\n\n\nAdditional questions\nHave fun by trying to answer one of these questions:\n\nchange probability of infection so that it depends on the number of infected people in the vincinity (with some suitable functional formulation for)\ncompute an animation of the transition\ncompute an interactive visualisation (with Interact.jl if available)"
  },
  {
    "objectID": "pushups/1_epidemiology_correction.html",
    "href": "pushups/1_epidemiology_correction.html",
    "title": "Epidemiology Models",
    "section": "",
    "text": "H.W. Heathcote: epidemiologic models are deterministic models for infectious diseases which are spread by direct person-to-person contact in a population.\nThis kind of models has been used since by a few decades by economist, for matters that have nothing to do with health.\n\ndiffusion of information, or opinions on social medias\nasset prices and fads\nexpectation formation for macroeconomic outcomes (ex: The Epidemiology of Macroeconomic Expectations by Chris Carroll)\n\nEpidemiologic models have two features that depart from standard economic models:\n\nAgent’s behaviour does not take the full system into account, an is irrational in the sense that it isn’t forward looking. Instead, an agent is given a behavioural heuristic.\nThe transitions of the whole system can be determined without solving for complex interactions first.\n\nUnderstanding why these two assumptions are very costly for economists will keep us busy during a big part of the course. Here we just consider two simple models as small programming exercises.\n\nSimple SIR model\nThere is a continuum of agents of mass \\(1\\). Each agent can be either “Susceptible” (S), “Infected” (I) or “Recovered” (R). In each period, one agent meets another agent drawn randomly. During a meeting Susceptible agents who meet an infected agent, will always catch the disease (or the fad) but are not contagious. Infected agents, have a probability \\(\\pi\\) of being recovered. Nothing happens to Recovered agents who meet other people. No distinction is made between recovering as a healthy or a dead person.\nWe’re interested in the evolution in the number infected persons, both the speed of infection and the total amount of infected people in every period.\nWrite down the transition equations for \\(n_I\\), the number of infected people, for \\(n_R\\) the number of recovered people and \\(n_S\\) the number of susceptible people.\nHere are the transitions :\n\n\\(n_{S,t} = n_{S,t-1} (1-n_{I,t-1})\\)\n\\(n_{I,t} = n_{S,t-1} n_{I,t} + n_{I,t-1} (1-\\pi)\\)\n\\(n_{R,t} = n_{I,t-1} \\pi + n_{R,t-1}\\)\n\nCompute the transition function f for the vector state \\(s_t\\) returning \\(s_{t+1}\\).\n\n\"Compute new state from old state `s`\"\nfunction f(s::Vector{Float64}; π=0.1)::Vector{Float64}\n    \n    # comments\n    n_S, n_I, n_R = s\n    # equivalent to \n    # n_S = s[1]\n    # n_I = s[2]\n    # n_R = s[3]\n\n    N_S = n_S*(1-n_I)\n    N_I = n_S*n_I + n_I*(1-π)\n    N_R = n_I*π + n_R\n\n    return [N_S, N_I, N_R]\n\nend\n\nf\n\n\n\nv = f([0.2, 0.5, 0.3])\n\n3-element Vector{Float64}:\n 0.1\n 0.55\n 0.35\n\n\n\n# check that vector v sums to 1\nv[1] + v[2] + v[3] == 1.0\n\ntrue\n\n\n\nsum(v) == 1.0\n\ntrue\n\n\n\n# two kinds of optional arguments:\n\n# named arguments separated by semi-colon\n# like python\nfunction fun(a,b ; pi=3.14, beta=0.96)\n    nothing\nend\n\n# optional argument\nfunction gun(a,b,pi=3)\nend\n\n# equivalent to\nfunction gun(a,b)\nend\nfunction gun(a,b,pi)(1-n_I)\nend\n\n\n### MESSAGE\n\n# use semi-colon for named arguments\n\nErrorException: syntax: \"(1 - n_I)\" is not a valid function argument name around /home/pablo/Teaching/polytechnique/eco309_past/pushups/1_epidemiology.ipynb:16\n\n\nCompute the transitions over \\(T\\) periods. Plot the result using Plots.jl. (bonus: check against closed form solution)\n\nfunction simulate(s0; π=0.1, T=20)\n\n    simul = [s0]\n\n    for i ∈ 1:T  # \\in you can also use `in` or `=`\n        s = simul[end]\n        s1 = f(s; π=π)\n        push!(simul, s1)\n    end\n\n    return simul\n\nend\n\nsimulate (generic function with 1 method)\n\n\n\nusing Plots\n\n\ns0 = [0.9, 0.1, 0.0]\nsim = simulate(s0)\n\n21-element Vector{Vector{Float64}}:\n [0.9, 0.1, 0.0]\n [0.81, 0.18000000000000002, 0.010000000000000002]\n [0.6642, 0.3078000000000001, 0.028000000000000004]\n [0.45975923999999996, 0.48146076000000015, 0.05878000000000001]\n [0.23840320689257752, 0.6546707171074226, 0.10692607600000004]\n [0.08232760847550455, 0.7452792438137533, 0.17239314771074232]\n [0.02097055068588577, 0.7321083772219967, 0.24692107209211767]\n [0.005617834853790308, 0.6742502553318925, 0.32013190981431733]\n [0.0018300082692097876, 0.6106130563832839, 0.38755693534750657]\n [0.0007125813267409158, 0.5506691776874244, 0.44861824098583497]\n ⋮\n [8.931225220166544e-5, 0.40197066326707453, 0.5979400244807241]\n [5.341134694628574e-5, 0.3618094978456225, 0.6381370908074316]\n [3.408661432839177e-5, 0.32564787279367813, 0.6743180405919939]\n [2.298638088161248e-5, 0.29309418574775714, 0.7068828278713617]\n [1.624920629382846e-5, 0.2637915043475692, 0.7361922464461375]\n [1.196280372112546e-5, 0.23741664031538498, 0.7625713968808944]\n [9.122635052903468e-6, 0.2136778164525147, 0.7863130609124329]\n [7.173330314505884e-6, 0.19231198411200165, 0.8076808425576844]\n [5.793812929032488e-6, 0.17308216521818695, 0.8269120409688845]\n\n\n\n[e[1] for e in sim]; # vector of susceptible people\n\n\npl = plot([e[1] for e in sim]; title=\"Evolution of Disease\", xlabel=\"\\$t\\$\", label=\"\\$n_{S,t}\\$\")\n# \"\\$t\\$\" is needed because in \"$t$\" the dollar sign would be interpreted as interpolation command\nplot!(pl, [e[2] for e in sim], label=\"\\$n_{I,t}\\$\")\nplot!(pl, [e[3] for e in sim], label=\"\\$n_{R,t}\\$\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns0 = [0.99, 0.01, 0.0]\nsim1 = simulate(s0;)\npl = plot([e[1] for e in sim1]; title=\"Evolution of Disease\", xlabel=\"\\$t\\$\", label=\"\\$n_{S,t}\\$\")\n# \"\\$t\\$\" is needed because in \"$t$\" the dollar sign would be interpreted as interpolation command\nplot!(pl, [e[2] for e in sim1], label=\"\\$n_{I,t}\\$\")\nplot!(pl, [e[3] for e in sim1], label=\"\\$n_{R,t}\\$\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe now assume a Susceptible person who meets an infected one has a probability \\(\\mu\\) of catching the disease. Update the transition function \\(f\\) and write a function simulate of \\(\\mu\\), \\(\\pi\\) which returns the simulation. Compare different values of the parameters. How would you interpret “social distancing”? How would you choose parameters \\(\\Pi\\) and \\(\\mu\\)\n\n\"Compute new state from old state `s`\"\nfunction f(s::Vector{Float64}; π=0.1, μ=1.0)::Vector{Float64}\n    \n    # comments\n    n_S, n_I, n_R = s\n    # equivalent to \n    # n_S = s[1]\n    # n_I = s[2]\n    # n_R = s[3]\n\n    N_S = n_S - n_S*n_I*μ\n    N_I = n_S*n_I*μ + n_I*(1-π)\n    N_R = n_I*π + n_R\n\n    return [N_S, N_I, N_R]\n\nend\n\nf\n\n\n\nfunction simulate(s0; π=0.1, T=20, μ=1.0)\n\n    simul = [s0]\n\n    for i ∈ 1:T  # \\in you can also use `in` or `=`\n        s = simul[end]\n        s1 = f(s; π=π, μ=μ)\n        push!(simul, s1)\n    end\n\n    return simul\n\nend\n\nsimulate (generic function with 1 method)\n\n\n\ns0 = [0.99, 0.01, 0.0]\nsim0 = simulate(s0;)\npl0 = plot([e[1] for e in sim0]; title=\"Evolution with \\$\\\\mu=1.0\\$\", xlabel=\"\\$t\\$\", label=\"\\$n_{S,t}\\$\")\n# \"\\$t\\$\" is needed because in \"$t$\" the dollar sign would be interpreted as interpolation command\nplot!(pl0, [e[2] for e in sim0], label=\"\\$n_{I,t}\\$\")\nplot!(pl0, [e[3] for e in sim0], label=\"\\$n_{R,t}\\$\")\n\ns0 = [0.99, 0.01, 0.0]\nsim1 = simulate(s0; μ=0.5)\npl1 = plot([e[1] for e in sim1]; title=\"Evolution  \\$\\\\mu=0.5\\$\", xlabel=\"\\$t\\$\", label=\"\\$n_{S,t}\\$\")\n# \"\\$t\\$\" is needed because in \"$t$\" the dollar sign would be interpreted as interpolation command\nplot!(pl1, [e[2] for e in sim1], label=\"\\$n_{I,t}\\$\")\nplot!(pl1, [e[3] for e in sim1], label=\"\\$n_{R,t}\\$\")\n\nplot(pl0, pl1)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA Spatial SIR model\nWe now consider another version of the model where agents evolve in the space \\(\\mathcal{S}=[0,1]\\times[0,1]\\). There are \\(N\\in\\mathbb{N}\\) agent. At any date, each agent \\(n \\in [0,1]\\) is located at \\((x_n,y_n)\\in \\mathcal{S}\\).\nEach agent moves follows a random walk bounded by \\(\\mathcal{S}\\): \\[x_t = \\min(\\max( x_{t-1} + \\epsilon_t, 0), 1)\\] \\[y_t = \\min(\\max( y_{t-1} + \\eta_t, 0), 1)\\] where \\(\\epsilon_t\\) and \\(\\eta_t\\) are both normally distributed with standard deviation \\(\\sigma\\).\nAt any date, the individual state of an agent is \\(s_t=(x_t, y_t, h_t)\\) where \\(h_t\\) is either “S”, “I” or “R”. \\(v_t\\) denotes the states of all agents (for instance \\(v_t=(s_{n,t})_n\\). The health status of each agent is updated in the following way:\n\nAgents \\(R\\) stay \\(R\\).\nAgents \\(I\\) have probability \\(\\pi\\) to become \\(R\\). They stay \\(I\\) otherwise.\nAn agent of type \\(S\\) in position \\((x,y)\\) has a probability \\(prob(x,y,S)\\) to be infected that is \\(\\mu\\) if there is another infected agent within a radius \\(r&gt;0\\).\n\nDefine a type Agent, which holds the type of an agent. The state of the whole system will be held in a Vector[Agent] type.\nWrite a function spatial_transition(S::Vector{Agent})::Vector{Agent} to compute the transition of the positions. Write another function random_guess(T=100) which simulates for \\(T\\) periods in order to find a good initial guess.\nWrite a function show_population to plot all agents with different colors for different health status.\nWrite a function evolve(S::Vector[Agent])::Vector[Agent] which takes the population in a given state and returns the same population with updated health status.\nWrite a function simulate(S0::Vector[Agent], k=1) to simulate the economy starting from an initially random position with k infected individuals. The returned object should be of type Vector[Vector[Agent]].\nCompute statistics along a simulated path for \\(n_I\\), \\(n_S\\), \\(n_R\\). Plot and compare with the basic SIR model\n\n\nAdditional questions\nHave fun by trying to answer one of these questions:\n\nchange probability of infection so that it depends on the number of infected people in the vincinity (with some suitable functional formulation for)\ncompute an animation of the transition\ncompute an interactive visualisation (with Interact.jl if available)"
  },
  {
    "objectID": "pushups/1_epidemiology.html",
    "href": "pushups/1_epidemiology.html",
    "title": "Epidemiology Models",
    "section": "",
    "text": "H.W. Heathcote: epidemiologic models are deterministic models for infectious diseases which are spread by direct person-to-person contact in a population.\nThis kind of models has been used since by a few decades by economist, for matters that have nothing to do with health.\n\ndiffusion of information, or opinions on social medias\nasset prices and fads\nexpectation formation for macroeconomic outcomes (ex: The Epidemiology of Macroeconomic Expectations by Chris Carroll)\n\nEpidemiologic models have two features that depart from standard economic models:\n\nAgent’s behaviour does not take the full system into account, an is irrational in the sense that it isn’t forward looking. Instead, an agent is given a behavioural heuristic.\nThe transitions of the whole system can be determined without solving for complex interactions first.\n\nUnderstanding why these two assumptions are very costly for economists will keep us busy during a big part of the course. Here we just consider two simple models as small programming exercises.\n\nSimple SIR model\nThere is a continuum of agents of mass \\(1\\). Each agent can be either “Susceptible” (S), “Infected” (I) or “Recovered” (R). In each period, one agent meets another agent drawn randomly. During a meeting Susceptible agents who meet an infected agent, will always catch the disease (or the fad) but are not contagious. Infected agents, have a probability \\(\\pi\\) of being recovered. Nothing happens to Recovered agents who meet other people. No distinction is made between recovering as a healthy or a dead person.\nWe’re interested in the evolution in the number infected persons, both the speed of infection and the total amount of infected people in every period.\nWrite down the transition equations for \\(n_I\\), the number of infected people, for \\(n_R\\) the number of recovered people and \\(n_S\\) the number of susceptible people.\nCompute the transition function f for the vector state \\(s_t\\) returning \\(s_{t+1}\\).\nCompute the transitions over \\(T\\) periods. Plot the result using Plots.jl. (bonus: check against closed form solution)\nWe now assume a Susceptible person who meets an infected one has a probability \\(\\mu\\) of catching the disease. Update the transition function \\(f\\) and write a function simulate of \\(\\mu\\), \\(\\pi\\) which returns the simulation. Compare different values of the parameters. How would you interpret “social distancing”? How would you choose parameters \\(\\Pi\\) and \\(\\mu\\)\n\n\nA Spatial SIR model\nWe now consider another version of the model where agents evolve in the space \\(\\mathcal{S}=[0,1]\\times[0,1]\\). There are \\(N\\in\\mathbb{N}\\) agent. At any date, each agent \\(n \\in [0,1]\\) is located at \\((x_n,y_n)\\in \\mathcal{S}\\).\nEach agent moves follows a random walk bounded by \\(\\mathcal{S}\\): \\[x_t = \\min(\\max( x_{t-1} + \\epsilon_t, 0), 1)\\] \\[y_t = \\min(\\max( y_{t-1} + \\eta_t, 0), 1)\\] where \\(\\epsilon_t\\) and \\(\\eta_t\\) are both normally distributed with standard deviation \\(\\sigma\\).\nAt any date, the individual state of an agent is \\(s_t=(x_t, y_t, h_t)\\) where \\(h_t\\) is either “S”, “I” or “R”. \\(v_t\\) denotes the states of all agents (for instance \\(v_t=(s_{n,t})_n\\). The health status of each agent is updated in the following way:\n\nAgents \\(R\\) stay \\(R\\).\nAgents \\(I\\) have probability \\(\\pi\\) to become \\(R\\). They stay \\(I\\) otherwise.\nAn agent of type \\(S\\) in position \\((x,y)\\) has a probability \\(prob(x,y,S)\\) to be infected that is \\(\\mu\\) if there is another infected agent within a radius \\(r&gt;0\\).\n\nDefine a type Agent, which holds the type of an agent. The state of the whole system will be held in a Vector[Agent] type.\nWrite a function spatial_transition(S::Vector{Agent})::Vector{Agent} to compute the transition of the positions. Write another function random_guess(T=100) which simulates for \\(T\\) periods in order to find a good initial guess.\nWrite a function show_population to plot all agents with different colors for different health status.\nWrite a function evolve(S::Vector[Agent])::Vector[Agent] which takes the population in a given state and returns the same population with updated health status.\nWrite a function simulate(S0::Vector[Agent], k=1) to simulate the economy starting from an initially random position with k infected individuals. The returned object should be of type Vector[Vector[Agent]].\nCompute statistics along a simulated path for \\(n_I\\), \\(n_S\\), \\(n_R\\). Plot and compare with the basic SIR model\n\n\nAdditional questions\nHave fun by trying to answer one of these questions:\n\nchange probability of infection so that it depends on the number of infected people in the vincinity (with some suitable functional formulation for)\ncompute an animation of the transition\ncompute an interactive visualisation (with Interact.jl if available)",
    "crumbs": [
      "Pushups",
      "Epidemiology Models"
    ]
  },
  {
    "objectID": "tutorials/2_solow_correction.html",
    "href": "tutorials/2_solow_correction.html",
    "title": "Convergence: Solow Model",
    "section": "",
    "text": "Convergence: Solow Model\n\nSolow Model\nA representative agent uses capital \\(k_t\\) to produce \\(y_t\\) using the following production function:\n\\[y_t = k_t^{\\alpha}\\]\nHe chooses to consume an amount \\(c_t \\in ]0, y_t]\\) and invests what remains:\n\\[i_t = y_t - c_t\\]\nHe accumulates capital \\(k_t\\) according to:\n\\[k_{t+1} = \\left( 1-\\delta \\right) k_{t} + i_{t}\\]\nwhere \\(\\delta\\) is the depreciation rate and \\(i_t\\) is the amount invested.\nThe goal of the representative agent is to maximize:\n\\[\\sum_{t\\geq 0} \\beta^t U(c_t)\\]\nwhere \\(U(x)=\\frac{x^{1-\\gamma}}{1-\\gamma}\\) and \\(\\beta&lt;1\\) is the discount factor.\nFor now, we ignore the objective and assume that the saving rate \\(s=\\frac{c_t}{y_t}\\) is constant over time.\nCreate a NamedTuple to hold parameter values \\(\\beta=0.96\\), \\(\\delta=0.1\\), \\(\\alpha=0.3\\), \\(\\gamma=4\\).\n\np = (;β=0.96, δ=0.1, α=0.3, γ=4.0)\n\n(β = 0.96, δ = 0.1, α = 0.3, γ = 4.0)\n\n\nWrite down the formula of function \\(f\\) such that \\(k_{t+1}\\): \\(k_{t+1} = f(k_t)\\).\n\\[k_{t+1}= (1-\\delta) k_t + (1-s) k_t^{\\alpha}\\]\nDefine a function f(k::Float64, p::NamedTuple)::Float64 to represent \\(f\\) for a given calibration\n\n# function f(k::Float64, p::NamedTuple)\n\n# we added a keyword argument to specify the saving rate\nfunction f(k, p; s=0.2)\n\n    (;α, δ) = p # keyword unpacking syntax\n\n    val = k*(1-δ) + s*k^α\n\n    return val \nend\n\nf (generic function with 2 methods)\n\n\n\nf(0.1, p)\n\n0.1902374467254545\n\n\nWrite a function simulate(k0::Float64, T::Int, p::NamedTuple)::Vector{Float64} to compute the simulation over T periods starting from initial capital level k0.\n\nfunction simulate(k0, T, p; s=0.5)\n\n    sim = [k0]\n\n    for i ∈ 1:T    # same as for i in ... or for i=...\n        # in Julia, intervals contain the lower and upper bound\n        k1 = f(k0, p; s=s)\n\n        # add new value to simulation vector\n        push!(sim, k1)\n\n        k0 = k1\n    end\n\n    return sim\nend\n\nsimulate (generic function with 1 method)\n\n\n\nsim = simulate(0.5, 100, p;)\n\n101-element Vector{Float64}:\n 0.2\n 0.30340677254400195\n 0.4129080792968781\n 0.525003373019628\n 0.6373491155565568\n 0.7483344417178636\n 0.856841626057419\n 0.9620988898971137\n 1.0635841029776287\n 1.1609587708409257\n ⋮\n 2.6876186883735818\n 2.6879113388853018\n 2.6881835130861362\n 2.6884366430712516\n 2.6886720608576273\n 2.688891005366757\n 2.689094628921639\n 2.6892840032916374\n 2.6894601253165105\n\n\n\n# sometimes, we want to avoid using too much memory\n# in that case we try to do as many inplace operations as possible\n\nfunction simulate_preallocate(k, T, p; s=0.2)\n    v = zeros(T) # allocates memore\n    v[1] = k\n    for t = 1:(T-1)\n        k0 = v[t]\n        v[t+1] = f(k0, p; s=s)\n    end\n    return v\nend\n\nsimulate_preallocate (generic function with 1 method)\n\n\n\n@time simulate(0.2, 1000000, p);\n@time simulate_preallocate(0.2, 1000000, p);\n\n  0.067737 seconds (14 allocations: 9.781 MiB)\n  0.055613 seconds (2 allocations: 7.629 MiB)\n\n\nMake a nice plot to illustrate the convergence. Do we get convergence from any initial level of capital?\n\npl= plot(simulate(0.5, 100, p;); label=\"baseline\", title=\"Convergence of Solow Model\")\nplot!(pl, simulate(6.0, 100, p;); label=\"high initial capital\")\nplot!(pl, simulate(0.5, 100, p;s=0.2); label=\"lower saving rate\")\n\nSuppose you were interested in using f to compute the steady-state. What would you propose to measure convergence speed? To speed-up convergence? Implement these ideas.\n\nfunction steady_state(p; s=0.2)\n    sim = simulate(0.1, 1000, p)\n    return sim[end]\nend\n\nsteady_state (generic function with 1 method)\n\n\n\nsteady_state(p)\n\n2.691800385264708"
  },
  {
    "objectID": "tutorials/3_Optimization.html",
    "href": "tutorials/3_Optimization.html",
    "title": "Optimization",
    "section": "",
    "text": "In this tutorial you will learn to code and use common optimization algorithms for static models.",
    "crumbs": [
      "Tutorials",
      "Optimization"
    ]
  },
  {
    "objectID": "tutorials/3_Optimization.html#profit-optimization-by-a-monopolist",
    "href": "tutorials/3_Optimization.html#profit-optimization-by-a-monopolist",
    "title": "Optimization",
    "section": "Profit optimization by a monopolist",
    "text": "Profit optimization by a monopolist\nA monopolist produces quantity \\(q\\) of goods X at price \\(p\\). Its cost function is \\(c(q) = 0.5 + q (1-qe^{-q})\\)\nThe consumer’s demand for price \\(p\\) is \\(x(p)=2 e^{-0.5 p}\\) (constant elasticity of demand to price).\nWrite down the profit function of the monopolist and find the optimal production (if any). Don’t use any library except for plotting.\n\nusing Plots\n\n\nc(q) = 0.5 + q*(1-(q*exp(-q)))\n# c(q) = 0.5 + q*(1-q*exp(-q))\n# x(p) = 2*exp(-0.5*p)\np(q) = - 2*log(q/2)\nπ(q) = q*p(q) - c(q)\n\nπ (generic function with 1 method)\n\n\n\np(0.001)\n\n15.201804919084164\n\n\n\nc(0.001)\n\n0.5009990009995001\n\n\n\nπ(1)\n\n0.2541738022913329\n\n\n\nqvec = range(0.001, 2; length=20)\n\n0.001:0.10521052631578948:2.0\n\n\n\nqvec = 0.001: 0.001:2\n\n0.001:0.001:2.0\n\n\n\nπvec = [π(q) for q in qvec];\n\n\nπvec = π.(qvec) # vectorized call\n\n2000-element Vector{Float64}:\n -0.48579719608041594\n -0.47436498687607676\n -0.4639772859342966\n -0.454267199084793\n -0.44506047921694036\n -0.4362544994695257\n -0.4277814494554815\n -0.4195931352716545\n -0.4116535238496139\n -0.4039346476856644\n  ⋮\n -1.934699594360955\n -1.9376900425891457\n -1.9406817668948997\n -1.9436747665042937\n -1.946669040643902\n -1.9496645885408042\n -1.9526614094225765\n -1.9556595025172987\n -1.9586588670535492\n\n\n\nplot(qvec, πvec)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Pkg; Pkg.add(\"ForwardDiff\")\n\n    Updating registry at `~/.julia/registries/General.toml`\n   Resolving package versions...\n   Installed GR_jll ────────────── v0.73.5+0\n   Installed Libmount_jll ──────── v2.40.1+0\n   Installed Cairo_jll ─────────── v1.18.0+2\n   Installed JpegTurbo_jll ─────── v3.0.3+0\n   Installed Xorg_libSM_jll ────── v1.2.4+0\n   Installed Unitful ───────────── v1.19.1\n   Installed Fontconfig_jll ────── v2.13.96+0\n   Installed PtrArrays ─────────── v1.1.0\n   Installed Libgpg_error_jll ──── v1.49.0+0\n   Installed LZO_jll ───────────── v2.10.2+0\n   Installed FriBidi_jll ───────── v1.0.14+0\n   Installed Xorg_libXext_jll ──── v1.3.6+0\n   Installed Colors ────────────── v0.12.11\n   Installed TimeZones ─────────── v1.15.0\n   Installed Libuuid_jll ───────── v2.40.1+0\n   Installed Xorg_libXrender_jll ─ v0.9.11+0\n   Installed Pixman_jll ────────── v0.43.4+0\n   Installed AliasTables ───────── v1.1.3\n   Installed Xorg_libICE_jll ───── v1.1.1+0\n   Installed Latexify ──────────── v0.16.3\n   Installed Mocking ───────────── v0.7.8\n   Installed LAME_jll ──────────── v3.100.2+0\n   Installed Glib_jll ──────────── v2.80.2+0\n   Installed FixedPointNumbers ─── v0.8.5\n   Installed TZJData ───────────── v1.2.0+2024a\n   Installed Libgcrypt_jll ─────── v1.8.11+0\n   Installed ColorSchemes ──────── v3.25.0\n   Installed GR ────────────────── v0.73.5\n  No Changes to `~/.julia/environments/v1.10/Project.toml`\n    Updating `~/.julia/environments/v1.10/Manifest.toml`\n  [66dad0bd] + AliasTables v1.1.3\n  [35d6a980] ↑ ColorSchemes v3.24.0 ⇒ v3.25.0\n  [3da002f7] ↑ ColorTypes v0.11.4 ⇒ v0.11.5\n  [5ae59095] ↑ Colors v0.12.10 ⇒ v0.12.11\n  [864edb3b] ↑ DataStructures v0.18.18 ⇒ v0.18.20\n  [31c24e10] ↑ Distributions v0.25.107 ⇒ v0.25.108\n  [1a297f60] ↑ FillArrays v1.10.0 ⇒ v1.11.0\n  [53c48c17] ↑ FixedPointNumbers v0.8.4 ⇒ v0.8.5\n  [28b8d3ca] ↑ GR v0.73.3 ⇒ v0.73.5\n  [3587e190] ↑ InverseFunctions v0.1.13 ⇒ v0.1.14\n  [23fbe1c1] ↑ Latexify v0.16.2 ⇒ v0.16.3\n  [78c3b35d] ↑ Mocking v0.7.7 ⇒ v0.7.8\n  [43287f4e] + PtrArrays v1.1.0\n  [276daf66] ↑ SpecialFunctions v2.3.1 ⇒ v2.4.0\n  [dc5dba14] ↑ TZJData v1.1.0+2023d ⇒ v1.2.0+2024a\n  [f269a46b] ↑ TimeZones v1.14.0 ⇒ v1.15.0\n  [1986cc42] ↑ Unitful v1.19.0 ⇒ v1.19.1\n  [83423d85] ↑ Cairo_jll v1.18.0+1 ⇒ v1.18.0+2\n  [2e619515] ↑ Expat_jll v2.5.0+0 ⇒ v2.6.2+0\n  [a3f928ae] ↑ Fontconfig_jll v2.13.93+0 ⇒ v2.13.96+0\n  [559328eb] ↑ FriBidi_jll v1.0.10+0 ⇒ v1.0.14+0\n  [d2c73de3] ↑ GR_jll v0.73.3+0 ⇒ v0.73.5+0\n  [7746bdde] ↑ Glib_jll v2.80.0+0 ⇒ v2.80.2+0\n  [aacddb02] ↑ JpegTurbo_jll v3.0.2+0 ⇒ v3.0.3+0\n  [c1c5ebd0] ↑ LAME_jll v3.100.1+0 ⇒ v3.100.2+0\n  [dd4b983a] ↑ LZO_jll v2.10.1+0 ⇒ v2.10.2+0\n  [d4300ac3] ↑ Libgcrypt_jll v1.8.7+0 ⇒ v1.8.11+0\n  [7add5ba3] ↑ Libgpg_error_jll v1.42.0+0 ⇒ v1.49.0+0\n  [4b2f31a3] ↑ Libmount_jll v2.39.3+0 ⇒ v2.40.1+0\n  [38a345b3] ↑ Libuuid_jll v2.39.3+1 ⇒ v2.40.1+0\n  [30392449] ↑ Pixman_jll v0.42.2+0 ⇒ v0.43.4+0\n  [f67eecfb] ↑ Xorg_libICE_jll v1.0.10+1 ⇒ v1.1.1+0\n  [c834827a] ↑ Xorg_libSM_jll v1.2.3+0 ⇒ v1.2.4+0\n  [1082639a] ↑ Xorg_libXext_jll v1.3.4+4 ⇒ v1.3.6+0\n  [ea2f1a96] ↑ Xorg_libXrender_jll v0.9.10+4 ⇒ v0.9.11+0\n  [4af54fe1] - LazyArtifacts\nPrecompiling project...\n  ✓ TZJData\n  ✓ Libuuid_jll\n  ✓ Libmount_jll\n  ✓ JpegTurbo_jll\n  ✓ PtrArrays\n  ✓ Libgpg_error_jll\n  ✓ Xorg_libICE_jll\n  ✓ FriBidi_jll\n  ✓ LAME_jll\n  ✓ Pixman_jll\n  ✓ LZO_jll\n  ✓ Mocking\n  ✓ AliasTables\n  ✓ Glib_jll\n  ✓ Libgcrypt_jll\n  ✓ Xorg_libSM_jll\n  ✓ Fontconfig_jll\n  ✓ SpecialFunctions → SpecialFunctionsChainRulesCoreExt\n  ✓ FixedPointNumbers\n  ✓ DataStructures\n  ✓ Latexify\n  ✓ StatsFuns → StatsFunsChainRulesCoreExt\n  ✓ Xorg_libXrender_jll\n  ✓ Xorg_libXext_jll\n  ✓ Cairo_jll\n  ✓ TimeZones\n  ✓ TimeZones → TimeZonesRecipesBaseExt\n  ✓ ColorVectorSpace → SpecialFunctionsExt\n  ✓ Colors\n  ✓ Distributions\n  ✓ ColorSchemes\n  ✓ Distributions → DistributionsTestExt\n  ✓ Distributions → DistributionsChainRulesCoreExt\n  ✓ Unitful\n  ✓ Unitful → InverseFunctionsUnitfulExt\n  ✓ Unitful → ConstructionBaseUnitfulExt\n  ✓ Accessors → AccessorsUnitfulExt\n  ✓ GR_jll\n  ✓ Roots\n  ✓ GR\n  ✓ Roots → RootsForwardDiffExt\n  ✓ HypothesisTests\n  ? HPFilter\n  ✓ Latexify → DataFramesExt\nDBnomics Waiting for background task / IO / timer.\n[pid 15256] waiting for IO to finish:\n Handle type        uv_handle_t-&gt;data\n fs_event           0x14daa40-&gt;0x7220851845e0\n timer              0x145c5f0-&gt;0x722085184610\nThis means that a package has started a background task or event source that has not finished running. For precompilation to complete successfully, the event source needs to be closed explicitly. See the developer documentation on fixing precompilation hangs for more help.\n  ✓ UnitfulLatexify\n  ✓ DBnomics\n  ✓ Plots → UnitfulExt\n  46 dependencies successfully precompiled in 104 seconds. 163 already precompiled.\n  22 dependencies precompiled but different versions are currently loaded. Restart julia to access the new versions\n  1 dependency failed but may be precompilable after restarting julia\n  2 dependencies had output during precompilation:\n┌ HPFilter\n│  WARNING: Method definition HP(Array{T, 1} where T, Int64) in module HPFilter at /home/pablo/.julia/packages/HPFilter/981TT/src/HPFilterFunc.jl:8 overwritten at /home/pablo/.julia/packages/HPFilter/981TT/src/HPFilterFunc.jl:26.\n│  ERROR: Method overwriting is not permitted during Module precompilation. Use `__precompile__(false)` to opt-out of precompilation.\n└  \n┌ DBnomics\n│  Visit &lt;https://db.nomics.world&gt;.\n│  \n│  [pid 15256] waiting for IO to finish:\n│   Handle type        uv_handle_t-&gt;data\n│   fs_event           0x14daa40-&gt;0x7220851845e0\n│   timer              0x145c5f0-&gt;0x722085184610\n│  This means that a package has started a background task or event source that has not finished running. For precompilation to complete successfully, the event source needs to be closed explicitly. See the developer documentation on fixing precompilation hangs for more help.\n└  \n\n\n\nc(q) = 0.5 + q*(1-(q*exp(-q)))\np(q) = - 2*log(q/2)\nπ(q) = q*p(q) - c(q)\nusing ForwardDiff\nπ1(q) = ForwardDiff.derivative(π, q)\nπ2(q) = ForwardDiff.derivative(π1, q )\n\nπ2 (generic function with 1 method)\n\n\n\nprofit(q) = (π(q), π1(q), π2(q))\n\nprofit (generic function with 1 method)\n\n\n\n# function π(q, order)\n#     if order == 2\n#         return (π(q),π1(q),π2(q))\n#     elseif order==0\n#         return π(q)\n#     end\n# end \n# π(0.1, 0)\n\n\nπ (generic function with 2 methods)\n\n\n\n# IMplement Newton Raphson\n\n\nq0 = 0.5 # initial guess\n\n\n\"\"\"\nNewton Raphson algorithm\n- fun: a function returning a 3-elements tuple, with 0,1,2-order derivatives\n- x0: initial guess\n- maxit: maximum number of iterations\n- τ_η: convergence criterium for approximation errors\n\"\"\"\nfunction newton_raphson(fun, x0; maxit=100, τ_η=1e-10)\n    η0 = NaN\n    for n ∈ 1:maxit\n        f0, f1, f2 = fun(x0)\n        # newton step\n        x1 = x0 - f1 /f2\n        # successive approximation error\n        η = abs(x1-x0)\n        λ = η/η0\n        η0 = η\n        println(\"Iteration $n: η=$η : λ=$λ\")\n        if η&lt;τ_η\n            return x1\n        end\n        x0 = x1\n    end\nend\n\nnewton_raphson\n\n\n\nnewton_raphson(profit, 0.5)\n\nIteration 1: η=0.05911252674636103 : λ=NaN\nIteration 2: η=0.0027418337531417425 : λ=0.04638329477787938\nIteration 3: η=5.007147801161516e-6 : λ=0.0018262040123417595\nIteration 4: η=1.6580403716659475e-11 : λ=3.3113469733833887e-6\n\n\n0.5618593676638843",
    "crumbs": [
      "Tutorials",
      "Optimization"
    ]
  },
  {
    "objectID": "tutorials/3_Optimization.html#constrained-optimization",
    "href": "tutorials/3_Optimization.html#constrained-optimization",
    "title": "Optimization",
    "section": "Constrained optimization",
    "text": "Constrained optimization\nConsider the function \\(f(x,y) = 1-(x-0.5)^2 -(y-0.3)^2\\).\nUse Optim.jl to minimize \\(f\\) without constraint. Check you understand diagnostic information returned by the optimizer.\nNow, consider the constraint \\(x&lt;0.3\\) and maximize \\(f\\) under this new constraint.\nReformulate the problem as a root finding problem with lagrangians. Write the complementarity conditions.\nSolve using NLSolve.jl",
    "crumbs": [
      "Tutorials",
      "Optimization"
    ]
  },
  {
    "objectID": "tutorials/3_Optimization.html#consumption-optimization",
    "href": "tutorials/3_Optimization.html#consumption-optimization",
    "title": "Optimization",
    "section": "Consumption optimization",
    "text": "Consumption optimization\nA consumer has preferences \\(U(c_1, c_2)\\) over two consumption goods \\(c_1\\) and \\(c_2\\).\nGiven a budget \\(I\\), consumer wants to maximize utility subject to the budget constraint \\(p_1 c_1 + p_2 c_2 \\leq I\\).\nWe choose a Stone-Geary specification where\n\\(U(c_1, c_2)=\\beta_1 \\log(c_1-\\gamma_1) + \\beta_2 \\log(c_2-\\gamma_2)\\)\nWrite the Karush-Kuhn-Tucker necessary conditions for the problem.\nVerify the KKT conditions are sufficient for optimality.\nDerive analytically the demand functions, and the shadow price.\nInterpret this problem as a complementarity problem and solve it using NLSolve.\nProduce some nice graphs with isoutility curves, the budget constraint and the optimal choice.",
    "crumbs": [
      "Tutorials",
      "Optimization"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computational Economics - ECO309",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\n\n\n\n\nMar 28, 2024\n\n\nIntroduction\n\n\n\n\nApr 4, 2024\n\n\nConvergence of Sequences\n\n\n\n\nApr 25, 2024\n\n\nOptimization\n\n\n\n\nJun 6, 2024\n\n\nDifferentiation\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#indicative-schedule",
    "href": "index.html#indicative-schedule",
    "title": "Computational Economics - ECO309",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\n\n\n\n\nMar 28, 2024\n\n\nIntroduction\n\n\n\n\nApr 4, 2024\n\n\nConvergence of Sequences\n\n\n\n\nApr 25, 2024\n\n\nOptimization\n\n\n\n\nJun 6, 2024\n\n\nDifferentiation\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#communication",
    "href": "index.html#communication",
    "title": "Computational Economics - ECO309",
    "section": "Communication",
    "text": "Communication\n\nZulip (best)\nEmail to pablo.winant@polytechniqe.edu or pwinant@escp.eu\n\nsubject starting with [eco309]\n\nGithub issues (PR also welcome)"
  },
  {
    "objectID": "index.html#assessment",
    "href": "index.html#assessment",
    "title": "Computational Economics - ECO309",
    "section": "Assessment",
    "text": "Assessment\n\ntutorials (optional)\ncoursework (mandatory)\npresentations (optional)"
  },
  {
    "objectID": "slides/session_2/index.html#life-of-a-computational-economist",
    "href": "slides/session_2/index.html#life-of-a-computational-economist",
    "title": "Convergence of Sequences",
    "section": "Life of a computational economist",
    "text": "Life of a computational economist",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#life-of-a-computational-economist-1",
    "href": "slides/session_2/index.html#life-of-a-computational-economist-1",
    "title": "Convergence of Sequences",
    "section": "Life of a computational economist",
    "text": "Life of a computational economist\nVideo\n\n\nWe spend a lot of time waiting for algorithms to converge!\n\n\nsolution 1: program better\n\nsolution 2: better algorithms\n\neven better: understand convergence properties (information about the model)",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#recursive-sequence",
    "href": "slides/session_2/index.html#recursive-sequence",
    "title": "Convergence of Sequences",
    "section": "Recursive sequence",
    "text": "Recursive sequence\nConsider a function \\(f: R\\rightarrow R\\) and a recursive sequence \\((x_n)\\) defined by \\(x_0\\) and \\(x_n = f(x_{n-1})\\).\nWe want to compute a fixed point of \\(f\\) and study its properties.",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#example-growth-model",
    "href": "slides/session_2/index.html#example-growth-model",
    "title": "Convergence of Sequences",
    "section": "Example: growth model",
    "text": "Example: growth model\n\n\n\nSolow growth model:\n\ncapital accumulation: \\[k_t = (1-\\delta)k_{t-1} + i_{t-1}\\]\nproduction: \\[y_t = k_t^\\alpha\\]\nconsumption: \\[c_t = (1-{\\color{red}s})y_t\\] \\[i_t = s y_t\\]\n\n\n\n\nFor a given value of \\({\\color{red} s}\\in\\mathbb{R}^{+}\\) ( \\({\\color{red} s}\\) is a decision rule) \\[k_{t+1} = f(k_t, {\\color{red} s})\\]\n\nbackward-looking iterations\nSolow hypothesis: saving rate is invariant\n\n\n\nQuestions:\n\nWhat is the steady-state?\nCan we characterize the transition back the steady-state?\nCharacterize the dynamics close to the steady-state?\nwhat is the optimal \\(s\\) ?",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#another-example-linear-new-keynesian-model",
    "href": "slides/session_2/index.html#another-example-linear-new-keynesian-model",
    "title": "Convergence of Sequences",
    "section": "Another example: linear new keynesian model",
    "text": "Another example: linear new keynesian model\n\n\n\nBasic New Keynesian model (full derivation if curious )\n\nnew philips curve (PC):\\[\\pi_t = \\beta \\mathbb{E}_t \\pi_{t+1} + \\kappa y_t\\]\ndynamic investment-saving equation (IS):\\[y_t = \\beta \\mathbb{E}_t y_{t+1} - \\frac{1}{\\sigma}(i_t - \\mathbb{E}_t(\\pi_{t+1}) ) - {\\color{green} z_t}\\]\ninterest rate setting (taylor rule): \\[i_t = \\alpha_{\\pi} \\pi_t + \\alpha_{y} y_t\\]\n\n\nSolving the system:\n\nsolution: \\(\\begin{bmatrix}\\pi_t \\\\\\\\ y_t \\end{bmatrix} = {\\color{red} c} z_t\\)\n\n\n\n\n\nforward looking:\n\ntake \\(\\begin{bmatrix}\\pi_{t+1} \\\\\\\\ y_{t+1} \\end{bmatrix} = {\\color{red} {c_n}} z_{t+1}\\)\ndeduce \\(\\begin{bmatrix}\\pi_{t} \\\\\\\\ y_{t} \\end{bmatrix} = {\\color{red} {c_{n+1}}} z_{t}\\)\n\\(\\mathcal{T}: \\underbrace{c_{n}}_{t+1: \\; \\text{tomorrow}} \\rightarrow \\underbrace{c_{n+1}}_{t: \\text{today}}\\) is the time-iteration operator (a.k.a. Coleman operator)\n\n\n\n\n\n\nQuestions:\n\nWhat is the limit to \\(c_{t+1} = \\mathcal{T} c_n\\) ?\nUnder wich conditions (on \\(\\alpha_{\\pi}, \\alpha_y\\)) is it convergent ?\n\ndeterminacy conditions\ninterpretation: does the central bank manage to control inflation expectations?",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#recursive-series-2",
    "href": "slides/session_2/index.html#recursive-series-2",
    "title": "Convergence of Sequences",
    "section": "Recursive series (2)",
    "text": "Recursive series (2)\n\nWait: does a fixed point exist?\n\nwe’re not very concerned by the existence problem here\nwe’ll be happy with local conditions (existence, uniqueness) around a solution\n\nWe can assume there is an interval such that \\(f([a,b])\\subset[a,b]\\). Then we know there exists \\(x\\) in \\([a,b]\\) such that \\(f(x)=x\\). But there can be many such points.",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#example-growth-model-with-multiple-fixed-points",
    "href": "slides/session_2/index.html#example-growth-model-with-multiple-fixed-points",
    "title": "Convergence of Sequences",
    "section": "Example: growth model with multiple fixed points",
    "text": "Example: growth model with multiple fixed points\n\n\n\nIn the growth model, if we change the production function: \\(y=k^{\\alpha}\\) for a nonconvex/nonmonotonic one, we can get multiple fixed points.",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#convergence",
    "href": "slides/session_2/index.html#convergence",
    "title": "Convergence of Sequences",
    "section": "Convergence",
    "text": "Convergence\n\nHow do we characterize behaviour around \\(x\\) such that \\(f(x)=x\\)?\n\nif \\(|f^{\\prime}(x)|&gt;1\\): series is unstable and will not converge to \\(x\\) except by chance\nif \\(|f^{\\prime}(x)|&lt;1\\): \\(x\\) is a stable fixed point\nif \\(|f^{\\prime}(x)|=1\\): ??? (look at higher order terms, details ↓)",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#section",
    "href": "slides/session_2/index.html#section",
    "title": "Convergence of Sequences",
    "section": "",
    "text": "To get the intution about local convergence assume, you have an initial point \\(x_n\\) close to the steady state and consider the following expresion:\n\\(x_{n+1} - x = f(x_n) - f(x) = f^{\\prime}(x) (x_n-x) + o( (x_n-x) )\\)\nIf one sets aside the error term (which one can do with full mathematical rigour), the dynamics for very small perturbations are given by:\n\\(|x_{n+1} - x| = |f^{\\prime}(x)| |x_n-x|\\)\nWhen \\(|f^{\\prime}(x)|&lt;1\\), the distance to the target decreases at each iteration and we have convergence. When \\(|f^{\\prime}(x)|&gt;1\\) there is local divergence.",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#section-1",
    "href": "slides/session_2/index.html#section-1",
    "title": "Convergence of Sequences",
    "section": "",
    "text": "What about the case \\(|f^{\\prime}(x)=1|\\)? Many cases are possible. To distinguish between them, one needs to inspect higher order derivatives.\n\nwhen \\(|f^{\\prime}(x)=1|\\), \\(|f^{\\prime\\prime}(x)|\\neq 0\\) the series will convergence, only if \\((x_0-x)f^{\\prime\\prime}(x)&lt;0\\), i.e. starting from one side of the fixed point. The steady-state is not stable.\nWhen \\(|f^{\\prime}(x)=1|\\), \\(|f^{\\prime\\prime}(x)| = 0\\), \\(|f^{\\prime \\prime\\prime}(x)|\\neq 0\\) the series will converge, only if \\(f^{\\prime}(x)(f^{\\prime\\prime\\prime}(x))&lt;1\\)\n\nIn general, there is stability only if the function \\(f\\) is crossing the 45 degrees line (when \\(f^ {\\prime}(x)=1)\\), or the -45 degrees line (when \\(f^ {\\prime}(x)=1\\))\nMathematically, this involves, that: - the first non-zero coefficient \\(f^{k}(x)\\) with \\(k&gt;1\\) has odd order (\\(k\\) odd) - it has the right sign\n\n\n[TODO: add graph]",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#change-the-problem",
    "href": "slides/session_2/index.html#change-the-problem",
    "title": "Convergence of Sequences",
    "section": "Change the problem",
    "text": "Change the problem\n\nSometimes, we are interested in tweaking the convergence speed:\n\n\\[x_{n+1} = (1-\\lambda) x_n + \\lambda f(x_n)\\]\n\n\\(\\lambda\\) is the learning rate:\n\n\\(\\lambda&gt;1\\): acceleration\n\\(\\lambda&lt;1\\): dampening\n\nWe can also replace the function by another one \\(g\\) such that \\(g(x)=x\\iff f(x)=x\\), for instance:\n\n\\[g(x)=x-\\frac{f(x)-x}{f^{\\prime}(x)-1}\\]",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#dynamics-around-a-stable-point",
    "href": "slides/session_2/index.html#dynamics-around-a-stable-point",
    "title": "Convergence of Sequences",
    "section": "Dynamics around a stable point",
    "text": "Dynamics around a stable point\n\nWe can write successive approximation errors:\n\n\\[|x_t - x_{t-1}| =  | f(x_{t-1}) - f(x_{t-2})| \\]\n\\[|x_t - x_{t-1}| \\sim |f^{\\prime}(x_{t-1})| |x_{t-1} - x_{t-2}| \\]\n\nRatio of successive approximation errors \\[\\lambda_t =  \\frac{ |x_{t} - x_{t-1}| } { |x_{t-1} - x_{t-2}|}\\]\n\\(\\lambda_t \\rightarrow | f^{\\prime}(\\overline{x}) |\\)",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#dynamics-around-a-stable-point-2",
    "href": "slides/session_2/index.html#dynamics-around-a-stable-point-2",
    "title": "Convergence of Sequences",
    "section": "Dynamics around a stable point (2)",
    "text": "Dynamics around a stable point (2)\nHow do we derive an error bound? Suppose that we have \\(\\overline{\\lambda}&gt;|f^{\\prime}(x_k)|\\) for all \\(k\\geq k_0\\):\n\\[|x_t - x| \\leq |x_t - x_{t+1}| + |x_{t+1} - x_{t+2}| + |x_{t+2} - x_{t+3}| + ... \\]\n\\[|x_t - x| \\leq |x_t - x_{t+1}| + |f(x_{t}) - f(x_{t+1})| + |f(x_{t+1}) - f(x_{t+2})| + ... \\]\n\\[|x_t - x| \\leq |x_t - x_{t+1}| + \\overline{\\lambda} |x_t - x_{t+1}| + \\overline{\\lambda}^2 |x_t - x_{t+1}| + ... \\]\n\\[|x_t - x| \\leq \\frac{1} {1-\\overline{\\lambda}} | x_t - x_{t+1} |\\]",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#how-do-we-improve-convergence",
    "href": "slides/session_2/index.html#how-do-we-improve-convergence",
    "title": "Convergence of Sequences",
    "section": "How do we improve convergence ?",
    "text": "How do we improve convergence ?\n\\[\\frac{|x_{t-1} - x_{t-2}|} {|x_t - x_{t-1}|} \\sim |f^{\\prime}(x_{t-1})|  \\]\ncorresponds to the case of linear convergence (kind of slow).",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#aitkens-extrapolation",
    "href": "slides/session_2/index.html#aitkens-extrapolation",
    "title": "Convergence of Sequences",
    "section": "Aitken’s extrapolation",
    "text": "Aitken’s extrapolation\nWhen convergence is geometric, we have: \\[ \\lim_{x\\rightarrow \\infty}\\frac{ x_{t+1}-x}{x_t-x} = \\lambda \\in \\mathbb{R}^{\\star}\\]\nWhich implies:\n\\[\\frac{ x_{t+1}-x}{x_t-x} \\sim \\frac{ x_{t}-x}{x_{t-1}-x}\\]",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#aitkens-extrapolation-2",
    "href": "slides/session_2/index.html#aitkens-extrapolation-2",
    "title": "Convergence of Sequences",
    "section": "Aitken’s extrapolation (2)",
    "text": "Aitken’s extrapolation (2)\nTake \\(x_{t-1}, x_t\\) and \\(x_{t+1}\\) as given and solve for \\(x\\):\n\\[x = \\frac{x_{t+1}x_{t-1} - x_{t}^2}{x_{t+1}-2x_{t} + x_{t-1}}\\]\nor after some reordering\n\\[x = x_{t-1} - \\frac{(x_t-x_{t-1})^2}{x_{t+1}-2 x_t + x_{t-1}}\\]",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#steffensens-method",
    "href": "slides/session_2/index.html#steffensens-method",
    "title": "Convergence of Sequences",
    "section": "Steffensen’s Method:",
    "text": "Steffensen’s Method:\n\nstart with a guess \\(x_0\\), compute \\(x_1=f(x_0)\\) and \\(x_2=f(x_1)\\)\nuse Aitken’s guess for \\(x^{\\star}\\). If required tolerance is met, stop.\notherwise, set \\(x_0 = x^{\\star}\\) and go back to step 1.\n\nIt can be shown that the sequence generated from Steffensen’s method converges quadratically, that is\n\\(\\lim_{t\\rightarrow\\infty} \\frac{x_{t+1}-x_t}{(x_t-x_{t-1})^2} \\leq M  \\in \\mathbb{R}^{\\star}\\)",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#convergence-speed",
    "href": "slides/session_2/index.html#convergence-speed",
    "title": "Convergence of Sequences",
    "section": "Convergence speed",
    "text": "Convergence speed\nRate of convergence of series \\(x_t\\) towards \\(x^{\\star}\\) is:\n\nlinear: \\[{\\lim}_{t\\rightarrow\\infty} \\frac{|x_{t+1}-x^{\\star}|}{|x_{t}-x^{\\star}|} = \\mu \\in R^+\\]\nsuperlinear: \\[{\\lim}_{t\\rightarrow\\infty} \\frac{|x_{t+1}-x^{\\star}|}{|x_{t}-x^{\\star}|} = 0\\]\nquadratic: \\[{\\lim}_{t\\rightarrow\\infty} \\frac{|x_{t+1}-x^{\\star}|}{|x_{t}-x^{\\star}|^{\\color{red}2}} = \\mu \\in R^+\\]",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#convergence-speed-1",
    "href": "slides/session_2/index.html#convergence-speed-1",
    "title": "Convergence of Sequences",
    "section": "Convergence speed",
    "text": "Convergence speed\nRemark: in the case of linear convergence:\n\\[{\\lim}_{t\\rightarrow\\infty} \\frac{|x_{t+1}-x_t|}{|x_{t}-x_{t-1}|} = \\mu \\in ]0,1[ \\iff {\\lim}_{t\\rightarrow\\infty} \\frac{|x_{t+1}-x^{\\star}|}{|x_{t}-x^{\\star}|}=\\frac{1}{1-\\mu}\\]",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#in-practice",
    "href": "slides/session_2/index.html#in-practice",
    "title": "Convergence of Sequences",
    "section": "In practice",
    "text": "In practice\n\nProblem:\n\nSuppose one is trying to find \\(x\\) solving the model \\(G(x)=0\\)\nAn iterative algorithm provides a function \\(f\\) defining a recursive series \\(x_{t+1}\\).\n\nThe best practice consists in monitoring at the same time:\n\nthe success criterion: \\[\\epsilon_n = |G(x_n)|\\]\n\n\nhave you found the solution?\n\nthe successive approximation errors \\[\\eta_n = |x_{n+1} - x_n|\\]\n\n\nare you making progress?\n\nthe ratio of successive approximation errors \\[\\lambda_n = \\frac{\\eta_n}{\\eta_{n-1}}\\]\n\n\nwhat kind of convergence? (if \\(|\\lambda_n|&lt;1\\): OK, otherwise: ❓)",
    "crumbs": [
      "Slides",
      "Convergence of Sequences"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#introduction-1",
    "href": "slides/session_3/index.html#introduction-1",
    "title": "Optimization",
    "section": "Introduction",
    "text": "Introduction\nOptimization is everywhere in economics:\n\nto model agent’s behaviour: what would a rational agent do?\n\nconsumer maximizes utility from consumption\nfirm maximizes profit\n\nan economist tries to solve a model:\n\nfind prices that clear the market",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#two-kinds-of-optimization-problem",
    "href": "slides/session_3/index.html#two-kinds-of-optimization-problem",
    "title": "Optimization",
    "section": "Two kinds of optimization problem:",
    "text": "Two kinds of optimization problem:\n\nroot finding: \\(\\text{find  $x$ in $X$ such that $f(x)=0$}\\)\nminimization/maximization \\(\\min_{x\\in X} f(x)\\) or \\(\\max_{x\\in X} f(x)\\)\noften a minimization problem can be reformulated as a root-finding problem\n\\[x_0 = {argmin}_{x\\in X} f(x) \\overbrace{\\iff}^{??} f^{\\prime} (x_0) = 0\\]",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#plan",
    "href": "slides/session_3/index.html#plan",
    "title": "Optimization",
    "section": "Plan",
    "text": "Plan\n\ngeneral consideration about optimization problems\none-dimensional root-finding\none-dimensional optimization\nlocal root-finding\nlocal optimization\nconstrained optimization\nconstrained root-finding",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#optimization-tasks-come-in-many-flavours",
    "href": "slides/session_3/index.html#optimization-tasks-come-in-many-flavours",
    "title": "Optimization",
    "section": "Optimization tasks come in many flavours",
    "text": "Optimization tasks come in many flavours\n\ncontinuous versus discrete optimization\nconstrained and unconstrained optimization\nglobal and local\nstochastic and deterministic optimization\nconvexity",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#continuous-versus-discrete-optimization",
    "href": "slides/session_3/index.html#continuous-versus-discrete-optimization",
    "title": "Optimization",
    "section": "Continuous versus discrete optimization",
    "text": "Continuous versus discrete optimization\n\nChoice is picked from a given set (\\(x\\in X\\)) which can be:\n\ncontinuous: choose amount of debt \\(b_t \\in [0,\\overline{b}]\\), of capital \\(k_t \\in R^{+}\\)\ndiscrete: choose whether to repay or default \\(\\delta\\in{0,1}\\), how many machines to buy (\\(\\in N\\)), at which age to retire…\na combination of both: mixed integer programming",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#continuous-versus-discrete-optimization-2",
    "href": "slides/session_3/index.html#continuous-versus-discrete-optimization-2",
    "title": "Optimization",
    "section": "Continuous versus discrete optimization (2)",
    "text": "Continuous versus discrete optimization (2)\n\nDiscrete optimization requires a lot of combinatorial thinking\n\nWe don’t cover it today.\n…if needed, we just test all choices until we find the best one\n\nSometimes a discrete choice can be approximated by a mixed strategy (i.e. a random strategy).\n\nInstead of \\(\\delta\\in{0,1}\\) we choose \\(x\\) in \\(prob(\\delta=1)=\\sigma(x)\\)\nwith \\(\\sigma(x)=\\frac{2}{1+\\exp(-x)}\\)",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#constrained-and-unconstrained-optimization",
    "href": "slides/session_3/index.html#constrained-and-unconstrained-optimization",
    "title": "Optimization",
    "section": "Constrained and Unconstrained optimization",
    "text": "Constrained and Unconstrained optimization\n\nUnconstrained optimization: \\(x\\in R\\)\nConstrained optimization: \\(x\\in X\\)\n\nbudget set: \\(p_1 c_1 + p_2 c_2 \\leq I\\)\npositivity of consumption: \\(c \\geq 0\\).\n\nIn good cases, the optimization set is convex…\n\npretty much always in this course",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#stochastic-vs-deterministic",
    "href": "slides/session_3/index.html#stochastic-vs-deterministic",
    "title": "Optimization",
    "section": "Stochastic vs Deterministic",
    "text": "Stochastic vs Deterministic\n\nCommon case, especially in machine learning \\[f(x) = E_{\\epsilon}[ \\xi (\\epsilon, x)]\\]\nOne wants to maximize (resp solve) w.r.t. \\(x\\) but it is costly to compute expectation precisely using Monte-Carlo draws (there are other methods).\nA stochastic optimization method allows to use noisy estimates of the expectation, and will still converge in expectation.\nFor now we focus on deterministic methods. Maybe later…",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#local-vs-global-algorithms",
    "href": "slides/session_3/index.html#local-vs-global-algorithms",
    "title": "Optimization",
    "section": "Local vs global Algorithms",
    "text": "Local vs global Algorithms\n\nIn principle, there can be many roots (resp maxima) within the optimization set.\nAlgorithms that find them all are called “global”. For instance:\n\ngrid search\nsimulated annealing\n\nWe will deal only with local algorithms, and consider local convergence properties.\n\n-&gt;then it might work or not\nto perform global optimization just restart from different points.",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#math-vs-practice",
    "href": "slides/session_3/index.html#math-vs-practice",
    "title": "Optimization",
    "section": "Math vs practice",
    "text": "Math vs practice\n\nThe full mathematical treatment will typically assume that \\(f\\) is smooth (\\(\\mathcal{C}_1\\) or \\(\\mathcal{C}_2\\) depending on the algorithm).\nIn practice we often don’t know about these properties\n\nwe still try and check thqt we have a local optimal\n\nSo: fingers crossed",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#math-vs-practice-1",
    "href": "slides/session_3/index.html#math-vs-practice-1",
    "title": "Optimization",
    "section": "Math vs practice",
    "text": "Math vs practice\nHere is the surface representing the objective that a deep neural network training algorithm tries to minimize.\n\nAnd yet, neural networks do great things!",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#what-do-you-need-to-know",
    "href": "slides/session_3/index.html#what-do-you-need-to-know",
    "title": "Optimization",
    "section": "What do you need to know?",
    "text": "What do you need to know?\n\nbe able to handcode simple algos (Newton, Gradient Descent)\nunderstand the general principle of the various algorithms to compare them in terms of\n\nrobustness\nefficiency\naccuracy\n\nthen you can just switch the various options, when you use a library…",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#bisection",
    "href": "slides/session_3/index.html#bisection",
    "title": "Optimization",
    "section": "Bisection",
    "text": "Bisection\n\nFind \\(x \\in [a,b]\\) such that \\(f(x) = 0\\). Assume \\(f(a)f(b) &lt;0\\).\nAlgorithm\n\nStart with \\(a_n, b_n\\). Set \\(c_n=(a_n+b_n)/2\\)\nCompute \\(f(c_n)\\)\n\n\nif \\(f(c_n)f(a_n)&lt;0\\) then set \\((a_{n+1},b_{n+1})=(a_n,c_n)\\)\nelse set \\((a_{n+1},b_{n+1})=(c_n,b_n)\\)\n\n\nIf \\(|f(c_n)|&lt;\\epsilon\\) and/or \\(\\frac{b-a}{2^n}&lt;\\delta\\) stop. Otherwise go back to 1.",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#bisection-2",
    "href": "slides/session_3/index.html#bisection-2",
    "title": "Optimization",
    "section": "Bisection (2)",
    "text": "Bisection (2)\n\nNo need for initial guess: globally convergent algorithm\n\nnot a global algorithm…\n… in the sense that it doesn’t find all solutions\n\n\\(\\delta\\) is a guaranteed accuracy on \\(x\\)\n\\(\\epsilon\\) is a measure of how good the solution is\nthink about your tradeoff: (\\(\\delta\\) or \\(\\epsilon\\) ?)",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#newton-algorithm",
    "href": "slides/session_3/index.html#newton-algorithm",
    "title": "Optimization",
    "section": "Newton algorithm",
    "text": "Newton algorithm\n\nFind \\(x\\) such that \\(f(x) = 0\\). Use \\(x_0\\) as initial guess.\n\\(f\\) must be \\(\\mathcal{C_1}\\) and we assume we can compute its derivative \\(f^{\\prime}\\)\nGeneral idea:\n\nobserve that the zero \\(x^{\\star}\\) must satisfy \\[f(x^{\\star})=0=f(x_0)+f^{\\prime}(x_0)(x^{\\star}-x_0) + o(x-x_0)\\]\nHence a good approximation should be \\[x^{\\star}\\approx = x_0- f(x_0)/f^{\\prime}(x_0)\\]\nCheck it is good. otherwise, replace \\(x_0\\) by \\(x^{\\star}\\)",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#newton-algorithm-2",
    "href": "slides/session_3/index.html#newton-algorithm-2",
    "title": "Optimization",
    "section": "Newton algorithm (2)",
    "text": "Newton algorithm (2)\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n- \\frac{f(x_n)}{f^{\\prime}(x_n)}=f^{\\text{newton}}(x_n)\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#quasi-newton",
    "href": "slides/session_3/index.html#quasi-newton",
    "title": "Optimization",
    "section": "Quasi-Newton",
    "text": "Quasi-Newton\n\nWhat if we can’t compute \\(f^{\\prime}\\) or it is expensive to do so?\n\nIdea: try to approximate \\(f^{\\prime}(x_n)\\) from the last iterates\n\nSecant method: \\[f^{\\prime}(x_n)\\approx \\frac{f(x_n)-f(x_{n-1})}{x_n-x_{n-1}}\\] \\[x_{n+1} = x_n- f(x_n)\\frac{x_n-x_{n-1}}{f(x_n)-f(x_{n-1})}\\]\n\nrequires two initial guesses: \\(x_1\\) and \\(x_0\\)\nsuperlinear convergence: \\(\\lim \\frac{x_t-x^{\\star}}{x_{t-1}-x^{\\star}}\\rightarrow 0\\)",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#limits-of-newtons-method",
    "href": "slides/session_3/index.html#limits-of-newtons-method",
    "title": "Optimization",
    "section": "Limits of Newton’s method",
    "text": "Limits of Newton’s method\n\nHow could Newton method fail?\n\nbad guess\n\n-&gt; start with a better guess\n\novershoot\n\n-&gt; dampen the update (problem: much slower)\n-&gt; backtrack\n\nstationary point\n\n-&gt; if root of multiplicity \\(m\\) try \\(x_{n+1} = x_n- m \\frac{f(x_n)}{f^{\\prime}(x_n)}\\)",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#backtracking",
    "href": "slides/session_3/index.html#backtracking",
    "title": "Optimization",
    "section": "Backtracking",
    "text": "Backtracking\n\nSimple idea:\n\nat stage \\(n\\) given \\(f(x_n)\\) compute Newton step \\(\\Delta_n=-\\frac{f(x_n)}{f^{\\prime}(x_n)}\\)\nfind the smallest \\(k\\) such that \\(|f(x_n-\\Delta/2^k)|&lt;|f(x_n)|\\)\nset \\(x_{n+1}=x_n-\\Delta/2^k\\)",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#golden-section-search",
    "href": "slides/session_3/index.html#golden-section-search",
    "title": "Optimization",
    "section": "Golden section search",
    "text": "Golden section search\n\nMinimize \\(f(x)\\) for \\(x \\in [a,b]\\)\nChoose \\(\\Phi \\in [0,0.5]\\)\nAlgorithm:\n\nstart with \\(a_n &lt; b_n\\) (initially equal to \\(a\\) and \\(b\\))\ndefine \\(c_n = a_n+\\Phi(b_n-a_n)\\) and \\(d_n = a_n+(1-\\Phi)(b_n-a_n)\\)\n\nif \\(f(c_n)&lt;f(d_n)\\) set \\(a_{n+1},b_{n+1}=a_n, d_n\\)\nelse set \\(a_{n+1}, b_{n+1}= c_n, b_n\\)",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#golden-section-search-2",
    "href": "slides/session_3/index.html#golden-section-search-2",
    "title": "Optimization",
    "section": "Golden section search (2)",
    "text": "Golden section search (2)\n\nThis is guaranteed to converge to a local minimum\nIn each step, the size of the interval is reduced by a factor \\(\\Phi\\)\nBy choosing \\(\\Phi=\\frac{\\sqrt{5}-1}{2}\\) one can save one evaluation by iteration.\n\nyou can check that either \\(c_{n+1} = d_n\\) or \\(d_{n+1} = c_n\\)\n\nRemark that bisection is not enough",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#gradient-descent",
    "href": "slides/session_3/index.html#gradient-descent",
    "title": "Optimization",
    "section": "Gradient Descent",
    "text": "Gradient Descent\n\nMinimize \\(f(x)\\) for \\(x \\in R\\) given initial guess \\(x_0\\)\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n (1-\\lambda)- \\lambda f^{\\prime}(x_n)\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f^{\\prime}(x_n)| &lt; \\epsilon\\)",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#gradient-descent-2",
    "href": "slides/session_3/index.html#gradient-descent-2",
    "title": "Optimization",
    "section": "Gradient Descent (2)",
    "text": "Gradient Descent (2)\n\nUses local information\n\none needs to compute the gradient\nnote that gradient at \\(x_n\\) does not provide a better guess for the minimum than \\(x_n\\) itself\nlearning speed is crucial\n\nConvergence speed: linear\n\nrate depend on the learning speed\noptimal learning speed? the fastest for which there is convergence",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#newton-raphson-method",
    "href": "slides/session_3/index.html#newton-raphson-method",
    "title": "Optimization",
    "section": "Newton-Raphson method",
    "text": "Newton-Raphson method\n\nMinimize \\(f(x)\\) for \\(x \\in R\\) given initial guess \\(x_0\\)\nBuild a local model of \\(f\\) around \\(x_0\\) \\[f(x) = f(x_0) + f^{\\prime}(x_0)(x-x_0) + f^{\\prime\\prime}(x_0)\\frac{(x-x_0)^2}{2} + o(x-x_0)^2\\]\nAccording to this model, \\[ f(x{\\star}) = min_x f(x)\\iff \\frac{d}{d x} \\left[ f(x_0) + f^{\\prime}(x_0)(x-x_0) + f^{\\prime\\prime}(x_0)\\frac{(x-x_0)^2}{2} \\right] = 0\\] which yields: \\(x^{\\star} = x_0 - \\frac{f^{\\prime}(x_0)}{f^{\\prime\\prime}(x_0)}\\)\nthis is Newton applied to \\(f^{\\prime}(x)=0\\)",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#newton-raphson-algorithm-2",
    "href": "slides/session_3/index.html#newton-raphson-algorithm-2",
    "title": "Optimization",
    "section": "Newton-Raphson Algorithm (2)",
    "text": "Newton-Raphson Algorithm (2)\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n-\\frac{f^{\\prime}(x_0)}{f^{\\prime\\prime}(x_0)}\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f^{\\prime}(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#unconstrained-problems",
    "href": "slides/session_3/index.html#unconstrained-problems",
    "title": "Optimization",
    "section": "Unconstrained problems",
    "text": "Unconstrained problems\n\nMinimize \\(f(x)\\) for \\(x \\in R^n\\) given initial guess \\(x_0 \\in R^n\\)\nMany intuitions from the 1d case, still apply\n\nreplace derivatives by gradient, jacobian and hessian\nrecall that matrix multiplication is not commutative\n\nSome specific problems:\n\nupdate speed can be specific to each dimension\nsaddle-point issues (for minimization)",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#quick-terminology",
    "href": "slides/session_3/index.html#quick-terminology",
    "title": "Optimization",
    "section": "Quick terminology",
    "text": "Quick terminology\nFunction \\(f: R^p \\rightarrow R^q\\)\n\nJacobian: \\(J(x)\\) or \\(f^{\\prime}_x(x)\\), \\(p\\times q\\) matrix such that: \\[J(x)_{ij} = \\frac{\\partial f(x)_i}{\\partial x_j}\\]\nGradient: \\(\\nabla f(x) = J(x)\\), gradient when \\(q=1\\)\nHessian: denoted by \\(H(x)\\) or \\(f^{\\prime\\prime}_{xx}(x)\\) when \\(q=1\\): \\[H(x)_{jk} = \\frac{\\partial f(x)}{\\partial x_j\\partial x_k}\\]\nIn the following explanations, \\(|x|\\) denotes the supremum norm, but most of the following explanations also work with other norms.",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#multidimensional-newton-raphson",
    "href": "slides/session_3/index.html#multidimensional-newton-raphson",
    "title": "Optimization",
    "section": "Multidimensional Newton-Raphson",
    "text": "Multidimensional Newton-Raphson\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n- J(x_{n})^{-1}f(x_n)=f^{\\text{newton}}(x_n)\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#multidimensional-newton-root-finding-2",
    "href": "slides/session_3/index.html#multidimensional-newton-root-finding-2",
    "title": "Optimization",
    "section": "Multidimensional Newton root-finding (2)",
    "text": "Multidimensional Newton root-finding (2)\n\nwhat matters is the computation of the step \\(\\Delta_n = {\\color{\\red}{J(x_{n})^{-1}}} f(x_n)\\)\ndon’t compute \\(J(x_n)^{-1}\\)\n\nit takes less operations to compute \\(X\\) in \\(AX=Y\\) than \\(A^{-1}\\) then \\(A^{-1}Y\\)\nin Julia: X = A \\ Y\n\nstrategies to improve convergence:\n\ndampening: \\(x_n = (1-\\lambda)x_{n-1} - \\lambda \\Delta_n\\)\nbacktracking: choose \\(k\\) such that \\(|f(x_n-2^{-k}\\Delta_n)|\\)&lt;\\(|f(x_{n-1})|\\)\nlinesearch: choose \\(\\lambda\\in[0,1]\\) so that \\(|f(x_n-\\lambda\\Delta_n)|\\) is minimal",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#multidimensional-gradient-descent",
    "href": "slides/session_3/index.html#multidimensional-gradient-descent",
    "title": "Optimization",
    "section": "Multidimensional Gradient Descent",
    "text": "Multidimensional Gradient Descent\n\nMinimize \\(f(x) \\in R\\) for \\(x \\in R^n\\) given \\(x_0 \\in R^n\\)\nAlgorithm\n\nstart with \\(x_n\\) \\[x_{n+1} = (1-\\lambda) x_n - \\lambda \\nabla f(x_n)\\]\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nComments:\n\nlots of variants\nautomatic differentiation software makes gradient easy to compute\nconvergence is typically linear",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#gradient-descent-variants",
    "href": "slides/session_3/index.html#gradient-descent-variants",
    "title": "Optimization",
    "section": "Gradient descent variants",
    "text": "Gradient descent variants",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#multidimensional-newton-minimization",
    "href": "slides/session_3/index.html#multidimensional-newton-minimization",
    "title": "Optimization",
    "section": "Multidimensional Newton Minimization",
    "text": "Multidimensional Newton Minimization\n\nAlgorithm:\n\nstart with \\(x_n\\)\ncompute \\(x_{n+1} = x_n-{\\color{\\red}{H(x_{n})^{-1}}}\\color{\\green}{ J(x_n)'}\\)\nstop if \\(|x_{n+1}-x_n|&lt;\\eta\\) or \\(|f(x_n)| &lt; \\epsilon\\)\n\nConvergence: quadratic\nProblem:\n\n\\(H(x_{n})\\) hard to compute efficiently\nrather unstable",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#quasi-newton-method-for-multidimensional-minimization",
    "href": "slides/session_3/index.html#quasi-newton-method-for-multidimensional-minimization",
    "title": "Optimization",
    "section": "Quasi-Newton method for multidimensional minimization",
    "text": "Quasi-Newton method for multidimensional minimization\n\nRecall the secant method:\n\n\\(f(x_{n-1})\\) and \\(f(x_{n-2})\\) are used to approximate \\(f^{\\prime}(x_{n-2})\\).\nIntuitively, \\(n\\) iterates would be needed to approximate a hessian of size \\(n\\)….\n\nBroyden method: takes \\(2 n\\) steps to solve a linear problem of size \\(n\\)\n\nuses past information incrementally",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#quasi-newton-method-for-multidimensional-minimization-1",
    "href": "slides/session_3/index.html#quasi-newton-method-for-multidimensional-minimization-1",
    "title": "Optimization",
    "section": "Quasi-Newton method for multidimensional minimization",
    "text": "Quasi-Newton method for multidimensional minimization\n\nConsider the approximation: \\[f(x_n)-f(x_{n-1}) \\approx J(x_n) (x_n - x_{n-1})\\]\n\n\\(J(x_n)\\) is unknown and cannot be determined directly as in the secant method.\nidea: \\(J(x_n)\\) as close as possible to \\(J(x_{n-1})\\) while solving the secant equation\nformula: \\[J_n = J_{n-1} + \\frac{(f(x_n)-f(x_{n-1})) - J_{n-1}(x_n-x_{n-1})}{||x_n-x_{n-1}||^2}(x_n-x_{n-1})^{\\prime}\\]",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#gauss-newton-minimization",
    "href": "slides/session_3/index.html#gauss-newton-minimization",
    "title": "Optimization",
    "section": "Gauss-Newton Minimization",
    "text": "Gauss-Newton Minimization\n\nRestrict to least-square minimization: $min_x _i f(x)_i^2 R $\nThen up to first order, \\(H(x_n)\\approx J(x_n)^{\\prime}J(x_n)\\)\nUse the step: \\(({J(x_n)^{\\prime}J(x_n)})^{-1}\\color{\\green}{ J(x_n)}\\)\nConvergence:\n\ncan be quadratic at best\nlinear in general",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#levenberg-marquardt",
    "href": "slides/session_3/index.html#levenberg-marquardt",
    "title": "Optimization",
    "section": "Levenberg-Marquardt",
    "text": "Levenberg-Marquardt\n\nLeast-square minimization: $min_x _i f(x)_i^2 R $\nreplace \\({J(x_n)^{\\prime}J(x_n)}^{-1}\\) by \\({J(x_n)^{\\prime}J(x_n)}^{-1} +\\mu I\\)\n\nadjust \\(\\lambda\\) depending on progress\n\nuses only gradient information like Gauss-Newton\nequivalent to Gauss-Newton close to the solution (\\(\\mu\\) small)\nequivalent to Gradient far from solution (\\(\\mu\\) high)",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#consumption-optimization",
    "href": "slides/session_3/index.html#consumption-optimization",
    "title": "Optimization",
    "section": "Consumption optimization",
    "text": "Consumption optimization\nConsider the optimization problem: \\[\\max U(x_1, x_2)\\]\nunder the constraint \\(p_1 x_1 + p_2 x_2 \\leq B\\)\nwhere \\(U(.)\\), \\(p_1\\), \\(p_2\\) and \\(B\\) are given.\nHow do you find a solution by hand?",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#consumption-optimization-1",
    "href": "slides/session_3/index.html#consumption-optimization-1",
    "title": "Optimization",
    "section": "Consumption optimization (1)",
    "text": "Consumption optimization (1)\n\nCompute by hand\nEasy:\n\nsince the budget constraint must be binding, get rid of it by stating \\(x_2 = B - p_1 x_1\\)\nthen maximize in \\(x_1\\), \\(U(x_1, B - p_1 x_1)\\) using the first order conditions.\n\nIt works but:\n\nbreaks symmetry between the two goods\nwhat if there are other constraints: \\(x_1\\geq \\underline{x}\\)?\nwhat if constraints are not binding?\nis there a better way to solve this problem?",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#consumption-optimization-2",
    "href": "slides/session_3/index.html#consumption-optimization-2",
    "title": "Optimization",
    "section": "Consumption optimization (2)",
    "text": "Consumption optimization (2)\n\nAnother method, which keeps the symmetry. Constraint is binding, trying to minimize along the budget line yields an implicit relation between \\(d x_1\\) and \\(d x_2\\) \\[p_1 d {x_1} + p_2 d {x_2} = 0\\]\nAt the optimal: \\(U^{\\prime}_{x_1}(x_1, x_2)d {x_1} + U^{\\prime}_{x_2}(x_1, x_2)d {x_2} = 0\\)\nEliminate \\(d {x_1}\\) and \\(d {x_2}\\) to get one condition which characterizes optimal choices for all possible budgets. Combine with the budget constraint to get a second condition.",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#penalty-function",
    "href": "slides/session_3/index.html#penalty-function",
    "title": "Optimization",
    "section": "Penalty function",
    "text": "Penalty function\n\nTake a penalty function \\(p(x)\\) such that \\(p(x)=K&gt;0\\) if \\(x&gt;0\\) and \\(p(x)=0\\) if \\(x \\leq 0\\). Maximize: \\(V(x_1, x_2) = U(x_1, x_2) - p( p_1 x_1 + p_2 x_2 - B)\\)\nClearly, \\(\\min U \\iff \\min V\\)\nProblem: \\(\\nabla V\\) is always equal to \\(\\nabla U\\).\nSolution: use a smooth solution function like \\(p(x) = x^2\\)\nProblem: distorts optimization\n\nSolution: adjust weight of barrier and minimize \\(U(x_1, x_2) - \\kappa p(x)\\)\n\nPossible but hard to choose the weights/constraints.",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#penalty-function-1",
    "href": "slides/session_3/index.html#penalty-function-1",
    "title": "Optimization",
    "section": "Penalty function",
    "text": "Penalty function\n\nAnother idea: is there a canonical way to choose \\(\\lambda\\) such that at the minimum it is equivalent to minimize the original problem under constraint or to minimize \\[V(x_1, x_2) = U(x_1, x_2) - \\lambda (p_1 x_1 + p_2 x_2 - B)\\]\nClearly, when the constraint is not binding we must have \\(\\lambda=0\\). What should be the value of \\(\\lambda\\) when the constraint is binding ?",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#karush-kuhn-tucker-conditions",
    "href": "slides/session_3/index.html#karush-kuhn-tucker-conditions",
    "title": "Optimization",
    "section": "Karush-Kuhn-Tucker conditions",
    "text": "Karush-Kuhn-Tucker conditions\n\nIf \\((x^{\\star},y^{\\star})\\) is optimal there exists \\(\\lambda\\) such that:\n\n\\((x^{\\star},y^{\\star})\\) maximizes lagrangian \\(\\mathcal{L} = U(x_1, x_2) + \\lambda (B- p_1 x_1 - p_2 x_2)\\)\n\\(\\lambda \\geq 0\\)\n\\(B- p_1 x_1 - p_2 x_2 \\geq 0\\)\n\\(\\lambda  (B - p_1 x_1 - p_2 x_2 ) = 0\\)\n\nThe three latest conditions are called “complementarity” or “slackness” conditions\n\nthey are equivalent to \\(\\min(\\lambda, B - p_1 x_1 - p_2 x_2)=0\\)\nwe denote \\(\\lambda \\geq 0 \\perp B- p_1 x_1 + p_2 x_2  \\geq 0\\)\n\n\\(\\lambda\\) can be interpreted as the welfare gain of relaxing the constraint.",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#karush-kuhn-tucker-conditions-1",
    "href": "slides/session_3/index.html#karush-kuhn-tucker-conditions-1",
    "title": "Optimization",
    "section": "Karush-Kuhn-Tucker conditions",
    "text": "Karush-Kuhn-Tucker conditions\n\nWe can get first order conditions that factor in the constraints:\n\n\\(U^{\\prime}_x - \\lambda p_1 = 0\\)\n\\(U^{\\prime}_y - \\lambda p_2 = 0\\)\n\\(\\lambda \\geq 0 \\perp B-p_1 x_1 -p_2 x_2 \\geq 0\\)\n\nIt is now a nonlinear system of equations with complementarities (NCP)\n\nthere are specific solution methods to deal with it",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#solution-strategies-for-ncp-problems",
    "href": "slides/session_3/index.html#solution-strategies-for-ncp-problems",
    "title": "Optimization",
    "section": "Solution strategies for NCP problems",
    "text": "Solution strategies for NCP problems\n\nGeneral formulation for vector-valued functions \\[f(x)\\geq 0 \\perp g(x)\\geq 0\\] means \\[\\forall i, f_i(x)\\geq 0 \\perp g_i(x)\\geq 0\\]\n\nNCP do not necessarily arise from a single optimization problem\n\nThere are robust (commercial) solvers for NCP problems (PATH, Knitro) for that\nHow do we solve it numerically?\n\nassume constraint is binding then non-binding then check which one is good\n\nOK if not too many constraints\n\nreformulate it as a smooth problem\napproximate the system by a series of linear complementarities problems (LCP)",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#smooth-method",
    "href": "slides/session_3/index.html#smooth-method",
    "title": "Optimization",
    "section": "Smooth method",
    "text": "Smooth method\n\nConsider the Fisher-Burmeister function \\[\\phi(a,b) = a+b-\\sqrt{a^2+b^2}\\]\nIt is infinitely differentiable, except at \\((0,0)\\)\nShow that \\(\\phi(a,b) = 0 \\iff \\min(a,b)=0 \\iff a\\geq 0 \\perp b \\geq 0\\)\nAfter substitution in the original system one can use regular non-linear solver\n\nfun fact: the formulation with a \\(\\min\\) is nonsmooth but also works quite often",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_3/index.html#optimization-libraries",
    "href": "slides/session_3/index.html#optimization-libraries",
    "title": "Optimization",
    "section": "Optimization libraries",
    "text": "Optimization libraries\n\nRobust optimization code is contained in the following libraries:\n\nRoots.jl: one-dimensional root finding\nNLSolve.jl: multidimensional root finding (+complementarities)\nOptim.jl: minimization\n\nThe two latter libraries have a somewhat peculiar API, but it’s worth absorbing it.\n\nin particular they provide non-allocating algorithms for functions that modify arguments in place\nthey are compatible with automatic differentiation\n\n\njulia&gt; f(x) = [x[1] - x[2] - 1, x[1] + x[2]]\nf (generic function with 1 method)\n\njulia&gt; NLsolve.nlsolve(f, [0., 0.0])\nResults of Nonlinear Solver Algorithm\n * Algorithm: Trust-region with dogleg and autoscaling\n * Starting Point: [0.0, 0.0]\n * Zero: [0.5000000000009869, -0.5000000000009869]\n * Inf-norm of residuals: 0.000000       \n * Iterations: 1                       \n * Convergence: true\n   * |x - x'| &lt; 0.0e+00: false\n   * |f(x)| &lt; 1.0e-08: true                           \n * Function Calls (f): 2\n * Jacobian Calls (df/dx): 2",
    "crumbs": [
      "Slides",
      "Optimization"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#main-approaches",
    "href": "slides/session_6/index.html#main-approaches",
    "title": "Differentiation",
    "section": "Main approaches",
    "text": "Main approaches\n\nManual\nFinite Differences\nSymbolic Differentiation\nAutomatic Differentiation",
    "crumbs": [
      "Slides",
      "Differentiation"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#manual-differentiation",
    "href": "slides/session_6/index.html#manual-differentiation",
    "title": "Differentiation",
    "section": "Manual Differentiation",
    "text": "Manual Differentiation\n\nTrick:\n\nnever use \\(\\frac{d}{dx} \\frac{u(x)}{v(x)} = \\frac{u'(x)v(x)-u(x)v'(x)}{v(x)^2}\\)\nuse instead \\[\\frac{d}{dx} {u(x)v(x)} = {u'(x)v(x)+u(x)v'(x)}\\] and \\[\\frac{d}{dx} u(x) = -\\frac{u^{\\prime}}{u(x)^2}\\]\n\nJust kidding…",
    "crumbs": [
      "Slides",
      "Differentiation"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#finite-differences",
    "href": "slides/session_6/index.html#finite-differences",
    "title": "Differentiation",
    "section": "Finite Differences",
    "text": "Finite Differences\n\nChoose small \\(\\epsilon&gt;0\\), typically \\(\\sqrt{ \\textit{machine eps}}\\)\nForward Difference scheme:\n\n\\(f'(x) \\approx \\frac{f(x+\\epsilon) - f(x)}{\\epsilon}\\)\nprecision: \\(o(\\epsilon)\\)\nbonus: if \\(f(x+\\epsilon)\\) can compute \\(f(x)-f(x-\\epsilon)\\) instead (Backward)\n\nCentral Difference scheme:\n\n\\(f'(x) \\approx \\frac{f(x+\\epsilon) - f(x-\\epsilon)}{2\\epsilon}\\)\naverage of forward and backward\nprecision: \\(o(\\epsilon^2)\\)",
    "crumbs": [
      "Slides",
      "Differentiation"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#finite-differences-higher-order",
    "href": "slides/session_6/index.html#finite-differences-higher-order",
    "title": "Differentiation",
    "section": "Finite Differences: Higher order",
    "text": "Finite Differences: Higher order\n\nCentral formula: \\[\\begin{aligned}\nf''(x) & \\approx & \\frac{f'(x)-f'(x-\\epsilon)}{\\epsilon} \\approx \\frac{(f(x+\\epsilon))-f(x))-(f(x)-f(x-\\epsilon))}{\\epsilon^2}  \\\\ & = & \\frac{f(x+\\epsilon)-2f(x)+f(x-\\epsilon)}{\\epsilon^2}\n\\end{aligned}\\]\n\nprecision: \\(o(\\epsilon)\\)\n\nGeneralizes to higher order but becomes more and more innacurate",
    "crumbs": [
      "Slides",
      "Differentiation"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#symbolic-differentiation",
    "href": "slides/session_6/index.html#symbolic-differentiation",
    "title": "Differentiation",
    "section": "Symbolic Differentiation",
    "text": "Symbolic Differentiation\n\nmanipulate the tree of algebraic expressions\n\nimplements various simplification rules\n\nrequires mathematical expression\ncan produce mathematical insights\nsometimes inaccurate:\n\ncf: \\(\\left(\\frac{1+u(x)}{1+v(x)}\\right)^{100}\\)",
    "crumbs": [
      "Slides",
      "Differentiation"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#julia-packages",
    "href": "slides/session_6/index.html#julia-packages",
    "title": "Differentiation",
    "section": "Julia Packages:",
    "text": "Julia Packages:\n\nLots of packages\nFiniteDiff.jl, FiniteDifferences.jl, SparseDiffTools.jl\n\ncareful implementation of finite diff\n\nSymEngine.jl\n\nfast symbolic calculation\n\nSymbolics.jl\n\nfast, pure Julia\nless complete than SymEngine",
    "crumbs": [
      "Slides",
      "Differentiation"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#automatic-differentiation",
    "href": "slides/session_6/index.html#automatic-differentiation",
    "title": "Differentiation",
    "section": "Automatic Differentiation",
    "text": "Automatic Differentiation\n\ndoes not provide mathematical insights but solves the other problems\ncan differentiate any piece of code\ntwo flavours\n\nforward accumulation\nreverse accumulation",
    "crumbs": [
      "Slides",
      "Differentiation"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#automatic-rewrite-source-code-transform",
    "href": "slides/session_6/index.html#automatic-rewrite-source-code-transform",
    "title": "Differentiation",
    "section": "Automatic rewrite: source code transform",
    "text": "Automatic rewrite: source code transform\nfunction f(x::Float64)\n    a = x + 1\n    b = x^2\n    c = sin(a) + a + b\nend",
    "crumbs": [
      "Slides",
      "Differentiation"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#automatic-rewrite-source-code-transform-1",
    "href": "slides/session_6/index.html#automatic-rewrite-source-code-transform-1",
    "title": "Differentiation",
    "section": "Automatic rewrite: source code transform",
    "text": "Automatic rewrite: source code transform\nfunction f(x::Float64)\n\n    # x is an argument\n    x_dx = 1.0\n\n    a = x + 1\n    a_dx = x_dx\n\n    b = x^2\n    b_dx = 2*x*x_dx\n\n    t = sin(a)\n    t_x = cos(a)*a_dx\n\n    c = t + b\n    c_x = t_dx + b_dx\n\n    return (c, c_x)\nend",
    "crumbs": [
      "Slides",
      "Differentiation"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#dual-numbers-operator-overloading",
    "href": "slides/session_6/index.html#dual-numbers-operator-overloading",
    "title": "Differentiation",
    "section": "Dual numbers: operator overloading",
    "text": "Dual numbers: operator overloading\nstruct DN\n    x::Float64\n    dx::Float64\nend\n\n+(a::DN,b::DN) = DN(a.x+b.x, a.dx+b.dx)\n-(a::DN,b::DN) = DN(a.x-b.x, a.dx-b.dx)\n*(a::DN,b::DN) = DN(a.x*b.x, a.x*b.dx+a.dx*b.x)\n/(a::DN,b::DN) = DN(a.x/b.x, (a.dx*b.x-a.x*b.dx)/b.dx^2)\n\n...\n\nCan you compute f(x) using dual numbers?\n\n\n(it might require some more definitions)",
    "crumbs": [
      "Slides",
      "Differentiation"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#compatible-with-control-flow",
    "href": "slides/session_6/index.html#compatible-with-control-flow",
    "title": "Differentiation",
    "section": "Compatible with control flow",
    "text": "Compatible with control flow\nimport ForwardDiff: Dual\n\nx = Dual(1.0, 1.0)\na = 0.5*x\nb = sum([(x)^i/i*(-1)^(i+1) for i=1:5000])\n# compare with log(1+x)\n\ngeneralizes nicely to gradient computations\n\nx = Dual(1.0, 1.0, 0.0)\ny = Dual(1.0, 0.0, 1.0)\nexp(x) + log(y)",
    "crumbs": [
      "Slides",
      "Differentiation"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#technical-remark",
    "href": "slides/session_6/index.html#technical-remark",
    "title": "Differentiation",
    "section": "Technical remark",
    "text": "Technical remark\n\nautodiff libraries, use special types and operator overloading to perform operations (like Dual numbers)\nthis relies on Julia duck-typing ability\n\nso don’t specify type arguments for functions you want to autodiff\n\nThis works:\n\nusing ForwardDiff\nf(x) = [x[1] + x[2], x[1]*x[2]]\nForwardDiff.jacobian(f, [0.4, 0.1])\n\nThis doesn’t:\n\nusing ForwardDiff\ng(x::Vector{Float64}) = [x[1] + x[2], x[1]*x[2]]\nForwardDiff.jacobian(g, [0.4, 0.1])",
    "crumbs": [
      "Slides",
      "Differentiation"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#forward-accumulation-mode",
    "href": "slides/session_6/index.html#forward-accumulation-mode",
    "title": "Differentiation",
    "section": "Forward Accumulation Mode",
    "text": "Forward Accumulation Mode\n\nForward Accumulation mode: isomorphic to dual number calculation\n\ncompute tree with values and derivatives at the same time\nefficient for \\(f: R^n\\rightarrow R^m\\), with \\(n&lt;&lt;m\\)\n\n(keeps lots of empty gradients when \\(n&gt;&gt;m\\))",
    "crumbs": [
      "Slides",
      "Differentiation"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#reverse-accumulation-mode",
    "href": "slides/session_6/index.html#reverse-accumulation-mode",
    "title": "Differentiation",
    "section": "Reverse Accumulation Mode",
    "text": "Reverse Accumulation Mode\n\nReverse Accumulation / Back Propagation\n\nefficient for \\(f: R^n\\rightarrow R^m\\), with \\(m&lt;&lt;n\\)\nrequires data storage (to keep intermediate values)\ngraph / example\n\nVery good for machine learning:\n\n\\(\\nabla_{\\theta} F(x;\\theta)\\) where \\(F\\) can be an objective",
    "crumbs": [
      "Slides",
      "Differentiation"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#libraries-for-autodiff",
    "href": "slides/session_6/index.html#libraries-for-autodiff",
    "title": "Differentiation",
    "section": "Libraries for AutoDiff",
    "text": "Libraries for AutoDiff\n\nSee JuliaDiff: http://www.juliadiff.org/\n\nForwardDiff.jl\nReverseDiff.jl\n\nNew approaches:\n\nZygote.jl: source to source\nEnzyme.jl: differentiates llvm code\n\nOther libraries like NLsolve or Optim.jl rely on on the former libraries to perform automatic differentiation automatically.\n\nusing NLSolve\nfunction fun!(F, x)\n    F[1] = (x[1]+3)*(x[2]^3-7)+18\n    F[2] = sin(x[2]*exp(x[1])-1)\nend\nnlsolve(fun!, [0.1, 0.2], autodiff = :forward)",
    "crumbs": [
      "Slides",
      "Differentiation"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#the-future-of-ai-deep-learning",
    "href": "slides/session_6/index.html#the-future-of-ai-deep-learning",
    "title": "Differentiation",
    "section": "The future of AI / Deep Learning",
    "text": "The future of AI / Deep Learning\nWhat are the main options for deep learning?\n\ntensorflow, pytorch, jax python interfaces to manipulate tensors\n\ngets compiled to fast code\n\nmojo: right now for inference\n\nWhat features are needed?\n\ncompilation\nvectorization (processor SIMD, GPU)\nautomatic differentiation for training\n\nJulia should be perfecty positioned\n\nBut deep learning frameworks might not have reached critical mass. You can still try:\n\nFlux.jl\nLux.jl",
    "crumbs": [
      "Slides",
      "Differentiation"
    ]
  },
  {
    "objectID": "tutorials/1_1_Julia_Basics.html",
    "href": "tutorials/1_1_Julia_Basics.html",
    "title": "Tutorial: Julia Basics",
    "section": "",
    "text": "developped at MIT on top of opensource technologies\n\nlinux / git / llvm\n\nsyntax inspired by Matlab but:\n\nmore consistent\nlots of features from high level languages\n\neverything is JIT-compiled\n\ninterpreted vs compiled treadeoff\n-&gt; very fast\nmost of the base library is written in Julia\n\nopensource/free + vibrant community\n\nSome useful links from QuantEcon:\n\nJulia cheatsheet\nJulia-Matlab comparison\nJulia essentials\nVectors, arrays and matrices\n\nExcellent resources at: julialang - checkout JuliaAcademy, it’s free\n\n\n\nHow I learnt: interpreted code is slow, so vectorize your coe.\n\nfunction stupid_loop(I,J,K)\n    t = 0.0\n    for i=1:I\n        for j=1:J\n            for k = 1:K\n                t += 1.0\n            end        \n        end\n    end\n    return t\nend\n@time [ stupid_loop(1000,1000,i) for i =1:10]\n\nCode is translated to LLVM code then to instructions for the processor. Note that processor instructions are shorter than LLVM code.\n\n@code_llvm stupid_loop(10,10,10)\n\n\n@code_native stupid_loop(10,10,10)\n\n\n\n\n\n\nAssignement operator is = (equality is ==, identity is ===)\n\n# Assign the value 10 to the variable x\nx = 10\n\n\n2 == 3\n\n\n# Variable names can have Unicode characters\n# To get ϵ in the REPL, type \\epsilon&lt;TAB&gt;\nϵ = 1e-4\n\nDefault semantic is pass-by-reference:\n\na = [1,2,3,4]\nb = a\na[1] = 10\nb\n\nTo work on a copy: copy or deepcopy\n\na = [1,2,3,4]\nb = copy(a)\na[1]=10\nb\n\n\na .== b\n\n\na === b\n\n\n\n\n\n# for any object `typeof` returns the type\n?typeof\n\n\ntypeof(a)\n\n\n\n\n\ny = 2 + 2\n\n\n-y\n\n\n0.34*23\n\n\n3/4\n\n\n# Scalar multiplication doesn't require *\n3(4 - 2)\n\n\nx = 4\n2x\n\n\ntypeof(x)\n\n\nsizeof(a)\n\n\n\n\nEquality\n\n0 == 1\n\n\n2 != 3\n\n\n3 &lt;= 4\n\nIdentity\n\na = [34, 35]\nb = [34, 35]\nc = a\n\n\nc === a\n\n\nb === a\n\nBoolean operator\n\ntrue && false\n\n\ntrue || false\n\n\n!true\n\n\n\n\n\n# Strings are written using double quotes\nstr = \"This is a string\"\n\n\nch = 'k' # this is a character\n\n\n# Strings can also contain Unicode characters\nfancy_str = \"α is a string\"\n\n\n# String interpolation using $\n# The expression in parentheses is evaluated and the result is \n# inserted into the string\na = 2+2\n\"2 + 2 = $(a)\"\n\n\nprintln(\"It took me $(a) iterations\")\n\n\n# String concatenation using *\n\"hello\" * \"world\"\n\n\nprintln(\"hello \", \"world\")\n\n\n\n\nJulia has one-dimensional arrays. They are also called Vector.\n\nA = [1, 2]\n\n2-element Array{Int64,1}:\n 1\n 2\n\n\n\nsizeof(A)\n\n16\n\n\n\ntypeof(A) == Vector{Int64}\n\n\n# vectors have one dimension: they are indexed by an integer\nA[1]\n\n1\n\n\n2d arrays are also called matrices… and can be used for matrix multiplications.\n\nB = [0.1 0.2 0.3; 4 5 6]\n\n2×3 Array{Float64,2}:\n 0.1  0.2  0.3\n 4.0  5.0  6.0\n\n\n\nB*B'\n\n2×2 Array{Float64,2}:\n 0.14   3.2\n 3.2   77.0\n\n\nVectorized operations take a ., even comparisons:\n\nB.*B\n\n2×3 Array{Float64,2}:\n  0.01   0.04   0.09\n 16.0   25.0   36.0\n\n\n\nB .* B .&lt; B\n\n2×3 BitArray{2}:\n 1  1  1\n 0  0  0\n\n\nElements are always accessed with square brackets:\n\nB[1,2]\n\n0.2\n\n\n\nB[:,1]\n\n2-element Array{Float64,1}:\n 0.1\n 4.0\n\n\n\nB[:,1:end-1]\n\n2×2 Array{Float64,2}:\n 0.1  0.2\n 4.0  5.0\n\n\n\n\n\nConditions\n\nx = -3\nif x &lt; 0\n    println(\"x is negative\")\nelseif x &gt; 0 # optional and unlimited\n    println(\"x is positive\")\nelse         # optional\n    println(\"x is zero\")\nend\n\nx is negative\n\n\n\nprint(\"a\")\nprint(\"b\")\nprint(\"c\")\n\nabc\n\n\n\nprintln(\"a\")\nprintln(\"b\")\nprintln(\"c\")\n\na\nb\nc\n\n\nWhile\n\ni = 3\nwhile i &gt; 0\n    println(i)\n    i = i - 1\nend\n\n3\n2\n1\n\n\nFor loops\n\n# Iterate through ranges of numbers\nfor i = 1:3\n    println(i)\n    \n    if i == 2\n        break\n    end\nend\n\n1\n2\n\n\n\n# Iterate through arrays\ncities = [\"Boston\", \"New York\", \"Philadelphia\"]\nfor city in cities\n    println(city)\nend\n\nBoston\nNew York\nPhiladelphia\n\n\n\nstates = [\"MA\", \"NY\", \"PA\"]\n\n3-element Array{String,1}:\n \"MA\"\n \"NY\"\n \"PA\"\n\n\n\n( zip(cities, states) )\n\nzip([\"Boston\", \"New York\", \"Philadelphia\"], [\"MA\", \"NY\", \"PA\"])\n\n\n\ncollect( zip(cities, states) )\n\n3-element Array{Tuple{String,String},1}:\n (\"Boston\", \"MA\")\n (\"New York\", \"NY\")\n (\"Philadelphia\", \"PA\")\n\n\n\nfor t in zip(cities, states)\n    println(t)\nend\n\n(\"Boston\", \"MA\")\n(\"New York\", \"NY\")\n(\"Philadelphia\", \"PA\")\n\n\n\n# Iterate through arrays of tuples using zip\nfor (city, state) in zip(cities, states)\n    println(\"$city, $state\")\nend\n\nBoston, MA\nNew York, NY\nPhiladelphia, PA\n\n\n\n# Iterate through arrays and their indices using enumerate\nfor (i, city) in enumerate(cities)\n    println(\"City number $i is $city\")\nend\n\nCity number 1 is Boston\nCity number 2 is New York\nCity number 3 is Philadelphia\n\n\n\n\n\n\n[i^2 for i=1:10]\n\n10-element Array{Int64,1}:\n   1\n   4\n   9\n  16\n  25\n  36\n  49\n  64\n  81\n 100\n\n\n\n[i^2 for i=1:10 if mod(i,2)==0]\n\n5-element Array{Int64,1}:\n   4\n  16\n  36\n  64\n 100\n\n\n\n\n\n\nBasic functions\n\nfunction f(a,b,c)\n    res = a + b +c\n    return res\nend\n\nf (generic function with 1 method)\n\n\n\nf(3,4,3)\n\n10\n\n\nOptional arguments\n\nfunction f(a,b,c=1)\n    res = a + b +c\n    return res\nend\n\nf (generic function with 2 methods)\n\n\n\nf(1,2,3)\n\n6\n\n\n\nf(1,2)\n\n4\n\n\nKeyword arguments\n\nfunction g(a,b,c; operator=(+), add_one=false)\n    res = operator(a, operator( b , c) )\n    if add_one\n        res +=1\n    end\n    return res\nend\n\ng (generic function with 1 method)\n\n\n\ng(1,2,3)\n\n6\n\n\n\ng(1.0,2.9,3.0; operator=(/))\n\n1.0344827586206897\n\n\n\ng(1.0,2.9,3.0; operator=(/), add_one=true)\n\n2.0344827586206895\n\n\n\ng(1.0,2.9,3.0; add_one=true, operator=(/), )\n\n2.0344827586206895\n\n\nOne liners:\n\ng(x,y) = x^2 + y^2\n\ng (generic function with 2 methods)\n\n\nAnonymous function:\n\nfun = (x,y) -&gt; x^2 + 1 + y\n\n#12 (generic function with 1 method)\n\n\n\nf(1,2,3; operator=fun)\n\n10\n\n\n\n\n\n\n\nA composite type is a collection of named fields that can be treated as a single value. They bear a passing resemblance to MATLAB structs.\nAll fields must be declared ahead of time. The double colon, ::, constrains a field to contain values of a certain type. This is optional for any field.\n\nstruct Parameter_without_types\n    value\n    name\nend\n\n\ns = Parameter_without_types(4.4, \"no type at all\")\n\nParameter_without_types(4.4, \"no type at all\")\n\n\n\n# Type definition\nstruct Parameter\n    value::Float64\n    transformation::Function # Function is a type!\n    tex_label::String\n    description::String\nend\n\n\nParameter(4,fun,\"\\\\Gamma\", \"My parameter\")\n\nParameter(4.0, var\"#12#13\"(), \"\\\\Gamma\", \"My parameter\")\n\n\nWhen a type with \\(n\\) fields is defined, a constructor (function that creates an instance of that type) that takes \\(n\\) ordered arguments is automatically created. Additional constructors can be defined for convenience.\n\n# Creating an instance of the Parameter type using the default\n# constructor\nβ = Parameter(0.9, identity, \"\\beta\", \"Discount rate\")\n\nParameter(0.9, identity, \"\\beta\", \"Discount rate\")\n\n\n\nβ.value\n\n0.9\n\n\n\nParameter(value, transformation, tex) = Parameter(value, transformation, tex, \"no description\")\n\nParameter\n\n\n\nParameter(0.34, identity, \"\\beta\")\n\nParameter(0.34, identity, \"\\beta\", \"no description\")\n\n\n\n# constructor A\nParameter(value, tex) = Parameter(value, identity, tex, \"no description\")\n\nParameter\n\n\n\nParameter(0.1, \"\\beta\")\n\nParameter(0.1, identity, \"\\beta\", \"no description\")\n\n\n\n# constructor B\nParameter(value, transformation)  = Parameter(value, transformation, \"notex\", \"no description\")\n\nParameter\n\n\n\nParameter(0.1, \"\\beta\")\n\n\nMethodError: Cannot `convert` an object of type String to an object of type Function\nClosest candidates are:\n  convert(::Type{T}, ::T) where T at essentials.jl:205\n\n\n\n\n# here Julia doesn't know whether it should call constructor A or constructor B\n\n\n# solution : give different signatures to the various constructors\nParameter(value, tex::String)               = Parameter(value, identity, tex, \"no description\")\nParameter(value, transformation::Function)  = Parameter(value, transformation, \"notex\", \"no description\")\n\nParameter\n\n\n\nParameter(0.5, \"\\beta\")\n\nParameter(0.5, identity, \"\\beta\", \"no description\")\n\n\n\nParameter(0.9, u-&gt;u^2)\n\nParameter(0.9, var\"#14#15\"(), \"notex\", \"no description\")\n\n\n\nmethods( Parameter )\n\n# 6 methods for type constructor: Parameter(value::Float64, transformation::Function, tex_label::String, description::String) in Main at In[35]:3  Parameter(value, tex::String) in Main at In[55]:2  Parameter(value, transformation::Function) in Main at In[55]:3  Parameter(value, transformation) in Main at In[50]:2  Parameter(value, transformation, tex) in Main at In[45]:1  Parameter(value, transformation, tex_label, description) in Main at In[35]:3 \n\n\n\n# Alternative constructors end with an appeal to the default\n# constructor\nfunction Parameter(value::Float64, tex_label::String)\n    transformation = identity\n    description = \"No description available\"\n    return Parameter(value, transformation, tex_label, description)\nend\n\nα = Parameter(0.5, \"\\alpha\")\n\nParameter(0.5, identity, \"\\alpha\", \"No description available\")\n\n\nNow the function Parameter has two different methods with different signatures:\n\nmethods(Parameter)\n\n# 4 methods for type constructor: Parameter(value::Float64, transformation::Function, tex_label::String, description::String) in Main at In[1]:3  Parameter(value::Float64, tex_label::String) in Main at In[8]:4  Parameter(value, transformation, tex) in Main at In[5]:1  Parameter(value, transformation, tex_label, description) in Main at In[1]:3 \n\n\n\n# Find the fields of an instance of a composite type\nfieldnames(α)\n\n\nα.tex_label\n\n\n# Access a particular field using .\nα.value\n\n\n# Fields are modifiable and can be assigned to, like \n# ordinary variables\nα.value = 0.75\n\n\n\n\n\nby default structures in Julia are non-mutable\n\nβ.value = 0.6\n\nLoadError: setfield! immutable struct of type Parameter cannot be changed\n\n\n\nmutable struct Params\n    x:: Float64\n    y:: Float64\nend\n\n\npos = Params(0.4, 0.2)\n\nParams(0.4, 0.2)\n\n\n\npos.x = 0.5\n\n0.5\n\n\n\n\n\nParameterized types are data types that are defined to handle values identically regardless of the type of those values.\nArrays are a familiar example. An Array{T,1} is a one-dimensional array filled with objects of any type T (e.g. Float64, String).\n\n# Defining a parametric point\nstruct Duple{T} # T is a parameter to the type Duple\n    x::T\n    y::T\nend\n\n\nDuple(3, -1.0)\n\n\nMethodError: no method matching Duple(::Int64, ::Float64)\nClosest candidates are:\n  Duple(::T, ::T) where T at In[29]:3\n\n\n\n\nDuple{Int64}\n\nDuple{Int64}\n\n\nThis single declaration defines an unlimited number of new types: Duple{String}, Duple{Float64}, etc. are all immediately usable.\n\nDuple(1.3, 3.4)\n\nTruple3{Float64, Int64}((3.4, 5), 4)\n\n\n\nDuple(\"Hello\", \"Your\")\n\nWe can also restrict the type parameter T using the type hierarchy.\n\ntypeof(\"S\")\n\nString\n\n\n\ntypeof(\"S\") &lt;: Number\n\nfalse\n\n\n\ntypeof(4.6) &lt;: Float64\n\ntrue\n\n\n\nFloat64 &lt;: Number\n\ntrue\n\n\n\n# T can be any subtype of Number, but nothing else\nstruct PlanarCoordinate{T&lt;:Number}\n    x::T\n    y::T\nend\n\n\nPlanarCoordinate(\"4th Ave\", \"14th St\")\n\nLoadError: MethodError: no method matching PlanarCoordinate(::String, ::String)\n\n\n\nPlanarCoordinate(2//3, 8//9)\n\nPlanarCoordinate{Rational{Int64}}(2//3, 8//9)\n\n\n\nNumber:\n\n\n349//80 + 3//4 # rational \n\n409//80\n\n\n\ntypeof( factorial(20) )\n\nInt64\n\n\n\ntypeof( big(20) )\n\nBigInt\n\n\n\n\n\nYou can write all your code without thinking about types at all. If you do this, however, you’ll be missing out on some of the biggest benefits of using Julia.\nIf you understand types, you can:\n\nWrite faster code\nWrite expressive, clear, and well-structured programs (keep this in mind when we talk about functions)\nReason more clearly about how your code works\n\nEven if you only use built-in functions and types, your code still takes advantage of Julia’s type system. That’s why it’s important to understand what types are and how to use them.\n\n# Example: writing type-stable functions\nfunction sumofsins_unstable(n::Integer)  \n    sum = 0:: Integer\n    for i in 1:n  \n        sum += sin(3.4)  \n    end  \n    return sum \nend  \n\nfunction sumofsins_stable(n::Integer)  \n    sum = 0.0 :: Float64\n    for i in 1:n  \n        sum += sin(3.4)  \n    end  \n    return sum \nend\n\n# Compile and run\nsumofsins_unstable(Int(1e5))\nsumofsins_stable(Int(1e5))\n\n-25554.110202663698\n\n\n\n@time sumofsins_unstable(Int(1e5))\n\n  0.000268 seconds\n\n\n-25554.110202663698\n\n\n\n@time sumofsins_stable(Int(1e5))\n\n  0.000130 seconds\n\n\n-25554.110202663698\n\n\nIn sumofsins_stable, the compiler is guaranteed that sum is of type Float64 throughout; therefore, it saves time and memory. On the other hand, in sumofsins_unstable, the compiler must check the type of sum at each iteration of the loop. Let’s look at the LLVM intermediate representation.\n\n\n\nSo far we have defined functions over argument lists of any type. Methods allow us to define functions “piecewise”. For any set of input arguments, we can define a method, a definition of one possible behavior for a function.\n\n# Define one method of the function print_type\nfunction print_type(x::Number)\n    println(\"$x is a number\")\nend\n\nprint_type (generic function with 1 method)\n\n\n\n# Define another method\nfunction print_type(x::String)\n    println(\"$x is a string\")\nend\n\nprint_type (generic function with 2 methods)\n\n\n\n# Define yet another method\nfunction print_type(x::Number, y::Number)\n    println(\"$x and $y are both numbers\")\nend\n\nprint_type (generic function with 3 methods)\n\n\n\n# See all methods for a given function\nmethods(print_type)\n\n# 3 methods for generic function print_type: print_type(x::String) in Main at In[53]:3  print_type(x::Number) in Main at In[51]:3  print_type(x::Number, y::Number) in Main at In[54]:3 \n\n\nJulia uses multiple dispatch to decide which method of a function to execute when a function is applied. In particular, Julia compares the types of all arguments to the signatures of the function’s methods in order to choose the applicable one, not just the first (hence “multiple”).\n\nprint_type(5)\n\n5 is a number\n\n\n\nprint_type(\"foo\")\n\nfoo is a string\n\n\n\nprint_type([1, 2, 3])\n\nMethodError: MethodError: no method matching print_type(::Array{Int64,1})\nClosest candidates are:\n  print_type(!Matched::String) at In[53]:3\n  print_type(!Matched::Number) at In[51]:3\n  print_type(!Matched::Number, !Matched::Number) at In[54]:3\n\n\n\n\nJulia supports a short function definition for one-liners\n\nf(x::Float64) = x^2.0\nf(x::Int64) = x^3\n\nAs well as a special syntax for anonymous functions\n\nu-&gt;u^2\n\n\nmap(u-&gt;u^2, [1,2,3,4])\n\n\n\n\n\n\nf(a,b,c=true; algo=\"newton\")\n\nUndefVarError: UndefVarError: f not defined\n\n\n\n\n\nAs we’ve seen, you can use Julia just like you use MATLAB and get faster code. However, to write faster and better code, attempt to write in a “Julian” manner:\n\nDefine composite types as logically needed\nWrite type-stable functions for best performance\nTake advantage of multiple dispatch to write code that looks like math\nAdd methods to existing functions\n\n\n\n\nHow is Julia so fast? Julia is just-in-time (JIT) compiled, which means (according to this StackExchange answer):\n\nA JIT compiler runs after the program has started and compiles the code (usually bytecode or some kind of VM instructions) on the fly (or just-in-time, as it’s called) into a form that’s usually faster, typically the host CPU’s native instruction set. A JIT has access to dynamic runtime information whereas a standard compiler doesn’t and can make better optimizations like inlining functions that are used frequently.\n\n\nThis is in contrast to a traditional compiler that compiles all the code to machine language before the program is first run.\n\nIn particular, Julia uses type information at runtime to optimize how your code is compiled. This is why writing type-stable code makes such a difference in speed!\n\n\n\n\nTaken from QuantEcon’s Julia Essentials and Vectors, Arrays, and Matrices lectures.\n\nConsider the polynomial \\[p(x) = \\sum_{i=0}^n a_0 x^0\\] Using enumerate, write a function p such that p(x, coeff) computes the value of the polynomial with coefficients coeff evaluated at x.\nWrite a function solve_discrete_lyapunov that solves the discrete Lyapunov equation \\[S = ASA' + \\Sigma \\Sigma'\\] using the iterative procedure \\[S_0 = \\Sigma \\Sigma'\\] \\[S_{t+1} = A S_t A' + \\Sigma \\Sigma'\\] taking in as arguments the \\(n \\times n\\) matrix \\(A\\), the \\(n \\times k\\) matrix \\(\\Sigma\\), and a number of iterations.",
    "crumbs": [
      "Tutorials",
      "Tutorial: Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/1_1_Julia_Basics.html#computational-economics-eco309",
    "href": "tutorials/1_1_Julia_Basics.html#computational-economics-eco309",
    "title": "Tutorial: Julia Basics",
    "section": "",
    "text": "developped at MIT on top of opensource technologies\n\nlinux / git / llvm\n\nsyntax inspired by Matlab but:\n\nmore consistent\nlots of features from high level languages\n\neverything is JIT-compiled\n\ninterpreted vs compiled treadeoff\n-&gt; very fast\nmost of the base library is written in Julia\n\nopensource/free + vibrant community\n\nSome useful links from QuantEcon:\n\nJulia cheatsheet\nJulia-Matlab comparison\nJulia essentials\nVectors, arrays and matrices\n\nExcellent resources at: julialang - checkout JuliaAcademy, it’s free\n\n\n\nHow I learnt: interpreted code is slow, so vectorize your coe.\n\nfunction stupid_loop(I,J,K)\n    t = 0.0\n    for i=1:I\n        for j=1:J\n            for k = 1:K\n                t += 1.0\n            end        \n        end\n    end\n    return t\nend\n@time [ stupid_loop(1000,1000,i) for i =1:10]\n\nCode is translated to LLVM code then to instructions for the processor. Note that processor instructions are shorter than LLVM code.\n\n@code_llvm stupid_loop(10,10,10)\n\n\n@code_native stupid_loop(10,10,10)\n\n\n\n\n\n\nAssignement operator is = (equality is ==, identity is ===)\n\n# Assign the value 10 to the variable x\nx = 10\n\n\n2 == 3\n\n\n# Variable names can have Unicode characters\n# To get ϵ in the REPL, type \\epsilon&lt;TAB&gt;\nϵ = 1e-4\n\nDefault semantic is pass-by-reference:\n\na = [1,2,3,4]\nb = a\na[1] = 10\nb\n\nTo work on a copy: copy or deepcopy\n\na = [1,2,3,4]\nb = copy(a)\na[1]=10\nb\n\n\na .== b\n\n\na === b\n\n\n\n\n\n# for any object `typeof` returns the type\n?typeof\n\n\ntypeof(a)\n\n\n\n\n\ny = 2 + 2\n\n\n-y\n\n\n0.34*23\n\n\n3/4\n\n\n# Scalar multiplication doesn't require *\n3(4 - 2)\n\n\nx = 4\n2x\n\n\ntypeof(x)\n\n\nsizeof(a)\n\n\n\n\nEquality\n\n0 == 1\n\n\n2 != 3\n\n\n3 &lt;= 4\n\nIdentity\n\na = [34, 35]\nb = [34, 35]\nc = a\n\n\nc === a\n\n\nb === a\n\nBoolean operator\n\ntrue && false\n\n\ntrue || false\n\n\n!true\n\n\n\n\n\n# Strings are written using double quotes\nstr = \"This is a string\"\n\n\nch = 'k' # this is a character\n\n\n# Strings can also contain Unicode characters\nfancy_str = \"α is a string\"\n\n\n# String interpolation using $\n# The expression in parentheses is evaluated and the result is \n# inserted into the string\na = 2+2\n\"2 + 2 = $(a)\"\n\n\nprintln(\"It took me $(a) iterations\")\n\n\n# String concatenation using *\n\"hello\" * \"world\"\n\n\nprintln(\"hello \", \"world\")\n\n\n\n\nJulia has one-dimensional arrays. They are also called Vector.\n\nA = [1, 2]\n\n2-element Array{Int64,1}:\n 1\n 2\n\n\n\nsizeof(A)\n\n16\n\n\n\ntypeof(A) == Vector{Int64}\n\n\n# vectors have one dimension: they are indexed by an integer\nA[1]\n\n1\n\n\n2d arrays are also called matrices… and can be used for matrix multiplications.\n\nB = [0.1 0.2 0.3; 4 5 6]\n\n2×3 Array{Float64,2}:\n 0.1  0.2  0.3\n 4.0  5.0  6.0\n\n\n\nB*B'\n\n2×2 Array{Float64,2}:\n 0.14   3.2\n 3.2   77.0\n\n\nVectorized operations take a ., even comparisons:\n\nB.*B\n\n2×3 Array{Float64,2}:\n  0.01   0.04   0.09\n 16.0   25.0   36.0\n\n\n\nB .* B .&lt; B\n\n2×3 BitArray{2}:\n 1  1  1\n 0  0  0\n\n\nElements are always accessed with square brackets:\n\nB[1,2]\n\n0.2\n\n\n\nB[:,1]\n\n2-element Array{Float64,1}:\n 0.1\n 4.0\n\n\n\nB[:,1:end-1]\n\n2×2 Array{Float64,2}:\n 0.1  0.2\n 4.0  5.0\n\n\n\n\n\nConditions\n\nx = -3\nif x &lt; 0\n    println(\"x is negative\")\nelseif x &gt; 0 # optional and unlimited\n    println(\"x is positive\")\nelse         # optional\n    println(\"x is zero\")\nend\n\nx is negative\n\n\n\nprint(\"a\")\nprint(\"b\")\nprint(\"c\")\n\nabc\n\n\n\nprintln(\"a\")\nprintln(\"b\")\nprintln(\"c\")\n\na\nb\nc\n\n\nWhile\n\ni = 3\nwhile i &gt; 0\n    println(i)\n    i = i - 1\nend\n\n3\n2\n1\n\n\nFor loops\n\n# Iterate through ranges of numbers\nfor i = 1:3\n    println(i)\n    \n    if i == 2\n        break\n    end\nend\n\n1\n2\n\n\n\n# Iterate through arrays\ncities = [\"Boston\", \"New York\", \"Philadelphia\"]\nfor city in cities\n    println(city)\nend\n\nBoston\nNew York\nPhiladelphia\n\n\n\nstates = [\"MA\", \"NY\", \"PA\"]\n\n3-element Array{String,1}:\n \"MA\"\n \"NY\"\n \"PA\"\n\n\n\n( zip(cities, states) )\n\nzip([\"Boston\", \"New York\", \"Philadelphia\"], [\"MA\", \"NY\", \"PA\"])\n\n\n\ncollect( zip(cities, states) )\n\n3-element Array{Tuple{String,String},1}:\n (\"Boston\", \"MA\")\n (\"New York\", \"NY\")\n (\"Philadelphia\", \"PA\")\n\n\n\nfor t in zip(cities, states)\n    println(t)\nend\n\n(\"Boston\", \"MA\")\n(\"New York\", \"NY\")\n(\"Philadelphia\", \"PA\")\n\n\n\n# Iterate through arrays of tuples using zip\nfor (city, state) in zip(cities, states)\n    println(\"$city, $state\")\nend\n\nBoston, MA\nNew York, NY\nPhiladelphia, PA\n\n\n\n# Iterate through arrays and their indices using enumerate\nfor (i, city) in enumerate(cities)\n    println(\"City number $i is $city\")\nend\n\nCity number 1 is Boston\nCity number 2 is New York\nCity number 3 is Philadelphia\n\n\n\n\n\n\n[i^2 for i=1:10]\n\n10-element Array{Int64,1}:\n   1\n   4\n   9\n  16\n  25\n  36\n  49\n  64\n  81\n 100\n\n\n\n[i^2 for i=1:10 if mod(i,2)==0]\n\n5-element Array{Int64,1}:\n   4\n  16\n  36\n  64\n 100\n\n\n\n\n\n\nBasic functions\n\nfunction f(a,b,c)\n    res = a + b +c\n    return res\nend\n\nf (generic function with 1 method)\n\n\n\nf(3,4,3)\n\n10\n\n\nOptional arguments\n\nfunction f(a,b,c=1)\n    res = a + b +c\n    return res\nend\n\nf (generic function with 2 methods)\n\n\n\nf(1,2,3)\n\n6\n\n\n\nf(1,2)\n\n4\n\n\nKeyword arguments\n\nfunction g(a,b,c; operator=(+), add_one=false)\n    res = operator(a, operator( b , c) )\n    if add_one\n        res +=1\n    end\n    return res\nend\n\ng (generic function with 1 method)\n\n\n\ng(1,2,3)\n\n6\n\n\n\ng(1.0,2.9,3.0; operator=(/))\n\n1.0344827586206897\n\n\n\ng(1.0,2.9,3.0; operator=(/), add_one=true)\n\n2.0344827586206895\n\n\n\ng(1.0,2.9,3.0; add_one=true, operator=(/), )\n\n2.0344827586206895\n\n\nOne liners:\n\ng(x,y) = x^2 + y^2\n\ng (generic function with 2 methods)\n\n\nAnonymous function:\n\nfun = (x,y) -&gt; x^2 + 1 + y\n\n#12 (generic function with 1 method)\n\n\n\nf(1,2,3; operator=fun)\n\n10\n\n\n\n\n\n\n\nA composite type is a collection of named fields that can be treated as a single value. They bear a passing resemblance to MATLAB structs.\nAll fields must be declared ahead of time. The double colon, ::, constrains a field to contain values of a certain type. This is optional for any field.\n\nstruct Parameter_without_types\n    value\n    name\nend\n\n\ns = Parameter_without_types(4.4, \"no type at all\")\n\nParameter_without_types(4.4, \"no type at all\")\n\n\n\n# Type definition\nstruct Parameter\n    value::Float64\n    transformation::Function # Function is a type!\n    tex_label::String\n    description::String\nend\n\n\nParameter(4,fun,\"\\\\Gamma\", \"My parameter\")\n\nParameter(4.0, var\"#12#13\"(), \"\\\\Gamma\", \"My parameter\")\n\n\nWhen a type with \\(n\\) fields is defined, a constructor (function that creates an instance of that type) that takes \\(n\\) ordered arguments is automatically created. Additional constructors can be defined for convenience.\n\n# Creating an instance of the Parameter type using the default\n# constructor\nβ = Parameter(0.9, identity, \"\\beta\", \"Discount rate\")\n\nParameter(0.9, identity, \"\\beta\", \"Discount rate\")\n\n\n\nβ.value\n\n0.9\n\n\n\nParameter(value, transformation, tex) = Parameter(value, transformation, tex, \"no description\")\n\nParameter\n\n\n\nParameter(0.34, identity, \"\\beta\")\n\nParameter(0.34, identity, \"\\beta\", \"no description\")\n\n\n\n# constructor A\nParameter(value, tex) = Parameter(value, identity, tex, \"no description\")\n\nParameter\n\n\n\nParameter(0.1, \"\\beta\")\n\nParameter(0.1, identity, \"\\beta\", \"no description\")\n\n\n\n# constructor B\nParameter(value, transformation)  = Parameter(value, transformation, \"notex\", \"no description\")\n\nParameter\n\n\n\nParameter(0.1, \"\\beta\")\n\n\nMethodError: Cannot `convert` an object of type String to an object of type Function\nClosest candidates are:\n  convert(::Type{T}, ::T) where T at essentials.jl:205\n\n\n\n\n# here Julia doesn't know whether it should call constructor A or constructor B\n\n\n# solution : give different signatures to the various constructors\nParameter(value, tex::String)               = Parameter(value, identity, tex, \"no description\")\nParameter(value, transformation::Function)  = Parameter(value, transformation, \"notex\", \"no description\")\n\nParameter\n\n\n\nParameter(0.5, \"\\beta\")\n\nParameter(0.5, identity, \"\\beta\", \"no description\")\n\n\n\nParameter(0.9, u-&gt;u^2)\n\nParameter(0.9, var\"#14#15\"(), \"notex\", \"no description\")\n\n\n\nmethods( Parameter )\n\n# 6 methods for type constructor: Parameter(value::Float64, transformation::Function, tex_label::String, description::String) in Main at In[35]:3  Parameter(value, tex::String) in Main at In[55]:2  Parameter(value, transformation::Function) in Main at In[55]:3  Parameter(value, transformation) in Main at In[50]:2  Parameter(value, transformation, tex) in Main at In[45]:1  Parameter(value, transformation, tex_label, description) in Main at In[35]:3 \n\n\n\n# Alternative constructors end with an appeal to the default\n# constructor\nfunction Parameter(value::Float64, tex_label::String)\n    transformation = identity\n    description = \"No description available\"\n    return Parameter(value, transformation, tex_label, description)\nend\n\nα = Parameter(0.5, \"\\alpha\")\n\nParameter(0.5, identity, \"\\alpha\", \"No description available\")\n\n\nNow the function Parameter has two different methods with different signatures:\n\nmethods(Parameter)\n\n# 4 methods for type constructor: Parameter(value::Float64, transformation::Function, tex_label::String, description::String) in Main at In[1]:3  Parameter(value::Float64, tex_label::String) in Main at In[8]:4  Parameter(value, transformation, tex) in Main at In[5]:1  Parameter(value, transformation, tex_label, description) in Main at In[1]:3 \n\n\n\n# Find the fields of an instance of a composite type\nfieldnames(α)\n\n\nα.tex_label\n\n\n# Access a particular field using .\nα.value\n\n\n# Fields are modifiable and can be assigned to, like \n# ordinary variables\nα.value = 0.75\n\n\n\n\n\nby default structures in Julia are non-mutable\n\nβ.value = 0.6\n\nLoadError: setfield! immutable struct of type Parameter cannot be changed\n\n\n\nmutable struct Params\n    x:: Float64\n    y:: Float64\nend\n\n\npos = Params(0.4, 0.2)\n\nParams(0.4, 0.2)\n\n\n\npos.x = 0.5\n\n0.5\n\n\n\n\n\nParameterized types are data types that are defined to handle values identically regardless of the type of those values.\nArrays are a familiar example. An Array{T,1} is a one-dimensional array filled with objects of any type T (e.g. Float64, String).\n\n# Defining a parametric point\nstruct Duple{T} # T is a parameter to the type Duple\n    x::T\n    y::T\nend\n\n\nDuple(3, -1.0)\n\n\nMethodError: no method matching Duple(::Int64, ::Float64)\nClosest candidates are:\n  Duple(::T, ::T) where T at In[29]:3\n\n\n\n\nDuple{Int64}\n\nDuple{Int64}\n\n\nThis single declaration defines an unlimited number of new types: Duple{String}, Duple{Float64}, etc. are all immediately usable.\n\nDuple(1.3, 3.4)\n\nTruple3{Float64, Int64}((3.4, 5), 4)\n\n\n\nDuple(\"Hello\", \"Your\")\n\nWe can also restrict the type parameter T using the type hierarchy.\n\ntypeof(\"S\")\n\nString\n\n\n\ntypeof(\"S\") &lt;: Number\n\nfalse\n\n\n\ntypeof(4.6) &lt;: Float64\n\ntrue\n\n\n\nFloat64 &lt;: Number\n\ntrue\n\n\n\n# T can be any subtype of Number, but nothing else\nstruct PlanarCoordinate{T&lt;:Number}\n    x::T\n    y::T\nend\n\n\nPlanarCoordinate(\"4th Ave\", \"14th St\")\n\nLoadError: MethodError: no method matching PlanarCoordinate(::String, ::String)\n\n\n\nPlanarCoordinate(2//3, 8//9)\n\nPlanarCoordinate{Rational{Int64}}(2//3, 8//9)\n\n\n\nNumber:\n\n\n349//80 + 3//4 # rational \n\n409//80\n\n\n\ntypeof( factorial(20) )\n\nInt64\n\n\n\ntypeof( big(20) )\n\nBigInt\n\n\n\n\n\nYou can write all your code without thinking about types at all. If you do this, however, you’ll be missing out on some of the biggest benefits of using Julia.\nIf you understand types, you can:\n\nWrite faster code\nWrite expressive, clear, and well-structured programs (keep this in mind when we talk about functions)\nReason more clearly about how your code works\n\nEven if you only use built-in functions and types, your code still takes advantage of Julia’s type system. That’s why it’s important to understand what types are and how to use them.\n\n# Example: writing type-stable functions\nfunction sumofsins_unstable(n::Integer)  \n    sum = 0:: Integer\n    for i in 1:n  \n        sum += sin(3.4)  \n    end  \n    return sum \nend  \n\nfunction sumofsins_stable(n::Integer)  \n    sum = 0.0 :: Float64\n    for i in 1:n  \n        sum += sin(3.4)  \n    end  \n    return sum \nend\n\n# Compile and run\nsumofsins_unstable(Int(1e5))\nsumofsins_stable(Int(1e5))\n\n-25554.110202663698\n\n\n\n@time sumofsins_unstable(Int(1e5))\n\n  0.000268 seconds\n\n\n-25554.110202663698\n\n\n\n@time sumofsins_stable(Int(1e5))\n\n  0.000130 seconds\n\n\n-25554.110202663698\n\n\nIn sumofsins_stable, the compiler is guaranteed that sum is of type Float64 throughout; therefore, it saves time and memory. On the other hand, in sumofsins_unstable, the compiler must check the type of sum at each iteration of the loop. Let’s look at the LLVM intermediate representation.\n\n\n\nSo far we have defined functions over argument lists of any type. Methods allow us to define functions “piecewise”. For any set of input arguments, we can define a method, a definition of one possible behavior for a function.\n\n# Define one method of the function print_type\nfunction print_type(x::Number)\n    println(\"$x is a number\")\nend\n\nprint_type (generic function with 1 method)\n\n\n\n# Define another method\nfunction print_type(x::String)\n    println(\"$x is a string\")\nend\n\nprint_type (generic function with 2 methods)\n\n\n\n# Define yet another method\nfunction print_type(x::Number, y::Number)\n    println(\"$x and $y are both numbers\")\nend\n\nprint_type (generic function with 3 methods)\n\n\n\n# See all methods for a given function\nmethods(print_type)\n\n# 3 methods for generic function print_type: print_type(x::String) in Main at In[53]:3  print_type(x::Number) in Main at In[51]:3  print_type(x::Number, y::Number) in Main at In[54]:3 \n\n\nJulia uses multiple dispatch to decide which method of a function to execute when a function is applied. In particular, Julia compares the types of all arguments to the signatures of the function’s methods in order to choose the applicable one, not just the first (hence “multiple”).\n\nprint_type(5)\n\n5 is a number\n\n\n\nprint_type(\"foo\")\n\nfoo is a string\n\n\n\nprint_type([1, 2, 3])\n\nMethodError: MethodError: no method matching print_type(::Array{Int64,1})\nClosest candidates are:\n  print_type(!Matched::String) at In[53]:3\n  print_type(!Matched::Number) at In[51]:3\n  print_type(!Matched::Number, !Matched::Number) at In[54]:3\n\n\n\n\nJulia supports a short function definition for one-liners\n\nf(x::Float64) = x^2.0\nf(x::Int64) = x^3\n\nAs well as a special syntax for anonymous functions\n\nu-&gt;u^2\n\n\nmap(u-&gt;u^2, [1,2,3,4])\n\n\n\n\n\n\nf(a,b,c=true; algo=\"newton\")\n\nUndefVarError: UndefVarError: f not defined\n\n\n\n\n\nAs we’ve seen, you can use Julia just like you use MATLAB and get faster code. However, to write faster and better code, attempt to write in a “Julian” manner:\n\nDefine composite types as logically needed\nWrite type-stable functions for best performance\nTake advantage of multiple dispatch to write code that looks like math\nAdd methods to existing functions\n\n\n\n\nHow is Julia so fast? Julia is just-in-time (JIT) compiled, which means (according to this StackExchange answer):\n\nA JIT compiler runs after the program has started and compiles the code (usually bytecode or some kind of VM instructions) on the fly (or just-in-time, as it’s called) into a form that’s usually faster, typically the host CPU’s native instruction set. A JIT has access to dynamic runtime information whereas a standard compiler doesn’t and can make better optimizations like inlining functions that are used frequently.\n\n\nThis is in contrast to a traditional compiler that compiles all the code to machine language before the program is first run.\n\nIn particular, Julia uses type information at runtime to optimize how your code is compiled. This is why writing type-stable code makes such a difference in speed!",
    "crumbs": [
      "Tutorials",
      "Tutorial: Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/1_1_Julia_Basics.html#additional-exercises",
    "href": "tutorials/1_1_Julia_Basics.html#additional-exercises",
    "title": "Tutorial: Julia Basics",
    "section": "",
    "text": "Taken from QuantEcon’s Julia Essentials and Vectors, Arrays, and Matrices lectures.\n\nConsider the polynomial \\[p(x) = \\sum_{i=0}^n a_0 x^0\\] Using enumerate, write a function p such that p(x, coeff) computes the value of the polynomial with coefficients coeff evaluated at x.\nWrite a function solve_discrete_lyapunov that solves the discrete Lyapunov equation \\[S = ASA' + \\Sigma \\Sigma'\\] using the iterative procedure \\[S_0 = \\Sigma \\Sigma'\\] \\[S_{t+1} = A S_t A' + \\Sigma \\Sigma'\\] taking in as arguments the \\(n \\times n\\) matrix \\(A\\), the \\(n \\times k\\) matrix \\(\\Sigma\\), and a number of iterations.",
    "crumbs": [
      "Tutorials",
      "Tutorial: Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/2_solow.html",
    "href": "tutorials/2_solow.html",
    "title": "Convergence: Solow Model",
    "section": "",
    "text": "Solow Model\nA representative agent uses capital \\(k_t\\) to produce \\(y_t\\) using the following production function:\n\\[y_t = k_t^{\\alpha}\\]\nHe chooses to consume an amount \\(c_t \\in ]0, y_t]\\) and invests what remains:\n\\[i_t = y_t - c_t\\]\nHe accumulates capital \\(k_t\\) according to:\n\\[k_{t+1} = \\left( 1-\\delta \\right) k_{t} + i_{t}\\]\nwhere \\(\\delta\\) is the depreciation rate and \\(i_t\\) is the amount invested.\nThe goal of the representative agent is to maximize:\n\\[\\sum_{t\\geq 0} \\beta^t U(c_t)\\]\nwhere \\(U(x)=\\frac{x^{1-\\gamma}}{1-\\gamma}\\) and \\(\\beta&lt;1\\) is the discount factor.\nFor now, we ignore the objective and assume that the saving rate \\(s=\\frac{i_t}{y_t}\\) is constant over time.\n\n# how to store the model's information?\n\n\n# solution 1: variables zoo\nα = 0.3\nβ = 0.9\n\n0.9\n\n\n\n# solution 2: list\nm = [0.3, 0.9]\n\n\n# solution 2.b: tuple\nm = (0.3, 0.9)\n\n(0.3, 0.9)\n\n\n\n# solution 3: dictionary\n\n# a dictionary is a list of pairs\n:a =&gt; 2 # a pair associating symbol :a to 2b\n\"a\" =&gt; 2 # can be done with a string (but slower)\n\n# \n\nDict(\n    :α=&gt;0.3,\n    :β=&gt;0.96\n)\n\nDict{Symbol, Float64} with 2 entries:\n  :α =&gt; 0.3\n  :β =&gt; 0.96\n\n\n\n# solution 4: define your own type\nstruct MyOwnType\n    α::Float64 # fields\n    β::Float64 #\n    # γ::Float64\nend\n# problem with types: not easy to modify after first definition\n\n\nmymodel = MyOwnType(0.3, 0.96)\nmymodel.α\n\n0.3\n\n\n\n# solution 5: namedtuples\n\nmodel = (; α=0.3, β=0.96 ) # after semi-colon: named arguments\n\n(α = 0.3, β = 0.96)\n\n\n\n# behaves like a tuple:\nmodel[1]\n\n0.3\n\n\n\n# behaves like a structure:\nmodel.α\n\n0.3\n\n\n\n# is associated to a unique type (so very fast)\ntypeof(model)\n\n@NamedTuple{α::Float64, β::Float64}\n\n\nCreate a NamedTuple to hold parameter values \\(\\beta=0.96\\), \\(\\delta=0.1\\), \\(\\alpha=0.3\\), \\(\\gamma=4\\).\n\n# 🦁\nmodel = (; α=0.3, β=0.96, γ=4.0, δ=0.1 ) # after semi-colon: named arguments\n\n(α = 0.3, β = 0.96, γ = 4.0, δ = 0.1)\n\n\n\n# to update model (returns a new model)\nmodel2 = merge(model, (;γ=2.0, ϵ=0.001))\nmodel2\n\n(α = 0.3, β = 0.96, γ = 2.0, δ = 0.1, ϵ = 0.001)\n\n\n\nmodel\n\n(α = 0.3, β = 0.96, γ = 4.0, δ = 0.1)\n\n\nWrite down the formula of function \\(f\\) such that \\(k_{t+1}\\): \\(k_{t+1} = f(k_t)\\).\n\\[k_{t+1} = (1-\\delta) k_t + s k_t^{\\alpha}\\]\nDefine a function f(k::Float64, p::NamedTuple)::Float64 to represent \\(f\\) for a given calibration\n\n# extract δ, α from p\n\n# solution 1\nα = model.α\nδ = model.δ\n\n# solution 2: named arguments *unpacking*\n(;α, δ) = model\n\n(α = 0.3, β = 0.96, γ = 4.0, δ = 0.1)\n\n\n\n# 🦁\nfunction f(k, p; s=0.2)\n\n    # extract δ, α from p\n\n    (;α, δ) = p\n\n    k1 = (1-δ)*k + s*k^α\n\n    return k1\nend\n\nf (generic function with 1 method)\n\n\n\n# 🦁\nf(0.5, model)\n\n0.6124504792712471\n\n\nWrite a function simulate(k0::Float64, T::Int, p::NamedTuple)::Vector{Float64} to compute the simulation over T periods starting from initial capital level k0.\n\n# by default a vector can contain anything -&gt; not efficient\n[]\n\nAny[]\n\n\n\n# otherwise, the type if inferred from the content\n[0.0]\n\n1-element Vector{Float64}:\n 0.0\n\n\n\n# unless explicitly specified\nFloat64[]\n\nFloat64[]\n\n\n\n# 🦁\nfunction simulate(k0, T, p; s=0.2)\n    # we add an option to specify the saving rate\n\n    sim = [k0]\n    for t = 1:T\n\n        kt = sim[end]\n        kn = f(kt,p; s=s)\n        push!(sim, kn)\n\n    end\n\n    return sim\n\nend\n\nsimulate (generic function with 1 method)\n\n\n\n# 🦁\nsim = simulate(0.5, 100, model; s=0.3)\n\n101-element Vector{Float64}:\n 0.5\n 0.6936757189068706\n 0.8931322483167848\n 1.0938176799995427\n 1.292616114625568\n 1.4873672712967825\n 1.6765760854980325\n 1.8592250084513522\n 2.0346465014986186\n 2.2024331183825105\n ⋮\n 4.796935178963784\n 4.797428673633411\n 4.797887638373357\n 4.798314488292645\n 4.798711469711076\n 4.7990806719381895\n 4.79942403823261\n 4.799743375998478\n 4.800040366271797\n\n\nMake a nice plot to illustrate the convergence. Do we get convergence from any initial level of capital?\n\n# 🦁\nusing Plots\nplot(sim)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 🦁\n\n# compute growh rate \ngrowth(v) = v[2:end] ./ v[1:end-1] .- 1\n\ngrowth (generic function with 1 method)\n\n\n\n# 🦁\n\n# compare different initial capital levels\nsim0 = simulate(0.5, 100, model);\nsim1 = simulate(1.0, 100, model);\nsim2 = simulate(2.0, 100, model);\n\npl1 = plot(sim0, label=\"k0=0.5\", title=\"Capital Level\")\nplot!(pl1, sim1, label=\"k0=1.0\")\nplot!(pl1, sim2, label=\"k0=2.0\")\n\nα = model.α\ny0 = sim0.^α\ny1 = sim1.^α\ny2 = sim2.^α\n\npl2 = plot(y0, label=\"k0=0.5\", title=\"Output Level\")\nplot!(pl2, y1, label=\"k0=1.0\")\nplot!(pl2, y2, label=\"k0=2.0\")\n\npl3 = plot(growth(y0), label=\"k0=0.5\", title=\"Growth Rates\")\nplot!(pl3, growth(y1), label=\"k0=1.0\")\nplot!(pl3, growth(y2), label=\"k0=2.0\")\n\nplot(pl1, pl2, pl3)\n# plot([sim0, sim1, sim2])\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# compare different initial capital levels\nsim0 = simulate(0.5, 100, model; s=0.1);\nsim1 = simulate(0.5, 100, model; s=0.2);\nsim2 = simulate(0.5, 100, model; s=0.3);\n\npl1 = plot(sim0, label=\"s=0.1\", title=\"Capital Level\")\nplot!(pl1, sim1, label=\"s=0.2\")\nplot!(pl1, sim2, label=\"s=0.3\")\n\nα = model.α\ny0 = sim0.^α\ny1 = sim1.^α\ny2 = sim2.^α\n\npl2 = plot(y0, label=\"s=0.1\", title=\"Output Level\")\nplot!(pl2, y1, label=\"s=0.2\")\nplot!(pl2, y2, label=\"s=0.3\")\n\npl3 = plot(growth(y0), label=\"s=0.1\", title=\"Growth Rates\")\nplot!(pl3, growth(y1), label=\"s=0.2\")\nplot!(pl3, growth(y2), label=\"s=0.3\")\n\nplot(pl1, pl2, pl3)\n# plot([sim0, sim1, sim2])\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSuppose you were interested in using f to compute the steady-state. What would you propose to measure convergence speed? To speed-up convergence? Implement these ideas.\n\nquick_dirty_steady_state(model; s=0.2) = simulate(1.0, 100, model; s=s)[end]\n\nquick_dirty_steady_state (generic function with 1 method)\n\n\n\n@time quick_dirty_steady_state(model) \n\n  0.000014 seconds (5 allocations: 1.938 KiB)\n\n\n2.6904293693526475\n\n\n\n# how does the steady-state depends on saving rate ? \n\ns_vector = range(0.05, 0.95; length=1000)\nss_vector = [quick_dirty_steady_state(model;s=s) for s in s_vector]\n\nplot(s_vector, ss_vector)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# iterative version\n\nfunction steady_state(model; k0=1.0, T=1000, s=0.2, τ_η=1e-6)\n\n    for t=1:T\n        k1 = f(k0, model;s=s)\n        η = abs(k1-k0)\n        if η&lt;τ_η\n            return k1, t\n        end\n        k0 = k1\n    end\n\n\n    # kss = \nend\n\nsteady_state (generic function with 1 method)\n\n\n\n@time steady_state(model)\n\n  0.007030 seconds (9.08 k allocations: 592.906 KiB, 99.62% compilation time)\n\n\n(2.6917872031057732, 164)\n\n\n\n# 🦁\n# how do you modify it to implement Steffenson algorithm?\nfunction steady_state_steffenson(model; k0=1.0, T=1000, s=0.2, τ_η=1e-6, K=10, verbose=false)\n\n    # K number of iterations without extrapolation\n\n\n    for t=1:T\n\n        k1 = f(k0, model;s=s)\n\n        if t&gt;K\n            # use extrapolation\n            k2 = f(k1, model;s=s)\n            kn = k0 - (k1-k0)^2/(k2 - 2*k1 + k0)\n        else\n            kn = k1\n        end\n        η = abs(kn-k0)\n\n        if verbose\n            println(\"Iteration: \", t, \" : \",  k0, \" : \", kn , \" : η = \", η)\n        end\n        if η&lt;τ_η\n            return k1, t\n        end\n        k0 = kn\n    end\n\nend\n\nsteady_state_steffenson (generic function with 1 method)\n\n\n\nsteady_state_steffenson(model; verbose=true)\n\nIteration: 1 : 1.0 : 1.1 : η = 0.10000000000000009\nIteration: 2 : 1.1 : 1.195801151884219 : η = 0.095801151884219\nIteration: 3 : 1.195801151884219 : 1.2872430129191352 : η = 0.09144186103491614\nIteration: 4 : 1.2872430129191352 : 1.3742574618933996 : η = 0.08701444897426436\nIteration: 5 : 1.3742574618933996 : 1.456845771393547 : η = 0.0825883095001474\nIteration: 6 : 1.456845771393547 : 1.5350611815735393 : η = 0.07821541017999234\nIteration: 7 : 1.5350611815735393 : 1.6089955116075123 : η = 0.07393433003397298\nIteration: 8 : 1.6089955116075123 : 1.6787687913320717 : η = 0.06977327972455938\nIteration: 9 : 1.6787687913320717 : 1.7445211874595348 : η = 0.06575239612746309\nIteration: 10 : 1.7445211874595348 : 1.8064066954927231 : η = 0.061885508033188374\nIteration: 11 : 1.8064066954927231 : 2.763707849732011 : η = 0.957301154239288\nIteration: 12 : 2.763707849732011 : 2.692058690737832 : η = 0.07164915899417901\nIteration: 13 : 2.692058690737832 : 2.6918003887220845 : η = 0.00025830201574761347\nIteration: 14 : 2.6918003887220845 : 2.6918003852647976 : η = 3.4572869012094998e-9\n\n\n(2.6918003884800683, 14)\n\n\n\n@time steady_state_steffenson(model; verbose=false, K=1)\n\n  0.000008 seconds (1 allocation: 32 bytes)\n\n\n(2.691800385266389, 6)",
    "crumbs": [
      "Tutorials",
      "Convergence: Solow Model"
    ]
  },
  {
    "objectID": "tutorials/6_automatic_differentiation.html",
    "href": "tutorials/6_automatic_differentiation.html",
    "title": "Simulation and Automatic Differentiation",
    "section": "",
    "text": "Choose a 2x2 matrix \\(P\\) (with spectral radius &lt;1) and a 2x2 matrix Q.\nConsider the VAR1 process \\(x_t = P x_{t-1} + Q \\epsilon_t\\) where \\(\\epsilon_t= (\\eta_{1,t}, \\eta_{2,t})\\) with \\(\\eta_1\\sim\\mathcal{N}(0,1)\\) and \\(\\eta_1\\sim\\mathcal{N}(0,1)\\)\nCompute impulse response functions.\nSimulate the process for \\(T\\) periods.\nSimulate the process \\(N=1000\\) times for \\(T=1000\\) periods. How would you store the results?\nBonus: how can you make the calculation faster?\nMake density plots to illustrate the ergodic property of the process\nCompute the asymptotic variance of the process. Compare with the theoretical one.",
    "crumbs": [
      "Tutorials",
      "Simulation and Automatic Differentiation"
    ]
  },
  {
    "objectID": "tutorials/6_automatic_differentiation.html#learning-the-consumption-rule",
    "href": "tutorials/6_automatic_differentiation.html#learning-the-consumption-rule",
    "title": "Simulation and Automatic Differentiation",
    "section": "Learning the Consumption Rule",
    "text": "Learning the Consumption Rule\nThis exercise is inspired from Individual learning about consumption by Todd Allen and Chris Carroll link and from Deep Learning for Solving Economic models by Maliar, Maliar and Winant link\nWe consider the following consumption saving problem. An agent receives random income \\(y_t = \\exp(\\epsilon_t)\\) where \\(\\epsilon_t\\sim \\mathcal{N}(\\sigma)\\) (\\(\\sigma\\) is the standard deviation.)\nConsumer starts the period with available income \\(w_t\\). The law of motion for available income is:\n\\[w_t = \\exp(\\epsilon_t) + (w_{t-1}-c_{t-1}) r\\]\nwhere consumption \\(c_t \\in ]0,w_t]\\) is chosen in each period in order to maximize:\n\\[E_t \\sum_{t=0}^T \\beta^t U(c_t)\\]\ngiven initial available income \\(w_0\\).\nIn the questions below, we will use the following calibration:\n\n\\(\\beta = 0.9\\)\n\\(\\sigma = 0.1\\)\n\\(T=100\\)\n\\(U(x) = \\frac{x^{1-\\gamma}}{1-\\gamma}\\) with \\(\\gamma=2\\)\n\\(w_0 = 1.1\\) (alternatively, consider values 0.5 and 1)\n\nThe theoretical solution to this problem is a concave function \\(\\varphi\\) such that \\(\\varphi(x)\\in ]0,x]\\) and \\(\\forall t,  c_t=\\varphi(w_t)\\). Qualitatively, agents accumulate savings, up to a certain point (a buffer stock), beyond which wealth is not increasing any more (in expectation).\nCarroll and Allen have noticed that the true solution can be approximated very well by a simple rule:\n\\(\\psi(x) = \\min(x, \\theta_0 + \\theta_1 (x - \\theta_0) )\\)\nThe main question they ask in the aforementioned paper is whether it is realistic that agents would learn good values of \\(\\theta_0\\) and \\(\\theta_1\\) by observing past experiences.\nWe would like to examine this result by checking convergence of speed of stochastic gradient algorithm.\n\nLifetime reward\nDefine a NamedTuple to hold the parameter values\nDefine simple rule fonction consumption(w::Number, θ_0::Number, θ_1::Number, p::NamedTuple) which compute consumption using a simple rule. What is the meaning of \\(\\theta_0\\) and \\(\\theta_1\\)? Make a plot in the space \\(w,c\\), including consumption rule and the line where \\(w_{t+1} = w_t\\).\n(remark for later: Number type is compatible with ForwardDiff.jl 😉)\nWrite a function lifetime_reward(w_0::Number, θ_0::Number, θ_1::Number, p::NamedTuple) which computes one realization of \\(\\sum \\beta^t U(c_t)\\) for initial wealth w_0 and simple rule θ_0, θ_1. Mathematically, we denote it by \\(\\xi(\\omega; \\theta_0, \\theta_1)\\), where \\(\\omega\\) represents the succession of random income draws.\nWrite a function expected_lifetime_reward(w_0::Number, θ_0::Number, θ_1::Number,  p::NamedTuple; N=1000) which computes expected lifetime reward using N Monte-Carlo draws. Mathematically, we write it \\(\\Xi^{N}(\\theta_0, \\theta_1) =\\frac{1}{N} \\sum_1^N {\\xi(\\omega_N; \\theta_0, \\theta_1)}\\). Check empirically that standard deviation of these draws decrease proportionally to \\(\\frac{1}{\\sqrt{N}}\\) .\n__Using a high enough number for N, compute optimal values for \\(\\theta_0\\) and \\(\\theta_1\\). What is the matching value for the objective function converted into an equivalent stream of determinstic consumption ? That is if V is the approximated value computed above, what is \\(\\bar{c}\\in \\R\\) such that $ V= _{t=0}^T ^t U({c})$ ?__\nUsing a high enough number for N, make contour plots of lifetime rewards as a function of θ_0 and θ_1. Ideally, represent lines with \\(1\\%\\) consumption loss, \\(5\\%\\) and \\(10\\%\\) deterministic consumption loss w.r.t. to maximum.\n\n\nLearning to save\nWe now focus on the number of steps it takes to optimize \\(\\theta_0\\), \\(\\theta_1\\).\nImplement a function ∇(θ::Vector; N=1000)::Vector which computes the gradient of the objective w.r.t. θ==[θ_0,θ_1]. (You need to use automatic differentiation, otherwise you might get incorrect results).\nImplement a gradient descent algorithm to maximize \\(\\Xi^N(\\theta_0, \\theta_1)\\) using learning rate \\(\\lambda \\in ]0,1]\\). Stop after a predefined number of iterations. Compare convergence speed for different values of \\(\\lambda\\) and plot them on the \\(\\theta_0, \\theta_1\\) plan. How many steps does it take to enter the 1% error zone? The 5% and the 10% error zone?\nEven for big N, the evaluated value of ∇ are stochastic, and always slightly inaccurate. In average, they are non-biased and the algorithm converges in expectation (it fluctuates around the maximum). This is called the stochastic gradient method.\nWhat are the values of \\(N\\) and \\(\\lambda\\) which minimize the number of iterations before reaching the target zones (at 1%, 2%, etc…)? How many simulations periods does it correspond to? Would you say it is realistic that consumers learn from their own experience?",
    "crumbs": [
      "Tutorials",
      "Simulation and Automatic Differentiation"
    ]
  },
  {
    "objectID": "pushups/2_Optimization_pushups.html",
    "href": "pushups/2_Optimization_pushups.html",
    "title": "Optimization Pushups",
    "section": "",
    "text": "The spirit of this simple tutorial consists in learning how to write simple solution algorithms. For each algorithm, test that it works, using simple test functions whose solution is known.\nWrite a function fixed_point(f::Function, x0::Float64) which computes the fixed point of f starting from initial point x0.\nWrite a function bisection(f::Function, a::Float64, b::Float64) which computes the zero of function f within (a,b) using a bisection method.\nWrite a function golden(f::Function, a::Float64, b::Float64) which computes a zero of function f within (a,b) using a golden ratio method.\nWrite a function zero_newton(f::Function, x0::Float64) which computes the zero of function f starting from initial point x0.\nAdd an option zero_newton(f::Function, x0::Float64, backtracking=true) which computes the zero of function f starting from initial point x0 using backtracking in each iteration.\nWrite a function min_gd(f::Function, x0::Float64) which computes the minimum of function f using gradient descent. Assume f returns a scalar and a gradient.\nWrite a function min_nr(f::Function, x0::Float64) which computes the minimum of function f using Newton-Raphson method. Assume f returns a scalar, a gradient, and a hessian.\nWrite a method zero_newton(f::Function, x0::Vector{Float64}) which computes the zero of a vector valued function f starting from initial point x0.\nAdd an method zero_newton(f::Function, x0::Vector{Float64}, backtracking=true) which computes the zero of function f starting from initial point x0 using backtracking in each iteration.\nAdd a method zero_newton(f::Function, x0::Vector{Float64}, backtracking=true, lb=Vector{Float64}) which computes the zero of function f starting from initial point x0 taking complementarity constraint into account x&gt;=lb using the Fischer-Burmeister method.",
    "crumbs": [
      "Pushups",
      "Optimization Pushups"
    ]
  },
  {
    "objectID": "docs/tutorials/2_solow.out.html",
    "href": "docs/tutorials/2_solow.out.html",
    "title": "Convergence: Solow Model",
    "section": "",
    "text": "Convergence: Solow Model\nPablo Winant\n\nSolow Model\nA representative agent uses capital \\(k_t\\) to produce \\(y_t\\) using the following production function:\n\\[y_t = k_t^{\\alpha}\\]\nHe chooses to consume an amount \\(c_t \\in ]0, y_t]\\) and invests what remains:\n\\[i_t = y_t - c_t\\]\nHe accumulates capital \\(k_t\\) according to:\n\\[k_{t+1} = \\left( 1-\\delta \\right) k_{t} + i_{t}\\]\nwhere \\(\\delta\\) is the depreciation rate and \\(i_t\\) is the amount invested.\nThe goal of the representative agent is to maximize:\n\\[\\sum_{t\\geq 0} \\beta^t U(c_t)\\]\nwhere \\(U(x)=\\frac{x^{1-\\gamma}}{1-\\gamma}\\) and \\(\\beta&lt;1\\) is the discount factor.\nFor now, we ignore the objective and assume that the saving rate \\(s=\\frac{c_t}{y_t}\\) is constant over time.\nCreate a NamedTuple to hold parameter values \\(\\beta=0.96\\), \\(\\delta=0.1\\), \\(\\alpha=0.3\\), \\(\\gamma=4\\).\nWrite down the formula of function \\(f\\) such that \\(k_{t+1}\\): \\(k_{t+1} = f(k_t)\\).\nDefine a function f(k::Float64, p::NamedTuple)::Float64 to represent \\(f\\) for a given calibration\nWrite a function simulate(k0::Float64, T::Int, p::NamedTuple)::Vector{Float64} to compute the simulation over T periods starting from initial capital level k0.\nMake a nice plot to illustrate the convergence. Do we get convergence from any initial level of capital?\nSuppose you were interested in using f to compute the steady-state. What would you propose to measure convergence speed? To speed-up convergence? Implement these ideas."
  }
]